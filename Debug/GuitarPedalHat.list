
GuitarPedalHat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000751c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014094  08007720  08007720  00017720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b7b4  0801b7b4  000305f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b7b4  0801b7b4  0002b7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b7bc  0801b7bc  000305f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b7bc  0801b7bc  0002b7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b7c0  0801b7c0  0002b7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005f0  20000000  0801b7c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00034de0  200005f0  0801bdb4  000305f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200353d0  0801bdb4  000353d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000305f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029537  00000000  00000000  0003061e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008869  00000000  00000000  00059b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  000623c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eae  00000000  00000000  00063650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002933c  00000000  00000000  000644fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a82  00000000  00000000  0008d83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101fb1  00000000  00000000  000a12bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ac  00000000  00000000  001a326d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003088  00000000  00000000  001a331c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00006f92  00000000  00000000  001a63a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000164  00000000  00000000  001ad336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00003a9c  00000000  00000000  001ad49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000148  00000000  00000000  001b0f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <arm_bitreversal_32>:
 8000200:	1c4b      	adds	r3, r1, #1
 8000202:	2b01      	cmp	r3, #1
 8000204:	bf98      	it	ls
 8000206:	4770      	bxls	lr
 8000208:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800020c:	1c91      	adds	r1, r2, #2
 800020e:	089b      	lsrs	r3, r3, #2

08000210 <arm_bitreversal_32_0>:
 8000210:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000214:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000218:	880a      	ldrh	r2, [r1, #0]
 800021a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800021e:	4480      	add	r8, r0
 8000220:	4481      	add	r9, r0
 8000222:	4402      	add	r2, r0
 8000224:	4484      	add	ip, r0
 8000226:	f8d9 7000 	ldr.w	r7, [r9]
 800022a:	f8d8 6000 	ldr.w	r6, [r8]
 800022e:	6815      	ldr	r5, [r2, #0]
 8000230:	f8dc 4000 	ldr.w	r4, [ip]
 8000234:	f8c9 6000 	str.w	r6, [r9]
 8000238:	f8c8 7000 	str.w	r7, [r8]
 800023c:	f8cc 5000 	str.w	r5, [ip]
 8000240:	6014      	str	r4, [r2, #0]
 8000242:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000246:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800024a:	6855      	ldr	r5, [r2, #4]
 800024c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000250:	f8c9 6004 	str.w	r6, [r9, #4]
 8000254:	f8c8 7004 	str.w	r7, [r8, #4]
 8000258:	f8cc 5004 	str.w	r5, [ip, #4]
 800025c:	6054      	str	r4, [r2, #4]
 800025e:	3108      	adds	r1, #8
 8000260:	3b01      	subs	r3, #1
 8000262:	d1d5      	bne.n	8000210 <arm_bitreversal_32_0>
 8000264:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000268:	4770      	bx	lr

0800026a <arm_bitreversal_16>:
 800026a:	1c4b      	adds	r3, r1, #1
 800026c:	2b01      	cmp	r3, #1
 800026e:	bf98      	it	ls
 8000270:	4770      	bxls	lr
 8000272:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000276:	1c91      	adds	r1, r2, #2
 8000278:	089b      	lsrs	r3, r3, #2

0800027a <arm_bitreversal_16_0>:
 800027a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800027e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000282:	880a      	ldrh	r2, [r1, #0]
 8000284:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000288:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800028c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000290:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000294:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000298:	f8d9 7000 	ldr.w	r7, [r9]
 800029c:	f8d8 6000 	ldr.w	r6, [r8]
 80002a0:	6815      	ldr	r5, [r2, #0]
 80002a2:	f8dc 4000 	ldr.w	r4, [ip]
 80002a6:	f8c9 6000 	str.w	r6, [r9]
 80002aa:	f8c8 7000 	str.w	r7, [r8]
 80002ae:	f8cc 5000 	str.w	r5, [ip]
 80002b2:	6014      	str	r4, [r2, #0]
 80002b4:	3108      	adds	r1, #8
 80002b6:	3b01      	subs	r3, #1
 80002b8:	d1df      	bne.n	800027a <arm_bitreversal_16_0>
 80002ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002be:	4770      	bx	lr

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_uldivmod>:
 8000370:	b953      	cbnz	r3, 8000388 <__aeabi_uldivmod+0x18>
 8000372:	b94a      	cbnz	r2, 8000388 <__aeabi_uldivmod+0x18>
 8000374:	2900      	cmp	r1, #0
 8000376:	bf08      	it	eq
 8000378:	2800      	cmpeq	r0, #0
 800037a:	bf1c      	itt	ne
 800037c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000380:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000384:	f000 b80c 	b.w	80003a0 <__aeabi_idiv0>
 8000388:	f1ad 0c08 	sub.w	ip, sp, #8
 800038c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000390:	f007 f868 	bl	8007464 <__udivmoddi4>
 8000394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039c:	b004      	add	sp, #16
 800039e:	4770      	bx	lr

080003a0 <__aeabi_idiv0>:
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop

080003a4 <__do_global_dtors_aux>:
 80003a4:	b510      	push	{r4, lr}
 80003a6:	4c05      	ldr	r4, [pc, #20]	; (80003bc <__do_global_dtors_aux+0x18>)
 80003a8:	7823      	ldrb	r3, [r4, #0]
 80003aa:	b933      	cbnz	r3, 80003ba <__do_global_dtors_aux+0x16>
 80003ac:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <__do_global_dtors_aux+0x1c>)
 80003ae:	b113      	cbz	r3, 80003b6 <__do_global_dtors_aux+0x12>
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <__do_global_dtors_aux+0x20>)
 80003b2:	f3af 8000 	nop.w
 80003b6:	2301      	movs	r3, #1
 80003b8:	7023      	strb	r3, [r4, #0]
 80003ba:	bd10      	pop	{r4, pc}
 80003bc:	200005f0 	.word	0x200005f0
 80003c0:	00000000 	.word	0x00000000
 80003c4:	08007704 	.word	0x08007704

080003c8 <frame_dummy>:
 80003c8:	b508      	push	{r3, lr}
 80003ca:	4b03      	ldr	r3, [pc, #12]	; (80003d8 <frame_dummy+0x10>)
 80003cc:	b11b      	cbz	r3, 80003d6 <frame_dummy+0xe>
 80003ce:	4903      	ldr	r1, [pc, #12]	; (80003dc <frame_dummy+0x14>)
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <frame_dummy+0x18>)
 80003d2:	f3af 8000 	nop.w
 80003d6:	bd08      	pop	{r3, pc}
 80003d8:	00000000 	.word	0x00000000
 80003dc:	200005f4 	.word	0x200005f4
 80003e0:	08007704 	.word	0x08007704

080003e4 <SPI_Setup>:
 */


#include "SPI.h"

void SPI_Setup(void){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	// SPI Clock Enable
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80003e8:	4b13      	ldr	r3, [pc, #76]	; (8000438 <SPI_Setup+0x54>)
 80003ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003ec:	4a12      	ldr	r2, [pc, #72]	; (8000438 <SPI_Setup+0x54>)
 80003ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003f2:	6453      	str	r3, [r2, #68]	; 0x44

	//           software SS | NSS high    | prescale /8 = 13.5Mhz | master mode  | read on falling edge
	SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI | (2 << SPI_CR1_BR_Pos) | SPI_CR1_MSTR | SPI_CR1_CPHA;
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <SPI_Setup+0x58>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4910      	ldr	r1, [pc, #64]	; (800043c <SPI_Setup+0x58>)
 80003fa:	f240 3315 	movw	r3, #789	; 0x315
 80003fe:	4313      	orrs	r3, r2
 8000400:	600b      	str	r3, [r1, #0]

	//           align FIFO 8b | 8 bit data size       | Rx DMA
	SPI1->CR2 |= SPI_CR2_FRXTH | (7 << SPI_CR2_DS_Pos) | SPI_CR2_RXDMAEN;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <SPI_Setup+0x58>)
 8000404:	685a      	ldr	r2, [r3, #4]
 8000406:	490d      	ldr	r1, [pc, #52]	; (800043c <SPI_Setup+0x58>)
 8000408:	f241 7301 	movw	r3, #5889	; 0x1701
 800040c:	4313      	orrs	r3, r2
 800040e:	604b      	str	r3, [r1, #4]

	SPI_DMA_Setup();
 8000410:	f000 f816 	bl	8000440 <SPI_DMA_Setup>

	//           Tx DMA
	SPI1->CR2 |= SPI_CR2_TXDMAEN;
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <SPI_Setup+0x58>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <SPI_Setup+0x58>)
 800041a:	f043 0302 	orr.w	r3, r3, #2
 800041e:	6053      	str	r3, [r2, #4]

	TIMER3_Setup();
 8000420:	f000 f880 	bl	8000524 <TIMER3_Setup>
	TIMER2_Setup();
 8000424:	f000 f83a 	bl	800049c <TIMER2_Setup>

	//           enable SPI
	SPI1->CR1 |= SPI_CR1_SPE;
 8000428:	4b04      	ldr	r3, [pc, #16]	; (800043c <SPI_Setup+0x58>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a03      	ldr	r2, [pc, #12]	; (800043c <SPI_Setup+0x58>)
 800042e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000432:	6013      	str	r3, [r2, #0]
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40023800 	.word	0x40023800
 800043c:	40013000 	.word	0x40013000

08000440 <SPI_DMA_Setup>:


void SPI_DMA_Setup(void){
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	// DMA Clock Enable
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMA2EN;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SPI_DMA_Setup+0x44>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000448:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <SPI_DMA_Setup+0x44>)
 800044a:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 800044e:	6313      	str	r3, [r2, #48]	; 0x30

	// SPI1 Rx - Stream 0 - Channel 3
	DMA2_Stream0->PAR = (long)&(SPI1->DR);
 8000450:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <SPI_DMA_Setup+0x48>)
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <SPI_DMA_Setup+0x4c>)
 8000454:	609a      	str	r2, [r3, #8]
//	DMA2_Stream0->M0AR = (long)&(dataRx);
	//                  channel 3                 | very high   | mmry inc      | transfer complete interrupt
	DMA2_Stream0->CR |= (3 << DMA_SxCR_CHSEL_Pos) | DMA_SxCR_PL | DMA_SxCR_MINC | DMA_SxCR_TCIE;
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <SPI_DMA_Setup+0x48>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	490b      	ldr	r1, [pc, #44]	; (8000488 <SPI_DMA_Setup+0x48>)
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <SPI_DMA_Setup+0x50>)
 800045e:	4313      	orrs	r3, r2
 8000460:	600b      	str	r3, [r1, #0]
	DMA2_Stream0->NDTR = 0;
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <SPI_DMA_Setup+0x48>)
 8000464:	2200      	movs	r2, #0
 8000466:	605a      	str	r2, [r3, #4]

	// SPI1 Tx - Stream 3 - Channel 3
	DMA2_Stream3->PAR = (long)&(SPI1->DR);
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <SPI_DMA_Setup+0x54>)
 800046a:	4a08      	ldr	r2, [pc, #32]	; (800048c <SPI_DMA_Setup+0x4c>)
 800046c:	609a      	str	r2, [r3, #8]
//	DMA2_Stream3->M0AR = (long)&(dataTx);
	DMA2_Stream3->NDTR = 0;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <SPI_DMA_Setup+0x54>)
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
	//                 channel 3                 | very high   |  mmry inc      | mmry - prphrl  | enable
	DMA2_Stream3->CR = (3 << DMA_SxCR_CHSEL_Pos) | DMA_SxCR_PL | DMA_SxCR_MINC | DMA_SxCR_DIR_0;// | DMA_SxCR_EN;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <SPI_DMA_Setup+0x54>)
 8000476:	4a08      	ldr	r2, [pc, #32]	; (8000498 <SPI_DMA_Setup+0x58>)
 8000478:	601a      	str	r2, [r3, #0]

//
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	40023800 	.word	0x40023800
 8000488:	40026410 	.word	0x40026410
 800048c:	4001300c 	.word	0x4001300c
 8000490:	06030410 	.word	0x06030410
 8000494:	40026458 	.word	0x40026458
 8000498:	06030440 	.word	0x06030440

0800049c <TIMER2_Setup>:

// Sync Pulse Generator
void TIMER2_Setup(void){
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	// Timer2 Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <TIMER2_Setup+0x84>)
 80004a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a4:	4a1e      	ldr	r2, [pc, #120]	; (8000520 <TIMER2_Setup+0x84>)
 80004a6:	f043 0301 	orr.w	r3, r3, #1
 80004aa:	6413      	str	r3, [r2, #64]	; 0x40

	//            trigger mode            | TIM3 as TRGI
	TIM2->SMCR |= (6 << TIM_SMCR_SMS_Pos) | (2 << TIM_SMCR_TS_Pos);
 80004ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b6:	f043 0326 	orr.w	r3, r3, #38	; 0x26
 80004ba:	6093      	str	r3, [r2, #8]

	//           one pulse mode
	TIM2->CR1 |= TIM_CR1_OPM;
 80004bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6013      	str	r3, [r2, #0]

	TIM2->PSC = 1-1;
 80004cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d0:	2200      	movs	r2, #0
 80004d2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 20-1;
 80004d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d8:	2213      	movs	r2, #19
 80004da:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 10-1;
 80004dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e0:	2209      	movs	r2, #9
 80004e2:	635a      	str	r2, [r3, #52]	; 0x34

	//              PWM Mode 2               | preload
//	TIM2->CCMR1 |= (7 << TIM_CCMR1_OC1M_Pos) | TIM_CCMR1_OC1PE;

	//              Force high            | preload
	TIM2->CCMR1 |= (5 << TIM_CCMR1_OC1M_Pos) | TIM_CCMR1_OC1PE;
 80004e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ee:	f043 0358 	orr.w	r3, r3, #88	; 0x58
 80004f2:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= TIM_CCER_CC1E;
 80004f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f8:	6a1b      	ldr	r3, [r3, #32]
 80004fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	6213      	str	r3, [r2, #32]

	//           enable counter
	TIM2->CR1 |= TIM_CR1_CEN;
 8000504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40023800 	.word	0x40023800

08000524 <TIMER3_Setup>:

// Input capture on SPI clock for timing sync pulse
void TIMER3_Setup(void){
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	// Timer3 Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <TIMER3_Setup+0x5c>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a14      	ldr	r2, [pc, #80]	; (8000580 <TIMER3_Setup+0x5c>)
 800052e:	f043 0302 	orr.w	r3, r3, #2
 8000532:	6413      	str	r3, [r2, #64]	; 0x40

	//            external clock mode     | clock trigger = TI2FP2
	TIM3->SMCR |= (7 << TIM_SMCR_SMS_Pos) | (6 << TIM_SMCR_TS_Pos);
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <TIMER3_Setup+0x60>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	4a12      	ldr	r2, [pc, #72]	; (8000584 <TIMER3_Setup+0x60>)
 800053a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800053e:	6093      	str	r3, [r2, #8]

	//             TI2 on CH2
	TIM3->CCMR1 |= TIM_CCMR1_CC2S_0;
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <TIMER3_Setup+0x60>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <TIMER3_Setup+0x60>)
 8000546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054a:	6193      	str	r3, [r2, #24]

	//            falling edge trigger
	TIM3->CCER |= TIM_CCER_CC2P;
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <TIMER3_Setup+0x60>)
 800054e:	6a1b      	ldr	r3, [r3, #32]
 8000550:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <TIMER3_Setup+0x60>)
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	6213      	str	r3, [r2, #32]

	//            update as output trigger (TRGO)
	TIM3->CR2 |= (2 << TIM_CR2_MMS_Pos);
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <TIMER3_Setup+0x60>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	4a09      	ldr	r2, [pc, #36]	; (8000584 <TIMER3_Setup+0x60>)
 800055e:	f043 0320 	orr.w	r3, r3, #32
 8000562:	6053      	str	r3, [r2, #4]

	// 34 clock counts
	TIM3->ARR = 24-1;
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <TIMER3_Setup+0x60>)
 8000566:	2217      	movs	r2, #23
 8000568:	62da      	str	r2, [r3, #44]	; 0x2c

//	TIM3->DIER |= TIM_DIER_UIE;

	//           enable
	TIM3->CR1 |= TIM_CR1_CEN;
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <TIMER3_Setup+0x60>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a05      	ldr	r2, [pc, #20]	; (8000584 <TIMER3_Setup+0x60>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6013      	str	r3, [r2, #0]

	//TRGI = external clock, TRGO = Update;
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40023800 	.word	0x40023800
 8000584:	40000400 	.word	0x40000400

08000588 <SPI_Communicate>:
	DMA2_Stream3->NDTR = 3;
	//                 channel 3                 | mmry inc      | circular mode | mmry - prphrl  | enable
	DMA2_Stream3->CR = (3 << DMA_SxCR_CHSEL_Pos) | DMA_SxCR_MINC | DMA_SxCR_CIRC | DMA_SxCR_DIR_0 | DMA_SxCR_EN;
}

void SPI_Communicate(volatile unsigned char *TxBuffer, volatile unsigned char *RxBuffer, int length){
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]

	// wait for DMA to finish
	while((DMA2_Stream3->CR & DMA_SxCR_EN) || (DMA2_Stream0->CR & DMA_SxCR_EN));
 8000594:	bf00      	nop
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <SPI_Communicate+0x7c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1f9      	bne.n	8000596 <SPI_Communicate+0xe>
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <SPI_Communicate+0x80>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1f3      	bne.n	8000596 <SPI_Communicate+0xe>
	//             clear flags
	DMA2->LIFCR |= DMA_LIFCR_CTCIF3 | DMA_LIFCR_CHTIF3 | DMA_LIFCR_CFEIF3 | DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0 | DMA_LIFCR_CFEIF0;
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <SPI_Communicate+0x84>)
 80005b0:	689a      	ldr	r2, [r3, #8]
 80005b2:	4916      	ldr	r1, [pc, #88]	; (800060c <SPI_Communicate+0x84>)
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <SPI_Communicate+0x88>)
 80005b6:	4313      	orrs	r3, r2
 80005b8:	608b      	str	r3, [r1, #8]

	//Rx
	DMA2_Stream0->M0AR = (long)RxBuffer;
 80005ba:	4a13      	ldr	r2, [pc, #76]	; (8000608 <SPI_Communicate+0x80>)
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	60d3      	str	r3, [r2, #12]
	DMA2_Stream0->NDTR = length;
 80005c0:	4a11      	ldr	r2, [pc, #68]	; (8000608 <SPI_Communicate+0x80>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6053      	str	r3, [r2, #4]
	//                 enable
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <SPI_Communicate+0x80>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a0f      	ldr	r2, [pc, #60]	; (8000608 <SPI_Communicate+0x80>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6013      	str	r3, [r2, #0]

	// pull slave select low
	GPIOA->BSRR |= (GPIO_BSRR_BR4);
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <SPI_Communicate+0x8c>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <SPI_Communicate+0x8c>)
 80005d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005dc:	6193      	str	r3, [r2, #24]

	//Tx
	DMA2_Stream3->M0AR = (long)TxBuffer;
 80005de:	4a09      	ldr	r2, [pc, #36]	; (8000604 <SPI_Communicate+0x7c>)
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	60d3      	str	r3, [r2, #12]
	DMA2_Stream3->NDTR = length;
 80005e4:	4a07      	ldr	r2, [pc, #28]	; (8000604 <SPI_Communicate+0x7c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6053      	str	r3, [r2, #4]

	//                 enable
	DMA2_Stream3->CR |= DMA_SxCR_EN;
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <SPI_Communicate+0x7c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <SPI_Communicate+0x7c>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6013      	str	r3, [r2, #0]

}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40026458 	.word	0x40026458
 8000608:	40026410 	.word	0x40026410
 800060c:	40026400 	.word	0x40026400
 8000610:	0c400031 	.word	0x0c400031
 8000614:	40020000 	.word	0x40020000

08000618 <UART_Setup>:
 *      Author: nathan
 */

#include "UART.h"

void UART_Setup(void){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	// UART  Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <UART_Setup+0x44>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <UART_Setup+0x44>)
 8000622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40

	// Data length

	//set BAUD Rate
	//f_CK(APB1) / Baud = 54MHz / 115200
	USART3->BRR = 469;
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <UART_Setup+0x48>)
 800062a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800062e:	60da      	str	r2, [r3, #12]

	// enable UART
	USART3->CR1 |= USART_CR1_UE;
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <UART_Setup+0x48>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <UART_Setup+0x48>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6013      	str	r3, [r2, #0]

	//             DMA transmit   | DMA receive
	USART3->CR3 |= USART_CR3_DMAT;// | USART_CR3_DMAR;
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <UART_Setup+0x48>)
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <UART_Setup+0x48>)
 8000642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000646:	6093      	str	r3, [r2, #8]

	// enable transmission and receive
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <UART_Setup+0x48>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <UART_Setup+0x48>)
 800064e:	f043 030c 	orr.w	r3, r3, #12
 8000652:	6013      	str	r3, [r2, #0]

	UART_DMA_Setup();
 8000654:	f000 f806 	bl	8000664 <UART_DMA_Setup>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40004800 	.word	0x40004800

08000664 <UART_DMA_Setup>:

void UART_DMA_Setup(void){
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	// DMA Clock Enable
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMA2EN;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <UART_DMA_Setup+0x2c>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	4a08      	ldr	r2, [pc, #32]	; (8000690 <UART_DMA_Setup+0x2c>)
 800066e:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8000672:	6313      	str	r3, [r2, #48]	; 0x30

	// USART3-Tx - Stream 4 - Channel 7

	DMA1_Stream4->PAR = (long)&(USART3->TDR);
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <UART_DMA_Setup+0x30>)
 8000676:	4a08      	ldr	r2, [pc, #32]	; (8000698 <UART_DMA_Setup+0x34>)
 8000678:	609a      	str	r2, [r3, #8]
//	DMA1_Stream4->M0AR = (long)&(dataTx);
	DMA1_Stream4->NDTR = 0;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <UART_DMA_Setup+0x30>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
	//                 channel 7                 | mmry inc      | mmry - prphrl  | enable
	DMA1_Stream4->CR = (7 << DMA_SxCR_CHSEL_Pos) | DMA_SxCR_MINC | DMA_SxCR_DIR_0;// | DMA_SxCR_EN;
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <UART_DMA_Setup+0x30>)
 8000682:	4a06      	ldr	r2, [pc, #24]	; (800069c <UART_DMA_Setup+0x38>)
 8000684:	601a      	str	r2, [r3, #0]


}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40023800 	.word	0x40023800
 8000694:	40026070 	.word	0x40026070
 8000698:	40004828 	.word	0x40004828
 800069c:	0e000440 	.word	0x0e000440

080006a0 <UART_Transmit>:


void UART_Transmit(unsigned char * TxBuffer, unsigned int length){
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	// wait for DAM to finish
	while(DMA1_Stream4->CR & DMA_SxCR_EN);
 80006aa:	bf00      	nop
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <UART_Transmit+0x48>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1f9      	bne.n	80006ac <UART_Transmit+0xc>
	//             clear flags
	DMA1->HIFCR |= DMA_HIFCR_CTCIF4 | DMA_HIFCR_CHTIF4;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <UART_Transmit+0x4c>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <UART_Transmit+0x4c>)
 80006be:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80006c2:	60d3      	str	r3, [r2, #12]

	DMA1_Stream4->M0AR = (long)&(TxBuffer[0]); // memory address
 80006c4:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <UART_Transmit+0x48>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60d3      	str	r3, [r2, #12]
	DMA1_Stream4->NDTR = length;
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <UART_Transmit+0x48>)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	6053      	str	r3, [r2, #4]

	//                    Enable DMA
	DMA1_Stream4->CR |= DMA_SxCR_EN;
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <UART_Transmit+0x48>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <UART_Transmit+0x48>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	40026070 	.word	0x40026070
 80006ec:	40026000 	.word	0x40026000

080006f0 <UART_Buffer_Is_Free>:


// check if the DMA is currently transferring from the UART buffer
char UART_Buffer_Is_Free(void){
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	if(DMA1_Stream4->CR & DMA_SxCR_EN){
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <UART_Buffer_Is_Free+0x20>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <UART_Buffer_Is_Free+0x14>
		return 0;
 8000700:	2300      	movs	r3, #0
 8000702:	e000      	b.n	8000706 <UART_Buffer_Is_Free+0x16>
	}
	return 1;
 8000704:	2301      	movs	r3, #1
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	40026070 	.word	0x40026070

08000714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	2b00      	cmp	r3, #0
 8000724:	db0b      	blt.n	800073e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f003 021f 	and.w	r2, r3, #31
 800072c:	4907      	ldr	r1, [pc, #28]	; (800074c <__NVIC_EnableIRQ+0x38>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	095b      	lsrs	r3, r3, #5
 8000734:	2001      	movs	r0, #1
 8000736:	fa00 f202 	lsl.w	r2, r0, r2
 800073a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000e100 	.word	0xe000e100

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007aa:	f001 fc1a 	bl	8001fe2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ae:	f000 f927 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 f995 	bl	8000ae0 <MX_GPIO_Init>
//  MX_ETH_Init();
//  MX_USART3_UART_Init();
//  MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */
  GPIO_Setup();
 80007b6:	f001 f91d 	bl	80019f4 <GPIO_Setup>
  TIMER4_Setup();
 80007ba:	f001 f991 	bl	8001ae0 <TIMER4_Setup>
  TIMER5_Setup();
 80007be:	f001 f9cb 	bl	8001b58 <TIMER5_Setup>
  TIMER12_Setup();
 80007c2:	f001 fa1d 	bl	8001c00 <TIMER12_Setup>
  SPI_Setup();
 80007c6:	f7ff fe0d 	bl	80003e4 <SPI_Setup>
  UART_Setup();
 80007ca:	f7ff ff25 	bl	8000618 <UART_Setup>
  RNG_Setup();
 80007ce:	f001 fa3b 	bl	8001c48 <RNG_Setup>
  ADC_Setup((long)control, (long)control2);
 80007d2:	4b7b      	ldr	r3, [pc, #492]	; (80009c0 <main+0x21c>)
 80007d4:	4a7b      	ldr	r2, [pc, #492]	; (80009c4 <main+0x220>)
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 fa4d 	bl	8001c78 <ADC_Setup>
//  EXTI_Setup();
  TIMER6_Setup();
 80007de:	f001 f9df 	bl	8001ba0 <TIMER6_Setup>

  sprintf((char*)buffer, "Start\r\n");
 80007e2:	4979      	ldr	r1, [pc, #484]	; (80009c8 <main+0x224>)
 80007e4:	4879      	ldr	r0, [pc, #484]	; (80009cc <main+0x228>)
 80007e6:	f004 f9f9 	bl	8004bdc <siprintf>
  UART_Transmit(buffer, 7);
 80007ea:	2107      	movs	r1, #7
 80007ec:	4877      	ldr	r0, [pc, #476]	; (80009cc <main+0x228>)
 80007ee:	f7ff ff57 	bl	80006a0 <UART_Transmit>

  while(!UART_Buffer_Is_Free());
 80007f2:	bf00      	nop
 80007f4:	f7ff ff7c 	bl	80006f0 <UART_Buffer_Is_Free>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0fa      	beq.n	80007f4 <main+0x50>

  Configure_MCP3561R(buffer, 1);
 80007fe:	2101      	movs	r1, #1
 8000800:	4872      	ldr	r0, [pc, #456]	; (80009cc <main+0x228>)
 8000802:	f001 f88b 	bl	800191c <Configure_MCP3561R>

  // read from adc

  dataTx[0] = 0x41; //01 0000 01 - command byte: static read at adcdata
 8000806:	4b72      	ldr	r3, [pc, #456]	; (80009d0 <main+0x22c>)
 8000808:	2241      	movs	r2, #65	; 0x41
 800080a:	701a      	strb	r2, [r3, #0]

  SPI_Communicate(dataTx, dataRx, 4);
 800080c:	2204      	movs	r2, #4
 800080e:	4971      	ldr	r1, [pc, #452]	; (80009d4 <main+0x230>)
 8000810:	486f      	ldr	r0, [pc, #444]	; (80009d0 <main+0x22c>)
 8000812:	f7ff feb9 	bl	8000588 <SPI_Communicate>

  HAL_Delay(100);
 8000816:	2064      	movs	r0, #100	; 0x64
 8000818:	f001 fc40 	bl	800209c <HAL_Delay>

  while(!UART_Buffer_Is_Free());
 800081c:	bf00      	nop
 800081e:	f7ff ff67 	bl	80006f0 <UART_Buffer_Is_Free>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0fa      	beq.n	800081e <main+0x7a>

  sprintf((char*)buffer, "%2x %2x %2x %2x\r\n", dataRx[0], dataRx[1], dataRx[2], dataRx[3]);
 8000828:	4b6a      	ldr	r3, [pc, #424]	; (80009d4 <main+0x230>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4619      	mov	r1, r3
 8000830:	4b68      	ldr	r3, [pc, #416]	; (80009d4 <main+0x230>)
 8000832:	785b      	ldrb	r3, [r3, #1]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	4b66      	ldr	r3, [pc, #408]	; (80009d4 <main+0x230>)
 800083a:	789b      	ldrb	r3, [r3, #2]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	4b64      	ldr	r3, [pc, #400]	; (80009d4 <main+0x230>)
 8000842:	78db      	ldrb	r3, [r3, #3]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	9200      	str	r2, [sp, #0]
 800084a:	4603      	mov	r3, r0
 800084c:	460a      	mov	r2, r1
 800084e:	4962      	ldr	r1, [pc, #392]	; (80009d8 <main+0x234>)
 8000850:	485e      	ldr	r0, [pc, #376]	; (80009cc <main+0x228>)
 8000852:	f004 f9c3 	bl	8004bdc <siprintf>
  UART_Transmit(buffer, 13);
 8000856:	210d      	movs	r1, #13
 8000858:	485c      	ldr	r0, [pc, #368]	; (80009cc <main+0x228>)
 800085a:	f7ff ff21 	bl	80006a0 <UART_Transmit>

  // resync sync pulses (may get out of sync with ADC communication)
//  TIM3->CNT = 0;
  dataTx[0] = 0;
 800085e:	4b5c      	ldr	r3, [pc, #368]	; (80009d0 <main+0x22c>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
  //enable sync pulse output pulse
  TIM2->CCMR1 |= (7 << TIM_CCMR1_OC1M_Pos);
 8000864:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000872:	6193      	str	r3, [r2, #24]

  TIM6->CNT=0;
 8000874:	4b59      	ldr	r3, [pc, #356]	; (80009dc <main+0x238>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  NVIC_SetPriority(TIM6_DAC_IRQn, 0);
 800087a:	2100      	movs	r1, #0
 800087c:	2036      	movs	r0, #54	; 0x36
 800087e:	f7ff ff67 	bl	8000750 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000882:	2036      	movs	r0, #54	; 0x36
 8000884:	f7ff ff46 	bl	8000714 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000888:	2038      	movs	r0, #56	; 0x38
 800088a:	f7ff ff43 	bl	8000714 <__NVIC_EnableIRQ>

//  unsigned int Ucounter;

  effectNumber = 0;
 800088e:	4b54      	ldr	r3, [pc, #336]	; (80009e0 <main+0x23c>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]

  arm_rfft_fast_instance_f32 S;
  arm_rfft_fast_init_f32(&S, FFT_SAMPLES);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089a:	4618      	mov	r0, r3
 800089c:	f002 fbce 	bl	800303c <arm_rfft_fast_init_f32>

  for (int i = 0; i < FFT_SAMPLES; i++){
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
 80008a4:	e025      	b.n	80008f2 <main+0x14e>
	  FFTWindow[i] = 0.5f *(1 -  arm_cos_f32((float)i * 2.0f * PI / (float)(FFT_SAMPLES - 1))); // Hann window function
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008b4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80009e4 <main+0x240>
 80008b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008bc:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80009e8 <main+0x244>
 80008c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008c4:	eeb0 0a47 	vmov.f32	s0, s14
 80008c8:	f003 f9fc 	bl	8003cc4 <arm_cos_f32>
 80008cc:	eef0 7a40 	vmov.f32	s15, s0
 80008d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80008d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80008dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008e0:	4a42      	ldr	r2, [pc, #264]	; (80009ec <main+0x248>)
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < FFT_SAMPLES; i++){
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	3301      	adds	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008f8:	dbd5      	blt.n	80008a6 <main+0x102>
  }

  // find average value
  averageValue = dataIn;
 80008fa:	4b3d      	ldr	r3, [pc, #244]	; (80009f0 <main+0x24c>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <main+0x250>)
 8000902:	801a      	strh	r2, [r3, #0]

  sprintf((char*)buffer, "%5i\r\n", averageValue);
 8000904:	4b3b      	ldr	r3, [pc, #236]	; (80009f4 <main+0x250>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	493b      	ldr	r1, [pc, #236]	; (80009f8 <main+0x254>)
 800090c:	482f      	ldr	r0, [pc, #188]	; (80009cc <main+0x228>)
 800090e:	f004 f965 	bl	8004bdc <siprintf>
  UART_Transmit(buffer, 7);
 8000912:	2107      	movs	r1, #7
 8000914:	482d      	ldr	r0, [pc, #180]	; (80009cc <main+0x228>)
 8000916:	f7ff fec3 	bl	80006a0 <UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
//	  if (TIM6->SR & TIM_SR_UIF){
	  if (dataReadyFlag){
 800091a:	4b38      	ldr	r3, [pc, #224]	; (80009fc <main+0x258>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d0fa      	beq.n	800091a <main+0x176>

		  // clear flag
		  dataReadyFlag = 0;
 8000924:	4b35      	ldr	r3, [pc, #212]	; (80009fc <main+0x258>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]

		  effectNumber = 11;//((GPIOC->IDR >> 8) & 0x7) + 1;
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <main+0x23c>)
 800092c:	220b      	movs	r2, #11
 800092e:	601a      	str	r2, [r3, #0]

		  // Effects Here

		  switch(effectNumber){
 8000930:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <main+0x23c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b0b      	cmp	r3, #11
 8000936:	d8f0      	bhi.n	800091a <main+0x176>
 8000938:	a201      	add	r2, pc, #4	; (adr r2, 8000940 <main+0x19c>)
 800093a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093e:	bf00      	nop
 8000940:	08000971 	.word	0x08000971
 8000944:	08000977 	.word	0x08000977
 8000948:	0800097d 	.word	0x0800097d
 800094c:	08000983 	.word	0x08000983
 8000950:	08000989 	.word	0x08000989
 8000954:	0800098f 	.word	0x0800098f
 8000958:	08000995 	.word	0x08000995
 800095c:	0800099b 	.word	0x0800099b
 8000960:	080009a1 	.word	0x080009a1
 8000964:	080009a7 	.word	0x080009a7
 8000968:	080009ad 	.word	0x080009ad
 800096c:	080009b3 	.word	0x080009b3
		  	  case 0:
		  		  Clean();
 8000970:	f000 f958 	bl	8000c24 <Clean>
		  		  break;
 8000974:	e023      	b.n	80009be <main+0x21a>
		  	  case 1:
		  		  Delay();
 8000976:	f000 f965 	bl	8000c44 <Delay>
		  		  break;
 800097a:	e020      	b.n	80009be <main+0x21a>
		  	  case 2:
		  		  Flange();
 800097c:	f000 f994 	bl	8000ca8 <Flange>
				  break;
 8000980:	e01d      	b.n	80009be <main+0x21a>
		  	  case 3:
				  Phaser();
 8000982:	f000 fa2b 	bl	8000ddc <Phaser>
				  break;
 8000986:	e01a      	b.n	80009be <main+0x21a>
			  case 4:
				  Reverb();
 8000988:	f000 fabc 	bl	8000f04 <Reverb>
				  break;
 800098c:	e017      	b.n	80009be <main+0x21a>
			  case 5:
				  Reverse_Delay();
 800098e:	f000 fb75 	bl	800107c <Reverse_Delay>
				  break;
 8000992:	e014      	b.n	80009be <main+0x21a>
			  case 6:
				  Bit_Reduction();
 8000994:	f000 fbac 	bl	80010f0 <Bit_Reduction>
				  break;
 8000998:	e011      	b.n	80009be <main+0x21a>
			  case 7:
				  Clouds_Delay();
 800099a:	f000 fc27 	bl	80011ec <Clouds_Delay>
				  break;
 800099e:	e00e      	b.n	80009be <main+0x21a>
			  case 8:
				  Looper();
 80009a0:	f000 fccc 	bl	800133c <Looper>
				  break;
 80009a4:	e00b      	b.n	80009be <main+0x21a>
			  case 9:
				  Sin_Delay();
 80009a6:	f000 fb17 	bl	8000fd8 <Sin_Delay>
				  break;
 80009aa:	e008      	b.n	80009be <main+0x21a>
			  case 10:
				  Random_Sample_Delay();
 80009ac:	f000 fbc2 	bl	8001134 <Random_Sample_Delay>
				  break;
 80009b0:	e005      	b.n	80009be <main+0x21a>
			  case 11:
				  FFT_Test(&S);
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fd37 	bl	8001428 <FFT_Test>
				  break;
 80009ba:	bf00      	nop
 80009bc:	e7ad      	b.n	800091a <main+0x176>
	  if (dataReadyFlag){
 80009be:	e7ac      	b.n	800091a <main+0x176>
 80009c0:	20034380 	.word	0x20034380
 80009c4:	20034384 	.word	0x20034384
 80009c8:	08007720 	.word	0x08007720
 80009cc:	200343a0 	.word	0x200343a0
 80009d0:	20000610 	.word	0x20000610
 80009d4:	20000618 	.word	0x20000618
 80009d8:	08007728 	.word	0x08007728
 80009dc:	40001000 	.word	0x40001000
 80009e0:	2003437c 	.word	0x2003437c
 80009e4:	40490fdb 	.word	0x40490fdb
 80009e8:	447fc000 	.word	0x447fc000
 80009ec:	20033368 	.word	0x20033368
 80009f0:	2000060c 	.word	0x2000060c
 80009f4:	2003438c 	.word	0x2003438c
 80009f8:	0800773c 	.word	0x0800773c
 80009fc:	20031364 	.word	0x20031364

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	; 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2234      	movs	r2, #52	; 0x34
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f003 fca2 	bl	8004358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a24:	f001 fe0a 	bl	800263c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <SystemClock_Config+0xd8>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a2a      	ldr	r2, [pc, #168]	; (8000ad8 <SystemClock_Config+0xd8>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <SystemClock_Config+0xd8>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <SystemClock_Config+0xdc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a25      	ldr	r2, [pc, #148]	; (8000adc <SystemClock_Config+0xdc>)
 8000a46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <SystemClock_Config+0xdc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a60:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a62:	2302      	movs	r3, #2
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a70:	23d8      	movs	r3, #216	; 0xd8
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a78:	2309      	movs	r3, #9
 8000a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 fe39 	bl	80026fc <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a90:	f000 ffaa 	bl	80019e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a94:	f001 fde2 	bl	800265c <HAL_PWREx_EnableOverDrive>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a9e:	f000 ffa3 	bl	80019e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ab2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	2107      	movs	r1, #7
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f002 f8c9 	bl	8002c58 <HAL_RCC_ClockConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000acc:	f000 ff8c 	bl	80019e8 <Error_Handler>
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	3750      	adds	r7, #80	; 0x50
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40007000 	.word	0x40007000

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b47      	ldr	r3, [pc, #284]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a46      	ldr	r2, [pc, #280]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b44      	ldr	r3, [pc, #272]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0e:	4b41      	ldr	r3, [pc, #260]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a40      	ldr	r2, [pc, #256]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b3e      	ldr	r3, [pc, #248]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b3b      	ldr	r3, [pc, #236]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a3a      	ldr	r2, [pc, #232]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b38      	ldr	r3, [pc, #224]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	4b35      	ldr	r3, [pc, #212]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a34      	ldr	r2, [pc, #208]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b32      	ldr	r3, [pc, #200]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b56:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a2e      	ldr	r2, [pc, #184]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6e:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a28      	ldr	r2, [pc, #160]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <MX_GPIO_Init+0x134>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b8c:	4822      	ldr	r0, [pc, #136]	; (8000c18 <MX_GPIO_Init+0x138>)
 8000b8e:	f001 fd3b 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	4821      	ldr	r0, [pc, #132]	; (8000c1c <MX_GPIO_Init+0x13c>)
 8000b98:	f001 fd36 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481b      	ldr	r0, [pc, #108]	; (8000c20 <MX_GPIO_Init+0x140>)
 8000bb4:	f001 fb7c 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bb8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_GPIO_Init+0x138>)
 8000bd2:	f001 fb6d 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bd6:	2340      	movs	r3, #64	; 0x40
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	480b      	ldr	r0, [pc, #44]	; (8000c1c <MX_GPIO_Init+0x13c>)
 8000bee:	f001 fb5f 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_GPIO_Init+0x13c>)
 8000c06:	f001 fb53 	bl	80022b0 <HAL_GPIO_Init>

}
 8000c0a:	bf00      	nop
 8000c0c:	3730      	adds	r7, #48	; 0x30
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020400 	.word	0x40020400
 8000c1c:	40021800 	.word	0x40021800
 8000c20:	40020800 	.word	0x40020800

08000c24 <Clean>:

/* USER CODE BEGIN 4 */

void Clean(void){
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
	dataOut = dataIn;// + 0x7FFF;
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <Clean+0x18>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <Clean+0x1c>)
 8000c30:	801a      	strh	r2, [r3, #0]
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	2000060c 	.word	0x2000060c
 8000c40:	2000060e 	.word	0x2000060e

08000c44 <Delay>:

void Delay(void){
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	dataOut = sampleBuffer[sampleBufferIndex];
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <Delay+0x50>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <Delay+0x54>)
 8000c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <Delay+0x58>)
 8000c56:	801a      	strh	r2, [r3, #0]

	sampleBuffer[sampleBufferIndex] = dataIn;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <Delay+0x50>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <Delay+0x5c>)
 8000c5e:	8812      	ldrh	r2, [r2, #0]
 8000c60:	b291      	uxth	r1, r2
 8000c62:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <Delay+0x54>)
 8000c64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	sampleBufferIndex++;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <Delay+0x50>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <Delay+0x50>)
 8000c70:	6013      	str	r3, [r2, #0]
	if (sampleBufferIndex >= (control[0] >> 2)){
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <Delay+0x60>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <Delay+0x50>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d802      	bhi.n	8000c8a <Delay+0x46>
	  sampleBufferIndex = 0;
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <Delay+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	20031360 	.word	0x20031360
 8000c98:	20000620 	.word	0x20000620
 8000c9c:	2000060e 	.word	0x2000060e
 8000ca0:	2000060c 	.word	0x2000060c
 8000ca4:	20034380 	.word	0x20034380

08000ca8 <Flange>:

void Flange(void){
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
	dataOut = sampleBuffer[(sampleBufferIndex + (lookUp[TIM12->CNT]>>9)) % 1000];
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <Flange+0x68>)
 8000cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb0:	4a18      	ldr	r2, [pc, #96]	; (8000d14 <Flange+0x6c>)
 8000cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb6:	0a5a      	lsrs	r2, r3, #9
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <Flange+0x70>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	441a      	add	r2, r3
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <Flange+0x74>)
 8000cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8000cc4:	099b      	lsrs	r3, r3, #6
 8000cc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cca:	fb01 f303 	mul.w	r3, r1, r3
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <Flange+0x78>)
 8000cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <Flange+0x7c>)
 8000cda:	801a      	strh	r2, [r3, #0]

	sampleBuffer[sampleBufferIndex] = dataIn;
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <Flange+0x70>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <Flange+0x80>)
 8000ce2:	8812      	ldrh	r2, [r2, #0]
 8000ce4:	b291      	uxth	r1, r2
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <Flange+0x78>)
 8000ce8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	sampleBufferIndex++;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <Flange+0x70>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <Flange+0x70>)
 8000cf4:	6013      	str	r3, [r2, #0]
	if (sampleBufferIndex >= 1000){
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <Flange+0x70>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cfe:	d302      	bcc.n	8000d06 <Flange+0x5e>
	  sampleBufferIndex = 0;
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <Flange+0x70>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
	}
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	40001800 	.word	0x40001800
 8000d14:	20000014 	.word	0x20000014
 8000d18:	20031360 	.word	0x20031360
 8000d1c:	10624dd3 	.word	0x10624dd3
 8000d20:	20000620 	.word	0x20000620
 8000d24:	2000060e 	.word	0x2000060e
 8000d28:	2000060c 	.word	0x2000060c

08000d2c <Phaser_Stage>:

void Phaser_Stage(int stageNumber, int a){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	int inputOffset = (stageNumber - 1) * 2;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
	int outputOffset = stageNumber * 2;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]

	sampleBuffer[sampleBufferIndex + outputOffset] = (a * (sampleBuffer[!sampleBufferIndex + outputOffset] - sampleBuffer[sampleBufferIndex + inputOffset]) + \
 8000d44:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <Phaser_Stage+0xa8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf0c      	ite	eq
 8000d4c:	2301      	moveq	r3, #1
 8000d4e:	2300      	movne	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <Phaser_Stage+0xac>)
 8000d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	4619      	mov	r1, r3
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <Phaser_Stage+0xa8>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <Phaser_Stage+0xac>)
 8000d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	fb03 f202 	mul.w	r2, r3, r2
		  (sampleBuffer[!sampleBufferIndex + inputOffset] << 8)) >> 8;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <Phaser_Stage+0xa8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bf0c      	ite	eq
 8000d82:	2301      	moveq	r3, #1
 8000d84:	2300      	movne	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	4619      	mov	r1, r3
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	440b      	add	r3, r1
 8000d8e:	4912      	ldr	r1, [pc, #72]	; (8000dd8 <Phaser_Stage+0xac>)
 8000d90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	021b      	lsls	r3, r3, #8
	sampleBuffer[sampleBufferIndex + outputOffset] = (a * (sampleBuffer[!sampleBufferIndex + outputOffset] - sampleBuffer[sampleBufferIndex + inputOffset]) + \
 8000d98:	4413      	add	r3, r2
		  (sampleBuffer[!sampleBufferIndex + inputOffset] << 8)) >> 8;
 8000d9a:	1219      	asrs	r1, r3, #8
	sampleBuffer[sampleBufferIndex + outputOffset] = (a * (sampleBuffer[!sampleBufferIndex + outputOffset] - sampleBuffer[sampleBufferIndex + inputOffset]) + \
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <Phaser_Stage+0xa8>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4413      	add	r3, r2
 8000da4:	b289      	uxth	r1, r1
 8000da6:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <Phaser_Stage+0xac>)
 8000da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	// constrain magintude
	if (sampleBuffer[sampleBufferIndex + outputOffset] > 0xFFFF){
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <Phaser_Stage+0xa8>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <Phaser_Stage+0xac>)
 8000db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
	  sampleBuffer[sampleBufferIndex + outputOffset] = 0xFFFF;
	}
	else if (sampleBuffer[sampleBufferIndex + outputOffset] < 0){
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <Phaser_Stage+0xa8>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <Phaser_Stage+0xac>)
 8000dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
	  sampleBuffer[sampleBufferIndex + outputOffset] = 0;
	}
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	20031360 	.word	0x20031360
 8000dd8:	20000620 	.word	0x20000620

08000ddc <Phaser>:

void Phaser(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	  sampleBuffer[sampleBufferIndex] = dataIn;
 8000de0:	4b39      	ldr	r3, [pc, #228]	; (8000ec8 <Phaser+0xec>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a39      	ldr	r2, [pc, #228]	; (8000ecc <Phaser+0xf0>)
 8000de6:	8812      	ldrh	r2, [r2, #0]
 8000de8:	b291      	uxth	r1, r2
 8000dea:	4a39      	ldr	r2, [pc, #228]	; (8000ed0 <Phaser+0xf4>)
 8000dec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	  a = a0 + (lookUp[TIM12->CNT] >> 10);
 8000df0:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <Phaser+0xf8>)
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	4a38      	ldr	r2, [pc, #224]	; (8000ed8 <Phaser+0xfc>)
 8000df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfa:	0a9b      	lsrs	r3, r3, #10
 8000dfc:	4a37      	ldr	r2, [pc, #220]	; (8000edc <Phaser+0x100>)
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <Phaser+0x104>)
 8000e06:	601a      	str	r2, [r3, #0]
	  b = b0 + (lookUp[TIM12->CNT] >> 10);
 8000e08:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <Phaser+0xf8>)
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	4a32      	ldr	r2, [pc, #200]	; (8000ed8 <Phaser+0xfc>)
 8000e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e12:	0a9b      	lsrs	r3, r3, #10
 8000e14:	4a33      	ldr	r2, [pc, #204]	; (8000ee4 <Phaser+0x108>)
 8000e16:	6812      	ldr	r2, [r2, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <Phaser+0x10c>)
 8000e1e:	601a      	str	r2, [r3, #0]
	  c = c0 + (lookUp[TIM12->CNT] >> 10);
 8000e20:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <Phaser+0xf8>)
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	4a2c      	ldr	r2, [pc, #176]	; (8000ed8 <Phaser+0xfc>)
 8000e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2a:	0a9b      	lsrs	r3, r3, #10
 8000e2c:	4a2f      	ldr	r2, [pc, #188]	; (8000eec <Phaser+0x110>)
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	4413      	add	r3, r2
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <Phaser+0x114>)
 8000e36:	601a      	str	r2, [r3, #0]
	  d = d0 + (lookUp[TIM12->CNT] >> 10);
 8000e38:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <Phaser+0xf8>)
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	4a26      	ldr	r2, [pc, #152]	; (8000ed8 <Phaser+0xfc>)
 8000e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e42:	0a9b      	lsrs	r3, r3, #10
 8000e44:	4a2b      	ldr	r2, [pc, #172]	; (8000ef4 <Phaser+0x118>)
 8000e46:	6812      	ldr	r2, [r2, #0]
 8000e48:	4413      	add	r3, r2
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <Phaser+0x11c>)
 8000e4e:	601a      	str	r2, [r3, #0]

	  Phaser_Stage(1, a);
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <Phaser+0x104>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff ff68 	bl	8000d2c <Phaser_Stage>
	  Phaser_Stage(2, b);
 8000e5c:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <Phaser+0x10c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	2002      	movs	r0, #2
 8000e64:	f7ff ff62 	bl	8000d2c <Phaser_Stage>
	  Phaser_Stage(3, c);
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <Phaser+0x114>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f7ff ff5c 	bl	8000d2c <Phaser_Stage>
	  Phaser_Stage(4, d);
 8000e74:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <Phaser+0x11c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	2004      	movs	r0, #4
 8000e7c:	f7ff ff56 	bl	8000d2c <Phaser_Stage>

	  dataOut = sampleBuffer[sampleBufferIndex+8];
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <Phaser+0xec>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3308      	adds	r3, #8
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <Phaser+0xf4>)
 8000e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <Phaser+0x120>)
 8000e90:	801a      	strh	r2, [r3, #0]

	  TIM12->PSC = (control[0] >> 3) > 500 ? (control[0] >> 3) : 500;
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <Phaser+0x124>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	08db      	lsrs	r3, r3, #3
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e9e:	bf38      	it	cc
 8000ea0:	f44f 73fa 	movcc.w	r3, #500	; 0x1f4
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <Phaser+0xf8>)
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28

	  sampleBufferIndex++;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <Phaser+0xec>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <Phaser+0xec>)
 8000eb2:	6013      	str	r3, [r2, #0]
	  if (sampleBufferIndex >= 2){
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <Phaser+0xec>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d902      	bls.n	8000ec2 <Phaser+0xe6>
		  sampleBufferIndex = 0;
 8000ebc:	4b02      	ldr	r3, [pc, #8]	; (8000ec8 <Phaser+0xec>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
	  }
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20031360 	.word	0x20031360
 8000ecc:	2000060c 	.word	0x2000060c
 8000ed0:	20000620 	.word	0x20000620
 8000ed4:	40001800 	.word	0x40001800
 8000ed8:	20000014 	.word	0x20000014
 8000edc:	20000004 	.word	0x20000004
 8000ee0:	20034390 	.word	0x20034390
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20034394 	.word	0x20034394
 8000eec:	2000000c 	.word	0x2000000c
 8000ef0:	20034398 	.word	0x20034398
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	2003439c 	.word	0x2003439c
 8000efc:	2000060e 	.word	0x2000060e
 8000f00:	20034380 	.word	0x20034380

08000f04 <Reverb>:

void Reverb(void){
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
	dataOut = ((sampleBuffer[sampleBufferIndex] + \
 8000f08:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <Reverb+0xc0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a2e      	ldr	r2, [pc, #184]	; (8000fc8 <Reverb+0xc4>)
 8000f0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	4618      	mov	r0, r3
		  sampleBuffer[(sampleBufferIndex + 2000) % 10000] + \
 8000f16:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <Reverb+0xc0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <Reverb+0xc8>)
 8000f20:	fba3 1302 	umull	r1, r3, r3, r2
 8000f24:	0b5b      	lsrs	r3, r3, #13
 8000f26:	f242 7110 	movw	r1, #10000	; 0x2710
 8000f2a:	fb01 f303 	mul.w	r3, r1, r3
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	4a25      	ldr	r2, [pc, #148]	; (8000fc8 <Reverb+0xc4>)
 8000f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f36:	b29b      	uxth	r3, r3
	dataOut = ((sampleBuffer[sampleBufferIndex] + \
 8000f38:	18c1      	adds	r1, r0, r3
		  sampleBuffer[(sampleBufferIndex + 4000) % 10000] + \
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <Reverb+0xc0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 8000f42:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <Reverb+0xc8>)
 8000f44:	fba3 0302 	umull	r0, r3, r3, r2
 8000f48:	0b5b      	lsrs	r3, r3, #13
 8000f4a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f4e:	fb00 f303 	mul.w	r3, r0, r3
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <Reverb+0xc4>)
 8000f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f5a:	b29b      	uxth	r3, r3
		  sampleBuffer[(sampleBufferIndex + 2000) % 10000] + \
 8000f5c:	4419      	add	r1, r3
		  sampleBuffer[(sampleBufferIndex + 7500) % 10000]) >> 2);
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <Reverb+0xc0>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8000f66:	4413      	add	r3, r2
 8000f68:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <Reverb+0xc8>)
 8000f6a:	fba2 0203 	umull	r0, r2, r2, r3
 8000f6e:	0b52      	lsrs	r2, r2, #13
 8000f70:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f74:	fb00 f202 	mul.w	r2, r0, r2
 8000f78:	1a9a      	subs	r2, r3, r2
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <Reverb+0xc4>)
 8000f7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f80:	b29b      	uxth	r3, r3
		  sampleBuffer[(sampleBufferIndex + 4000) % 10000] + \
 8000f82:	440b      	add	r3, r1
		  sampleBuffer[(sampleBufferIndex + 7500) % 10000]) >> 2);
 8000f84:	109b      	asrs	r3, r3, #2
	dataOut = ((sampleBuffer[sampleBufferIndex] + \
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <Reverb+0xcc>)
 8000f8a:	801a      	strh	r2, [r3, #0]

	sampleBuffer[sampleBufferIndex] = dataIn;
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <Reverb+0xc0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <Reverb+0xd0>)
 8000f92:	8812      	ldrh	r2, [r2, #0]
 8000f94:	b291      	uxth	r1, r2
 8000f96:	4a0c      	ldr	r2, [pc, #48]	; (8000fc8 <Reverb+0xc4>)
 8000f98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	sampleBufferIndex++;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <Reverb+0xc0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <Reverb+0xc0>)
 8000fa4:	6013      	str	r3, [r2, #0]
	if (sampleBufferIndex >= 10000){
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <Reverb+0xc0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d902      	bls.n	8000fb8 <Reverb+0xb4>
	  sampleBufferIndex = 0;
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <Reverb+0xc0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	}
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20031360 	.word	0x20031360
 8000fc8:	20000620 	.word	0x20000620
 8000fcc:	d1b71759 	.word	0xd1b71759
 8000fd0:	2000060e 	.word	0x2000060e
 8000fd4:	2000060c 	.word	0x2000060c

08000fd8 <Sin_Delay>:

void Sin_Delay(void){
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	dataOut = sampleBuffer[(sampleBufferIndex + (lookUp[TIM12->CNT]>>6)) % 10000];
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <Sin_Delay+0x84>)
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	4a1f      	ldr	r2, [pc, #124]	; (8001060 <Sin_Delay+0x88>)
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	099a      	lsrs	r2, r3, #6
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <Sin_Delay+0x8c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	441a      	add	r2, r3
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <Sin_Delay+0x90>)
 8000ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ff4:	0b5b      	lsrs	r3, r3, #13
 8000ff6:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ffa:	fb01 f303 	mul.w	r3, r1, r3
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	4a1a      	ldr	r2, [pc, #104]	; (800106c <Sin_Delay+0x94>)
 8001002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <Sin_Delay+0x98>)
 800100a:	801a      	strh	r2, [r3, #0]
//	dataOut = sampleBuffer[(sampleBufferIndex + (lookUp[TIM12->CNT]>>6)) % control[0]];

	sampleBuffer[sampleBufferIndex] = dataIn;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <Sin_Delay+0x8c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a18      	ldr	r2, [pc, #96]	; (8001074 <Sin_Delay+0x9c>)
 8001012:	8812      	ldrh	r2, [r2, #0]
 8001014:	b291      	uxth	r1, r2
 8001016:	4a15      	ldr	r2, [pc, #84]	; (800106c <Sin_Delay+0x94>)
 8001018:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	TIM12->PSC = (control[0] >> 2) > 1000 ? (control[0] >> 2) : 1000;
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <Sin_Delay+0xa0>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	b29b      	uxth	r3, r3
 8001024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001028:	bf38      	it	cc
 800102a:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <Sin_Delay+0x84>)
 8001032:	629a      	str	r2, [r3, #40]	; 0x28

	sampleBufferIndex++;
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <Sin_Delay+0x8c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <Sin_Delay+0x8c>)
 800103c:	6013      	str	r3, [r2, #0]
	if (sampleBufferIndex >= 10000){
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <Sin_Delay+0x8c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f242 720f 	movw	r2, #9999	; 0x270f
 8001046:	4293      	cmp	r3, r2
 8001048:	d902      	bls.n	8001050 <Sin_Delay+0x78>
//	if (sampleBufferIndex >= control[0]){
	  sampleBufferIndex = 0;
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <Sin_Delay+0x8c>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	}
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40001800 	.word	0x40001800
 8001060:	20000014 	.word	0x20000014
 8001064:	20031360 	.word	0x20031360
 8001068:	d1b71759 	.word	0xd1b71759
 800106c:	20000620 	.word	0x20000620
 8001070:	2000060e 	.word	0x2000060e
 8001074:	2000060c 	.word	0x2000060c
 8001078:	20034380 	.word	0x20034380

0800107c <Reverse_Delay>:

void Reverse_Delay(void){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	dataOut = sampleBuffer[controlShadow[0] - sampleBufferIndex];
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <Reverse_Delay+0x5c>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <Reverse_Delay+0x60>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <Reverse_Delay+0x64>)
 800108e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001092:	b29a      	uxth	r2, r3
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <Reverse_Delay+0x68>)
 8001096:	801a      	strh	r2, [r3, #0]

	sampleBuffer[sampleBufferIndex] = dataIn;
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <Reverse_Delay+0x60>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <Reverse_Delay+0x6c>)
 800109e:	8812      	ldrh	r2, [r2, #0]
 80010a0:	b291      	uxth	r1, r2
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <Reverse_Delay+0x64>)
 80010a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	sampleBufferIndex++;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <Reverse_Delay+0x60>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <Reverse_Delay+0x60>)
 80010b0:	6013      	str	r3, [r2, #0]

	if (sampleBufferIndex >= controlShadow[0]){
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <Reverse_Delay+0x5c>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <Reverse_Delay+0x60>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d806      	bhi.n	80010ce <Reverse_Delay+0x52>
		sampleBufferIndex = 0;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <Reverse_Delay+0x60>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
		controlShadow[0] = control[0];
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <Reverse_Delay+0x70>)
 80010c8:	881a      	ldrh	r2, [r3, #0]
 80010ca:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <Reverse_Delay+0x5c>)
 80010cc:	801a      	strh	r2, [r3, #0]
	}
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	20034388 	.word	0x20034388
 80010dc:	20031360 	.word	0x20031360
 80010e0:	20000620 	.word	0x20000620
 80010e4:	2000060e 	.word	0x2000060e
 80010e8:	2000060c 	.word	0x2000060c
 80010ec:	20034380 	.word	0x20034380

080010f0 <Bit_Reduction>:


void Bit_Reduction(void){
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
	dataOut = dataIn & (((1 << 16) - 1) - ((1 << (control[0] >> 12)) - 1));
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <Bit_Reduction+0x38>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	0b1b      	lsrs	r3, r3, #12
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	2301      	movs	r3, #1
 8001100:	4093      	lsls	r3, r2
 8001102:	b29b      	uxth	r3, r3
 8001104:	425b      	negs	r3, r3
 8001106:	b29b      	uxth	r3, r3
 8001108:	b21a      	sxth	r2, r3
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <Bit_Reduction+0x3c>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	b29b      	uxth	r3, r3
 8001110:	b21b      	sxth	r3, r3
 8001112:	4013      	ands	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <Bit_Reduction+0x40>)
 800111a:	801a      	strh	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20034380 	.word	0x20034380
 800112c:	2000060c 	.word	0x2000060c
 8001130:	2000060e 	.word	0x2000060e

08001134 <Random_Sample_Delay>:


void Random_Sample_Delay(void){
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	if (textureSamplesRemaining == 0){
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <Random_Sample_Delay+0x98>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10d      	bne.n	800115c <Random_Sample_Delay+0x28>
		textureSamplesRemaining = 10000;
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <Random_Sample_Delay+0x98>)
 8001142:	f242 7210 	movw	r2, #10000	; 0x2710
 8001146:	601a      	str	r2, [r3, #0]

		// get random number
		if (RNG->SR == 0x01){
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <Random_Sample_Delay+0x9c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d10a      	bne.n	8001166 <Random_Sample_Delay+0x32>
			textureSampleOffset = (RNG->DR >> 18);
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <Random_Sample_Delay+0x9c>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	0c9b      	lsrs	r3, r3, #18
 8001156:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <Random_Sample_Delay+0xa0>)
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e004      	b.n	8001166 <Random_Sample_Delay+0x32>

		}

	}
	else{
		textureSamplesRemaining--;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <Random_Sample_Delay+0x98>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3b01      	subs	r3, #1
 8001162:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <Random_Sample_Delay+0x98>)
 8001164:	6013      	str	r3, [r2, #0]
	}

	dataOut = sampleBuffer[(sampleBufferIndex - textureSampleOffset + 40000) % 40000];
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <Random_Sample_Delay+0xa4>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <Random_Sample_Delay+0xa0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	1ad2      	subs	r2, r2, r3
 8001170:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001174:	4413      	add	r3, r2
 8001176:	4a19      	ldr	r2, [pc, #100]	; (80011dc <Random_Sample_Delay+0xa8>)
 8001178:	fba2 1203 	umull	r1, r2, r2, r3
 800117c:	0bd2      	lsrs	r2, r2, #15
 800117e:	f649 4140 	movw	r1, #40000	; 0x9c40
 8001182:	fb01 f202 	mul.w	r2, r1, r2
 8001186:	1a9a      	subs	r2, r3, r2
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <Random_Sample_Delay+0xac>)
 800118a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <Random_Sample_Delay+0xb0>)
 8001192:	801a      	strh	r2, [r3, #0]

	sampleBuffer[sampleBufferIndex] = dataIn;
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <Random_Sample_Delay+0xa4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <Random_Sample_Delay+0xb4>)
 800119a:	8812      	ldrh	r2, [r2, #0]
 800119c:	b291      	uxth	r1, r2
 800119e:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <Random_Sample_Delay+0xac>)
 80011a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	sampleBufferIndex++;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <Random_Sample_Delay+0xa4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <Random_Sample_Delay+0xa4>)
 80011ac:	6013      	str	r3, [r2, #0]
	if (sampleBufferIndex >= 40000){
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <Random_Sample_Delay+0xa4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d902      	bls.n	80011c0 <Random_Sample_Delay+0x8c>
	  sampleBufferIndex = 0;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <Random_Sample_Delay+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
	}
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20034378 	.word	0x20034378
 80011d0:	50060800 	.word	0x50060800
 80011d4:	20034374 	.word	0x20034374
 80011d8:	20031360 	.word	0x20031360
 80011dc:	d1b71759 	.word	0xd1b71759
 80011e0:	20000620 	.word	0x20000620
 80011e4:	2000060e 	.word	0x2000060e
 80011e8:	2000060c 	.word	0x2000060c

080011ec <Clouds_Delay>:


void Clouds_Delay(void){
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	// check if switch pressed, read into buffer
	if (!(GPIOG->IDR & GPIO_IDR_ID2)){
 80011f0:	4b46      	ldr	r3, [pc, #280]	; (800130c <Clouds_Delay+0x120>)
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d122      	bne.n	8001242 <Clouds_Delay+0x56>
		if (!isRecording){
 80011fc:	4b44      	ldr	r3, [pc, #272]	; (8001310 <Clouds_Delay+0x124>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d106      	bne.n	8001212 <Clouds_Delay+0x26>
			sampleBufferIndex = 0;
 8001204:	4b43      	ldr	r3, [pc, #268]	; (8001314 <Clouds_Delay+0x128>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
			isRecording = 1;
 800120a:	4b41      	ldr	r3, [pc, #260]	; (8001310 <Clouds_Delay+0x124>)
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e006      	b.n	8001220 <Clouds_Delay+0x34>
		}
		// index has returned to 0
		else if (sampleBufferIndex == 0){
 8001212:	4b40      	ldr	r3, [pc, #256]	; (8001314 <Clouds_Delay+0x128>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <Clouds_Delay+0x34>
			looperOverflow = 1;
 800121a:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <Clouds_Delay+0x12c>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
		}
		// if currently playing write to buffer
		sampleBuffer[sampleBufferIndex] = dataIn;
 8001220:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <Clouds_Delay+0x128>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a3d      	ldr	r2, [pc, #244]	; (800131c <Clouds_Delay+0x130>)
 8001226:	8812      	ldrh	r2, [r2, #0]
 8001228:	b291      	uxth	r1, r2
 800122a:	4a3d      	ldr	r2, [pc, #244]	; (8001320 <Clouds_Delay+0x134>)
 800122c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		dataOut = sampleBuffer[sampleBufferIndex];
 8001230:	4b38      	ldr	r3, [pc, #224]	; (8001314 <Clouds_Delay+0x128>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a3a      	ldr	r2, [pc, #232]	; (8001320 <Clouds_Delay+0x134>)
 8001236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b39      	ldr	r3, [pc, #228]	; (8001324 <Clouds_Delay+0x138>)
 800123e:	801a      	strh	r2, [r3, #0]
 8001240:	e04a      	b.n	80012d8 <Clouds_Delay+0xec>

	}
	else{
		if (isRecording){
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <Clouds_Delay+0x124>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d01a      	beq.n	8001280 <Clouds_Delay+0x94>
			if (looperOverflow){
 800124a:	4b33      	ldr	r3, [pc, #204]	; (8001318 <Clouds_Delay+0x12c>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <Clouds_Delay+0x6e>
				endIndex = SAMELE_BUFFER_SIZE;
 8001252:	4b35      	ldr	r3, [pc, #212]	; (8001328 <Clouds_Delay+0x13c>)
 8001254:	4a35      	ldr	r2, [pc, #212]	; (800132c <Clouds_Delay+0x140>)
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e00c      	b.n	8001274 <Clouds_Delay+0x88>
			}
			else{
				endIndex = sampleBufferIndex > 10000 ? sampleBufferIndex : 10000;
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <Clouds_Delay+0x128>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001262:	4293      	cmp	r3, r2
 8001264:	d902      	bls.n	800126c <Clouds_Delay+0x80>
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <Clouds_Delay+0x128>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	e001      	b.n	8001270 <Clouds_Delay+0x84>
 800126c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001270:	4a2d      	ldr	r2, [pc, #180]	; (8001328 <Clouds_Delay+0x13c>)
 8001272:	6013      	str	r3, [r2, #0]
			}
			isRecording = 0;
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <Clouds_Delay+0x124>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
			looperOverflow = 0;
 800127a:	4b27      	ldr	r3, [pc, #156]	; (8001318 <Clouds_Delay+0x12c>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
		}
		if (textureSamplesRemaining == 0){
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <Clouds_Delay+0x144>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10d      	bne.n	80012a4 <Clouds_Delay+0xb8>
			textureSamplesRemaining = 20000;
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <Clouds_Delay+0x144>)
 800128a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800128e:	601a      	str	r2, [r3, #0]
			// get random number
			if (RNG->SR == 0x01){
 8001290:	4b28      	ldr	r3, [pc, #160]	; (8001334 <Clouds_Delay+0x148>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d10a      	bne.n	80012ae <Clouds_Delay+0xc2>
				textureSampleOffset = (RNG->DR >> 16);
 8001298:	4b26      	ldr	r3, [pc, #152]	; (8001334 <Clouds_Delay+0x148>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	0c1b      	lsrs	r3, r3, #16
 800129e:	4a26      	ldr	r2, [pc, #152]	; (8001338 <Clouds_Delay+0x14c>)
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e004      	b.n	80012ae <Clouds_Delay+0xc2>
			}
			else{
			}
		}
		else {
			textureSamplesRemaining--;
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <Clouds_Delay+0x144>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	4a21      	ldr	r2, [pc, #132]	; (8001330 <Clouds_Delay+0x144>)
 80012ac:	6013      	str	r3, [r2, #0]
		}
		// read out of buffer
		dataOut = sampleBuffer[(sampleBufferIndex - textureSampleOffset + endIndex) % endIndex];
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <Clouds_Delay+0x128>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <Clouds_Delay+0x14c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1ad2      	subs	r2, r2, r3
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <Clouds_Delay+0x13c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <Clouds_Delay+0x13c>)
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80012c6:	fb01 f202 	mul.w	r2, r1, r2
 80012ca:	1a9b      	subs	r3, r3, r2
 80012cc:	4a14      	ldr	r2, [pc, #80]	; (8001320 <Clouds_Delay+0x134>)
 80012ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <Clouds_Delay+0x138>)
 80012d6:	801a      	strh	r2, [r3, #0]
	}

	sampleBufferIndex++;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <Clouds_Delay+0x128>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <Clouds_Delay+0x128>)
 80012e0:	6013      	str	r3, [r2, #0]
	// if recording limit to max buffer size, if looping limit to loop length
	if (sampleBufferIndex > (isRecording ? SAMELE_BUFFER_SIZE : endIndex)){
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <Clouds_Delay+0x124>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <Clouds_Delay+0x104>
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <Clouds_Delay+0x13c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	e000      	b.n	80012f2 <Clouds_Delay+0x106>
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <Clouds_Delay+0x140>)
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <Clouds_Delay+0x128>)
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d202      	bcs.n	8001300 <Clouds_Delay+0x114>
	  sampleBufferIndex = 0;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <Clouds_Delay+0x128>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
	}
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40021800 	.word	0x40021800
 8001310:	20034370 	.word	0x20034370
 8001314:	20031360 	.word	0x20031360
 8001318:	20034371 	.word	0x20034371
 800131c:	2000060c 	.word	0x2000060c
 8001320:	20000620 	.word	0x20000620
 8001324:	2000060e 	.word	0x2000060e
 8001328:	20000000 	.word	0x20000000
 800132c:	000186a0 	.word	0x000186a0
 8001330:	20034378 	.word	0x20034378
 8001334:	50060800 	.word	0x50060800
 8001338:	20034374 	.word	0x20034374

0800133c <Looper>:

void Looper(void){
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
	// check if switch pressed, read into buffer
	if (!(GPIOG->IDR & GPIO_IDR_ID2)){
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <Looper+0xc8>)
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	d11a      	bne.n	8001382 <Looper+0x46>
		if (!isRecording){
 800134c:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <Looper+0xcc>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d106      	bne.n	8001362 <Looper+0x26>
			sampleBufferIndex = 0;
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <Looper+0xd0>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
			isRecording = 1;
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <Looper+0xcc>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
 8001360:	e006      	b.n	8001370 <Looper+0x34>
		}
		// index has returned to 0
		else if (sampleBufferIndex == 0){
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <Looper+0xd0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <Looper+0x34>
			looperOverflow = 1;
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <Looper+0xd4>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
		}
		// if currently playing write to buffer
		sampleBuffer[sampleBufferIndex] = dataIn;
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <Looper+0xd0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a27      	ldr	r2, [pc, #156]	; (8001414 <Looper+0xd8>)
 8001376:	8812      	ldrh	r2, [r2, #0]
 8001378:	b291      	uxth	r1, r2
 800137a:	4a27      	ldr	r2, [pc, #156]	; (8001418 <Looper+0xdc>)
 800137c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001380:	e01e      	b.n	80013c0 <Looper+0x84>

	}
	else{
		if (isRecording){
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <Looper+0xcc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d01a      	beq.n	80013c0 <Looper+0x84>
			if (looperOverflow){
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <Looper+0xd4>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <Looper+0x5e>
				endIndex = SAMELE_BUFFER_SIZE;
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <Looper+0xe0>)
 8001394:	4a22      	ldr	r2, [pc, #136]	; (8001420 <Looper+0xe4>)
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e00c      	b.n	80013b4 <Looper+0x78>
			}
			else{
				endIndex = sampleBufferIndex > 10000 ? sampleBufferIndex : 10000;
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <Looper+0xd0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f242 7210 	movw	r2, #10000	; 0x2710
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d902      	bls.n	80013ac <Looper+0x70>
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <Looper+0xd0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	e001      	b.n	80013b0 <Looper+0x74>
 80013ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80013b0:	4a1a      	ldr	r2, [pc, #104]	; (800141c <Looper+0xe0>)
 80013b2:	6013      	str	r3, [r2, #0]
			}
			isRecording = 0;
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <Looper+0xcc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
			looperOverflow = 0;
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <Looper+0xd4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
		}
	}
	// read out of buffer
	dataOut = sampleBuffer[sampleBufferIndex];
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <Looper+0xd0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a14      	ldr	r2, [pc, #80]	; (8001418 <Looper+0xdc>)
 80013c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <Looper+0xe8>)
 80013ce:	801a      	strh	r2, [r3, #0]
	sampleBufferIndex++;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <Looper+0xd0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	4a0d      	ldr	r2, [pc, #52]	; (800140c <Looper+0xd0>)
 80013d8:	6013      	str	r3, [r2, #0]

	// if recording limit to max buffer size, if looping limit to loop length
	if (sampleBufferIndex > (isRecording ? SAMELE_BUFFER_SIZE : endIndex)){ //200000){
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <Looper+0xcc>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <Looper+0xac>
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <Looper+0xe0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	e000      	b.n	80013ea <Looper+0xae>
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <Looper+0xe4>)
 80013ea:	4a08      	ldr	r2, [pc, #32]	; (800140c <Looper+0xd0>)
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d202      	bcs.n	80013f8 <Looper+0xbc>
	  sampleBufferIndex = 0;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <Looper+0xd0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
	}
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40021800 	.word	0x40021800
 8001408:	20034370 	.word	0x20034370
 800140c:	20031360 	.word	0x20031360
 8001410:	20034371 	.word	0x20034371
 8001414:	2000060c 	.word	0x2000060c
 8001418:	20000620 	.word	0x20000620
 800141c:	20000000 	.word	0x20000000
 8001420:	000186a0 	.word	0x000186a0
 8001424:	2000060e 	.word	0x2000060e

08001428 <FFT_Test>:
// input samples are stored in sample buffer indices 0 to 2 * FFT_SAMPLES
// to allow half the buffer to be filled while the other half is processed
// output is stored in 2 * FFT_SAMPLES to 4*FFT_SAMPLES


void __attribute__((optimize("Ofast"))) FFT_Test(arm_rfft_fast_instance_f32 * S){
 8001428:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	if (startFFTFlag){
 800142c:	49cd      	ldr	r1, [pc, #820]	; (8001764 <FFT_Test+0x33c>)
void __attribute__((optimize("Ofast"))) FFT_Test(arm_rfft_fast_instance_f32 * S){
 800142e:	ed2d 8b06 	vpush	{d8-d10}
 8001432:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
	if (startFFTFlag){
 8001436:	680b      	ldr	r3, [r1, #0]
void __attribute__((optimize("Ofast"))) FFT_Test(arm_rfft_fast_instance_f32 * S){
 8001438:	b086      	sub	sp, #24
 800143a:	9005      	str	r0, [sp, #20]
	if (startFFTFlag){
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 8107 	beq.w	8001650 <FFT_Test+0x228>



		static float previousPhase[FFT_SAMPLES >> 1];
		static float previousShiftedPhase[FFT_SAMPLES >> 1];
		startFFTFlag = 0;
 8001442:	2200      	movs	r2, #0

		// 0 if currently in second half of buffer
		FFTBufferSegment = ((sampleBufferIndex >> 9) + 2) & 3; // Need to change bit shift amount with FFT size
 8001444:	4bc8      	ldr	r3, [pc, #800]	; (8001768 <FFT_Test+0x340>)
 8001446:	4ec9      	ldr	r6, [pc, #804]	; (800176c <FFT_Test+0x344>)
		startFFTFlag = 0;
 8001448:	600a      	str	r2, [r1, #0]
		FFTBufferSegment = ((sampleBufferIndex >> 9) + 2) & 3; // Need to change bit shift amount with FFT size
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8df 9344 	ldr.w	r9, [pc, #836]	; 8001794 <FFT_Test+0x36c>
 8001450:	0a5b      	lsrs	r3, r3, #9
 8001452:	4dc7      	ldr	r5, [pc, #796]	; (8001770 <FFT_Test+0x348>)
 8001454:	f8df 8340 	ldr.w	r8, [pc, #832]	; 8001798 <FFT_Test+0x370>
 8001458:	f509 5480 	add.w	r4, r9, #4096	; 0x1000
 800145c:	3302      	adds	r3, #2
//		GPIOC->BSRR |= (GPIO_BSRR_BS6);

		// copy, cast and window
		for (int i = 0; i < FFT_SAMPLES; i++){
			// segment 3 needs to wrap past end of the buffer
			FFTBuffer[i] = ((float)(sampleBuffer[(FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1)]) - (float)averageValue) * FFTWindow[i] + (float)averageValue;
 800145e:	4649      	mov	r1, r9
 8001460:	4628      	mov	r0, r5
		FFTBufferSegment = ((sampleBufferIndex >> 9) + 2) & 3; // Need to change bit shift amount with FFT size
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	6033      	str	r3, [r6, #0]
			FFTBuffer[i] = ((float)(sampleBuffer[(FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1)]) - (float)averageValue) * FFTWindow[i] + (float)averageValue;
 8001468:	4bc2      	ldr	r3, [pc, #776]	; (8001774 <FFT_Test+0x34c>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	ee07 3a10 	vmov	s14, r3
 8001470:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001474:	6833      	ldr	r3, [r6, #0]
 8001476:	eef0 6a47 	vmov.f32	s13, s14
 800147a:	ecb1 6a01 	vldmia	r1!, {s12}
 800147e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
 8001482:	3201      	adds	r2, #1
		for (int i = 0; i < FFT_SAMPLES; i++){
 8001484:	42a1      	cmp	r1, r4
			FFTBuffer[i] = ((float)(sampleBuffer[(FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1)]) - (float)averageValue) * FFTWindow[i] + (float)averageValue;
 8001486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800148a:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 800148e:	b29b      	uxth	r3, r3
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001498:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800149c:	eee7 6a86 	vfma.f32	s13, s15, s12
 80014a0:	ece0 6a01 	vstmia	r0!, {s13}
		for (int i = 0; i < FFT_SAMPLES; i++){
 80014a4:	d1e6      	bne.n	8001474 <FFT_Test+0x4c>
		}

		// FFT
		arm_rfft_fast_f32(S, FFTBuffer, FFTOutBuffer, 0);
 80014a6:	4cb4      	ldr	r4, [pc, #720]	; (8001778 <FFT_Test+0x350>)
 80014a8:	2300      	movs	r3, #0
 80014aa:	49b1      	ldr	r1, [pc, #708]	; (8001770 <FFT_Test+0x348>)
 80014ac:	4622      	mov	r2, r4
 80014ae:	9805      	ldr	r0, [sp, #20]
 80014b0:	f001 fe76 	bl	80031a0 <arm_rfft_fast_f32>

		float magnitude[FFT_SAMPLES >> 1];
		float phase[FFT_SAMPLES >> 1];

		// phase and magnitude
		arm_cmplx_mag_f32(FFTOutBuffer, magnitude, FFT_SAMPLES>>1);
 80014b4:	f60d 0318 	addw	r3, sp, #2072	; 0x818
 80014b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014bc:	a906      	add	r1, sp, #24
 80014be:	4620      	mov	r0, r4
 80014c0:	469a      	mov	sl, r3
 80014c2:	46a3      	mov	fp, r4
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	f002 fad1 	bl	8003a6c <arm_cmplx_mag_f32>
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
//			arm_atan2_f32(FFTOutBuffer[2 * i + 1], FFTOutBuffer[2 * i], &phase[i]);
			phase[i] = atan2f(FFTOutBuffer[2 * i + 1], FFTOutBuffer[2 * i]);
 80014ca:	eddb 0a00 	vldr	s1, [fp]
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 80014ce:	f10b 0b08 	add.w	fp, fp, #8
			phase[i] = atan2f(FFTOutBuffer[2 * i + 1], FFTOutBuffer[2 * i]);
 80014d2:	ed1b 0a01 	vldr	s0, [fp, #-4]
 80014d6:	f005 fd69 	bl	8006fac <atan2f>
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 80014da:	4ba8      	ldr	r3, [pc, #672]	; (800177c <FFT_Test+0x354>)
			phase[i] = atan2f(FFTOutBuffer[2 * i + 1], FFTOutBuffer[2 * i]);
 80014dc:	ecaa 0a01 	vstmia	sl!, {s0}
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 80014e0:	459b      	cmp	fp, r3
 80014e2:	d1f2      	bne.n	80014ca <FFT_Test+0xa2>
 80014e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80014e8:	eddf 8aa5 	vldr	s17, [pc, #660]	; 8001780 <FFT_Test+0x358>

			///
		    if (phaseDifference >= 0)
		    	phaseDifference = fmodf(phaseDifference + PI, 2.0f * PI) - PI;
		    else
		    	phaseDifference = fmodf(phaseDifference - PI, -2.0f * PI) + PI;
 80014ec:	ed9f aaa5 	vldr	s20, [pc, #660]	; 8001784 <FFT_Test+0x35c>
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 80014f0:	f60d 0218 	addw	r2, sp, #2072	; 0x818
 80014f4:	446b      	add	r3, sp
		    ///

			// calculate exact frequency
			fractionalBins[i] = phaseDifference * (float)FFT_SAMPLES / (2.0f * PI * (float)HOP_SIZE) + (float)i;
 80014f6:	eddf 9aa4 	vldr	s19, [pc, #656]	; 8001788 <FFT_Test+0x360>
 80014fa:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 800179c <FFT_Test+0x374>
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 80014fe:	f04f 0a00 	mov.w	sl, #0
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 8001502:	4619      	mov	r1, r3
 8001504:	e012      	b.n	800152c <FFT_Test+0x104>
		    	phaseDifference = fmodf(phaseDifference + PI, 2.0f * PI) - PI;
 8001506:	f005 fd53 	bl	8006fb0 <fmodf>
 800150a:	ee30 0a68 	vsub.f32	s0, s0, s17
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 800150e:	f10a 0a01 	add.w	sl, sl, #1
//			if(UART_Buffer_Is_Free()){
//				sprintf((char*)buffer, "%.3i %5.2f %5.1f\n\r", i, phaseDifference, fractionalBins[i]);
//				UART_Transmit(buffer, 17);
//			}

			previousPhase[i] = phase[i]; // save phase
 8001512:	ed0b 9a01 	vstr	s18, [fp, #-4]
			fractionalBins[i] = phaseDifference * (float)FFT_SAMPLES / (2.0f * PI * (float)HOP_SIZE) + (float)i;
 8001516:	eea0 8a29 	vfma.f32	s16, s0, s19
 800151a:	9903      	ldr	r1, [sp, #12]
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 800151c:	f5ba 7f00 	cmp.w	sl, #512	; 0x200
 8001520:	9b02      	ldr	r3, [sp, #8]
 8001522:	9a04      	ldr	r2, [sp, #16]
			fractionalBins[i] = phaseDifference * (float)FFT_SAMPLES / (2.0f * PI * (float)HOP_SIZE) + (float)i;
 8001524:	eca1 8a01 	vstmia	r1!, {s16}
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 8001528:	f000 8099 	beq.w	800165e <FFT_Test+0x236>
			float phaseDifference = phase[i] - previousPhase[i] - 2.0f * PI * (float)i / (float)FFT_TO_HOP_RATIO; //HOP_SIZE/FFT_SAMPLES;
 800152c:	ee07 aa90 	vmov	s15, sl
 8001530:	ecb2 9a01 	vldmia	r2!, {s18}
		    	phaseDifference = fmodf(phaseDifference + PI, 2.0f * PI) - PI;
 8001534:	eddf 0a95 	vldr	s1, [pc, #596]	; 800178c <FFT_Test+0x364>
			float phaseDifference = phase[i] - previousPhase[i] - 2.0f * PI * (float)i / (float)FFT_TO_HOP_RATIO; //HOP_SIZE/FFT_SAMPLES;
 8001538:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800153c:	ecfb 7a01 	vldmia	fp!, {s15}
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	eee8 7a28 	vfma.f32	s15, s16, s17
 8001546:	e9cd 1203 	strd	r1, r2, [sp, #12]
 800154a:	ee79 7a67 	vsub.f32	s15, s18, s15
		    if (phaseDifference >= 0)
 800154e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
		    	phaseDifference = fmodf(phaseDifference + PI, 2.0f * PI) - PI;
 8001552:	ee37 0aa8 	vadd.f32	s0, s15, s17
		    if (phaseDifference >= 0)
 8001556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155a:	dad4      	bge.n	8001506 <FFT_Test+0xde>
		    	phaseDifference = fmodf(phaseDifference - PI, -2.0f * PI) + PI;
 800155c:	ee37 0ae8 	vsub.f32	s0, s15, s17
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 8001560:	f10a 0a01 	add.w	sl, sl, #1
		    	phaseDifference = fmodf(phaseDifference - PI, -2.0f * PI) + PI;
 8001564:	eef0 0a4a 	vmov.f32	s1, s20
 8001568:	f005 fd22 	bl	8006fb0 <fmodf>
			previousPhase[i] = phase[i]; // save phase
 800156c:	ed0b 9a01 	vstr	s18, [fp, #-4]
		    	phaseDifference = fmodf(phaseDifference - PI, -2.0f * PI) + PI;
 8001570:	ee30 0a28 	vadd.f32	s0, s0, s17
 8001574:	e7cf      	b.n	8001516 <FFT_Test+0xee>

			previousShiftedPhase[i] = phase[i]; // save phase
		}

		// real and complex parts
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 8001576:	f04f 0a00 	mov.w	sl, #0
			FFTOutBuffer[2 * i] = shiftedMagnitude[i] * arm_cos_f32(phase[i]); // real
 800157a:	9b01      	ldr	r3, [sp, #4]
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 800157c:	3408      	adds	r4, #8
			FFTOutBuffer[2 * i] = shiftedMagnitude[i] * arm_cos_f32(phase[i]); // real
 800157e:	ecb3 8a01 	vldmia	r3!, {s16}
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	f641 0318 	movw	r3, #6168	; 0x1818
 8001588:	eeb0 0a48 	vmov.f32	s0, s16
 800158c:	446b      	add	r3, sp
 800158e:	eb03 0b8a 	add.w	fp, r3, sl, lsl #2
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 8001592:	f10a 0a01 	add.w	sl, sl, #1
			FFTOutBuffer[2 * i] = shiftedMagnitude[i] * arm_cos_f32(phase[i]); // real
 8001596:	eddb 8a00 	vldr	s17, [fp]
 800159a:	f002 fb93 	bl	8003cc4 <arm_cos_f32>
 800159e:	eef0 7a40 	vmov.f32	s15, s0
			FFTOutBuffer[2 * i + 1] = shiftedMagnitude[i] * arm_sin_f32(phase[i]); // imaginary
 80015a2:	eeb0 0a48 	vmov.f32	s0, s16
 80015a6:	ed9b 8a00 	vldr	s16, [fp]
			FFTOutBuffer[2 * i] = shiftedMagnitude[i] * arm_cos_f32(phase[i]); // real
 80015aa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80015ae:	ed44 7a02 	vstr	s15, [r4, #-8]
			FFTOutBuffer[2 * i + 1] = shiftedMagnitude[i] * arm_sin_f32(phase[i]); // imaginary
 80015b2:	f002 fb43 	bl	8003c3c <arm_sin_f32>
 80015b6:	ee28 8a00 	vmul.f32	s16, s16, s0
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 80015ba:	f5ba 7f00 	cmp.w	sl, #512	; 0x200
			FFTOutBuffer[2 * i + 1] = shiftedMagnitude[i] * arm_sin_f32(phase[i]); // imaginary
 80015be:	ed04 8a01 	vstr	s16, [r4, #-4]
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 80015c2:	d1da      	bne.n	800157a <FFT_Test+0x152>
		}

		// IFFT
//		FFTOutBuffer[1] = 0.0f;
		arm_rfft_fast_f32(S, FFTOutBuffer, FFTBuffer, 1);
 80015c4:	9805      	ldr	r0, [sp, #20]
 80015c6:	2301      	movs	r3, #1
 80015c8:	4a69      	ldr	r2, [pc, #420]	; (8001770 <FFT_Test+0x348>)
 80015ca:	496b      	ldr	r1, [pc, #428]	; (8001778 <FFT_Test+0x350>)
 80015cc:	f001 fde8 	bl	80031a0 <arm_rfft_fast_f32>

		// copy back, cast and re-window
		for (int i = 0; i < FFT_SAMPLES; i++){

			int FFTOut = sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] + ((int)FFTBuffer[i] - averageValue) * FFTWindow[i];
 80015d0:	4b68      	ldr	r3, [pc, #416]	; (8001774 <FFT_Test+0x34c>)
 80015d2:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 80017a0 <FFT_Test+0x378>
		for (int i = 0; i < FFT_SAMPLES; i++){
 80015d6:	2200      	movs	r2, #0
			int FFTOut = sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] + ((int)FFTBuffer[i] - averageValue) * FFTWindow[i];
 80015d8:	881c      	ldrh	r4, [r3, #0]
			  FFTOut = 0xFFFF;
			}
			else if (FFTOut < 0){
				FFTOut = 0;
			}
			sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] = (unsigned short)FFTOut;// - 32768.0f) * FFTWindow[i] + 32768.0f;
 80015da:	f64f 70ff 	movw	r0, #65535	; 0xffff
			int FFTOut = sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] + ((int)FFTBuffer[i] - averageValue) * FFTWindow[i];
 80015de:	6833      	ldr	r3, [r6, #0]
 80015e0:	ecb5 7a01 	vldmia	r5!, {s14}
 80015e4:	eb02 2343 	add.w	r3, r2, r3, lsl #9
 80015e8:	ecf9 6a01 	vldmia	r9!, {s13}
 80015ec:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80015f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f8:	ee17 1a10 	vmov	r1, s14
 80015fc:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8001600:	1b09      	subs	r1, r1, r4
			sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] = (unsigned short)FFTOut;// - 32768.0f) * FFTWindow[i] + 32768.0f;
 8001602:	f8d6 c000 	ldr.w	ip, [r6]
			int FFTOut = sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] + ((int)FFTBuffer[i] - averageValue) * FFTWindow[i];
 8001606:	b29b      	uxth	r3, r3
 8001608:	ee07 1a10 	vmov	s14, r1
			sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] = (unsigned short)FFTOut;// - 32768.0f) * FFTWindow[i] + 32768.0f;
 800160c:	eb02 2c4c 	add.w	ip, r2, ip, lsl #9
 8001610:	3201      	adds	r2, #1
			int FFTOut = sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] + ((int)FFTBuffer[i] - averageValue) * FFTWindow[i];
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] = (unsigned short)FFTOut;// - 32768.0f) * FFTWindow[i] + 32768.0f;
 800161a:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
			int FFTOut = sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] + ((int)FFTBuffer[i] - averageValue) * FFTWindow[i];
 800161e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] = (unsigned short)FFTOut;// - 32768.0f) * FFTWindow[i] + 32768.0f;
 8001622:	f50c 6c00 	add.w	ip, ip, #2048	; 0x800
			int FFTOut = sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] + ((int)FFTBuffer[i] - averageValue) * FFTWindow[i];
 8001626:	eee7 7a26 	vfma.f32	s15, s14, s13
 800162a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800162e:	ee17 3a90 	vmov	r3, s15
			else if (FFTOut < 0){
 8001632:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] = (unsigned short)FFTOut;// - 32768.0f) * FFTWindow[i] + 32768.0f;
 8001636:	4283      	cmp	r3, r0
 8001638:	bfa8      	it	ge
 800163a:	4603      	movge	r3, r0
		for (int i = 0; i < FFT_SAMPLES; i++){
 800163c:	45ae      	cmp	lr, r5
			sampleBuffer[2 * FFT_SAMPLES + ((FFTBufferSegment * (FFT_SAMPLES >> 1) + i) & (2 * FFT_SAMPLES - 1))] = (unsigned short)FFTOut;// - 32768.0f) * FFTWindow[i] + 32768.0f;
 800163e:	b29b      	uxth	r3, r3
 8001640:	f828 301c 	strh.w	r3, [r8, ip, lsl #1]
		for (int i = 0; i < FFT_SAMPLES; i++){
 8001644:	d1cb      	bne.n	80015de <FFT_Test+0x1b6>
		}

//		GPIOC->BSRR |= (GPIO_BSRR_BR6);
		if (startFFTFlag){
 8001646:	4b47      	ldr	r3, [pc, #284]	; (8001764 <FFT_Test+0x33c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f040 80aa 	bne.w	80017a4 <FFT_Test+0x37c>
			  }
		}


	}
}
 8001650:	f50d 5d20 	add.w	sp, sp, #10240	; 0x2800
 8001654:	b006      	add	sp, #24
 8001656:	ecbd 8b06 	vpop	{d8-d10}
 800165a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800165e:	f242 0a18 	movw	sl, #8216	; 0x2018
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 8001662:	2200      	movs	r2, #0
			shiftedMagnitude[i] = 0.0f;
 8001664:	2100      	movs	r1, #0
 8001666:	44ea      	add	sl, sp
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 8001668:	4650      	mov	r0, sl
			shiftedMagnitude[i] = 0.0f;
 800166a:	f641 0c18 	movw	ip, #6168	; 0x1818
			shiftedFractionalBins[i] = 0.0f;
 800166e:	f840 1b04 	str.w	r1, [r0], #4
			shiftedMagnitude[i] = 0.0f;
 8001672:	44ec      	add	ip, sp
 8001674:	eb0c 0c82 	add.w	ip, ip, r2, lsl #2
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 8001678:	3201      	adds	r2, #1
 800167a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
			shiftedMagnitude[i] = 0.0f;
 800167e:	f8cc 1000 	str.w	r1, [ip]
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 8001682:	d1f2      	bne.n	800166a <FFT_Test+0x242>
			int newBin = (int)(4.0f * (float)i + 0.5f);// * 4.0f + 0.5f);
 8001684:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001688:	a906      	add	r1, sp, #24
 800168a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 800168e:	2000      	movs	r0, #0
			int newBin = (int)(4.0f * (float)i + 0.5f);// * 4.0f + 0.5f);
 8001690:	ee07 0a90 	vmov	s15, r0
				shiftedMagnitude[newBin] = magnitude[i];
 8001694:	f641 0c18 	movw	ip, #6168	; 0x1818
				shiftedFractionalBins[newBin] = fractionalBins[i] * 4.0f;// * 4.0f;
 8001698:	f242 0e18 	movw	lr, #8216	; 0x2018
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 800169c:	3001      	adds	r0, #1
			int newBin = (int)(4.0f * (float)i + 0.5f);// * 4.0f + 0.5f);
 800169e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				shiftedMagnitude[newBin] = magnitude[i];
 80016a2:	44ec      	add	ip, sp
			int newBin = (int)(4.0f * (float)i + 0.5f);// * 4.0f + 0.5f);
 80016a4:	eef0 7a46 	vmov.f32	s15, s12
				shiftedFractionalBins[newBin] = fractionalBins[i] * 4.0f;// * 4.0f;
 80016a8:	44ee      	add	lr, sp
			int newBin = (int)(4.0f * (float)i + 0.5f);// * 4.0f + 0.5f);
 80016aa:	eee7 7a26 	vfma.f32	s15, s14, s13
 80016ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b2:	ee17 2a90 	vmov	r2, s15
			if (newBin < (FFT_SAMPLES >> 1)){
 80016b6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
				shiftedMagnitude[newBin] = magnitude[i];
 80016ba:	eb0c 0c82 	add.w	ip, ip, r2, lsl #2
				shiftedFractionalBins[newBin] = fractionalBins[i] * 4.0f;// * 4.0f;
 80016be:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
			if (newBin < (FFT_SAMPLES >> 1)){
 80016c2:	da09      	bge.n	80016d8 <FFT_Test+0x2b0>
				shiftedFractionalBins[newBin] = fractionalBins[i] * 4.0f;// * 4.0f;
 80016c4:	edd3 7a00 	vldr	s15, [r3]
				shiftedMagnitude[newBin] = magnitude[i];
 80016c8:	f8d1 e000 	ldr.w	lr, [r1]
				shiftedFractionalBins[newBin] = fractionalBins[i] * 4.0f;// * 4.0f;
 80016cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
				shiftedMagnitude[newBin] = magnitude[i];
 80016d0:	f8cc e000 	str.w	lr, [ip]
				shiftedFractionalBins[newBin] = fractionalBins[i] * 4.0f;// * 4.0f;
 80016d4:	edc2 7a00 	vstr	s15, [r2]
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 80016d8:	3104      	adds	r1, #4
 80016da:	f60d 0218 	addw	r2, sp, #2072	; 0x818
 80016de:	3304      	adds	r3, #4
 80016e0:	428a      	cmp	r2, r1
 80016e2:	d1d5      	bne.n	8001690 <FFT_Test+0x268>
 80016e4:	4693      	mov	fp, r2
 80016e6:	ed9f 8a26 	vldr	s16, [pc, #152]	; 8001780 <FFT_Test+0x358>
		    	phase[i] = fmodf(phase[i] - PI, -2.0f * PI) + PI;
 80016ea:	ed9f 9a26 	vldr	s18, [pc, #152]	; 8001784 <FFT_Test+0x35c>
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 80016ee:	2300      	movs	r3, #0
		    	phase[i] = fmodf(phase[i] + PI, 2.0f * PI) - PI;
 80016f0:	eddf 8a26 	vldr	s17, [pc, #152]	; 800178c <FFT_Test+0x364>
 80016f4:	4a26      	ldr	r2, [pc, #152]	; (8001790 <FFT_Test+0x368>)
 80016f6:	e00e      	b.n	8001716 <FFT_Test+0x2ee>
 80016f8:	f005 fc5a 	bl	8006fb0 <fmodf>
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 80016fc:	9b02      	ldr	r3, [sp, #8]
		    	phase[i] = fmodf(phase[i] + PI, 2.0f * PI) - PI;
 80016fe:	ee30 0a48 	vsub.f32	s0, s0, s16
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 8001702:	3301      	adds	r3, #1
			previousShiftedPhase[i] = phase[i]; // save phase
 8001704:	9a03      	ldr	r2, [sp, #12]
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 8001706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		    	phase[i] = fmodf(phase[i] + PI, 2.0f * PI) - PI;
 800170a:	ed0b 0a01 	vstr	s0, [fp, #-4]
			previousShiftedPhase[i] = phase[i]; // save phase
 800170e:	ed02 0a01 	vstr	s0, [r2, #-4]
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 8001712:	f43f af30 	beq.w	8001576 <FFT_Test+0x14e>
			float phaseDifference = (shiftedFractionalBins[i] - (float)i) * 2.0f * PI / (float)FFT_TO_HOP_RATIO;// * HOP_SIZE/FFT_SAMPLES;
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	ecba 7a01 	vldmia	sl!, {s14}
		    	phase[i] = fmodf(phase[i] + PI, 2.0f * PI) - PI;
 800171e:	eef0 0a68 	vmov.f32	s1, s17
			float phaseDifference = (shiftedFractionalBins[i] - (float)i) * 2.0f * PI / (float)FFT_TO_HOP_RATIO;// * HOP_SIZE/FFT_SAMPLES;
 8001722:	eef8 6ae7 	vcvt.f32.s32	s13, s15
			phase[i] = previousShiftedPhase[i] + phaseDifference + 2.0f * PI * (float)i / (float)FFT_TO_HOP_RATIO;;// * HOP_SIZE / (float)FFT_SAMPLES;//
 8001726:	ecf2 7a01 	vldmia	r2!, {s15}
 800172a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800172e:	eee6 7a88 	vfma.f32	s15, s13, s16
			float phaseDifference = (shiftedFractionalBins[i] - (float)i) * 2.0f * PI / (float)FFT_TO_HOP_RATIO;// * HOP_SIZE/FFT_SAMPLES;
 8001732:	ee37 7a66 	vsub.f32	s14, s14, s13
			phase[i] = previousShiftedPhase[i] + phaseDifference + 2.0f * PI * (float)i / (float)FFT_TO_HOP_RATIO;;// * HOP_SIZE / (float)FFT_SAMPLES;//
 8001736:	eee7 7a08 	vfma.f32	s15, s14, s16
		    if (phase[i] >= 0)
 800173a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			phase[i] = previousShiftedPhase[i] + phaseDifference + 2.0f * PI * (float)i / (float)FFT_TO_HOP_RATIO;;// * HOP_SIZE / (float)FFT_SAMPLES;//
 800173e:	eceb 7a01 	vstmia	fp!, {s15}
		    	phase[i] = fmodf(phase[i] + PI, 2.0f * PI) - PI;
 8001742:	ee37 0a88 	vadd.f32	s0, s15, s16
		    if (phase[i] >= 0)
 8001746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174a:	dad5      	bge.n	80016f8 <FFT_Test+0x2d0>
		    	phase[i] = fmodf(phase[i] - PI, -2.0f * PI) + PI;
 800174c:	ee37 0ac8 	vsub.f32	s0, s15, s16
 8001750:	eef0 0a49 	vmov.f32	s1, s18
 8001754:	f005 fc2c 	bl	8006fb0 <fmodf>
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 8001758:	9b02      	ldr	r3, [sp, #8]
		    	phase[i] = fmodf(phase[i] - PI, -2.0f * PI) + PI;
 800175a:	ee30 0a08 	vadd.f32	s0, s0, s16
		for (int i = 0; i < (FFT_SAMPLES >> 1); i++){
 800175e:	3301      	adds	r3, #1
 8001760:	e7d0      	b.n	8001704 <FFT_Test+0x2dc>
 8001762:	bf00      	nop
 8001764:	20034368 	.word	0x20034368
 8001768:	20031360 	.word	0x20031360
 800176c:	2003436c 	.word	0x2003436c
 8001770:	20031368 	.word	0x20031368
 8001774:	2003438c 	.word	0x2003438c
 8001778:	20032368 	.word	0x20032368
 800177c:	20033368 	.word	0x20033368
 8001780:	40490fdb 	.word	0x40490fdb
 8001784:	c0c90fdb 	.word	0xc0c90fdb
 8001788:	3ea2f983 	.word	0x3ea2f983
 800178c:	40c90fdb 	.word	0x40c90fdb
 8001790:	20034bb8 	.word	0x20034bb8
 8001794:	20033368 	.word	0x20033368
 8001798:	20000620 	.word	0x20000620
 800179c:	200343b8 	.word	0x200343b8
 80017a0:	20032368 	.word	0x20032368
			  if(UART_Buffer_Is_Free()){
 80017a4:	f7fe ffa4 	bl	80006f0 <UART_Buffer_Is_Free>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	f43f af51 	beq.w	8001650 <FFT_Test+0x228>
				  sprintf((char*)buffer, "Slow\r\n");
 80017ae:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <FFT_Test+0x3a0>)
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <FFT_Test+0x3a4>)
 80017b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017b6:	0c0a      	lsrs	r2, r1, #16
 80017b8:	6018      	str	r0, [r3, #0]
 80017ba:	8099      	strh	r1, [r3, #4]
				  UART_Transmit(buffer, 6);
 80017bc:	4618      	mov	r0, r3
 80017be:	2106      	movs	r1, #6
				  sprintf((char*)buffer, "Slow\r\n");
 80017c0:	719a      	strb	r2, [r3, #6]
				  UART_Transmit(buffer, 6);
 80017c2:	f7fe ff6d 	bl	80006a0 <UART_Transmit>
}
 80017c6:	e743      	b.n	8001650 <FFT_Test+0x228>
 80017c8:	08007744 	.word	0x08007744
 80017cc:	200343a0 	.word	0x200343a0

080017d0 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
//	dataOut = lookUp[TIM12->CNT] >> 1;
//	dataOut = dataIn;
  	dataTx[1] = dataOut >> 8;
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <TIM6_DAC_IRQHandler+0x34>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	b29b      	uxth	r3, r3
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <TIM6_DAC_IRQHandler+0x38>)
 80017e2:	705a      	strb	r2, [r3, #1]
  	dataTx[2] = dataOut;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <TIM6_DAC_IRQHandler+0x34>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <TIM6_DAC_IRQHandler+0x38>)
 80017ee:	709a      	strb	r2, [r3, #2]

	// analog read/write
	SPI_Communicate(dataTx, dataRx, 3);
 80017f0:	2203      	movs	r2, #3
 80017f2:	4906      	ldr	r1, [pc, #24]	; (800180c <TIM6_DAC_IRQHandler+0x3c>)
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <TIM6_DAC_IRQHandler+0x38>)
 80017f6:	f7fe fec7 	bl	8000588 <SPI_Communicate>

	//clear flag
	TIM6->SR = 0;//&= ~TIM_SR_UIF;
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <TIM6_DAC_IRQHandler+0x40>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000060e 	.word	0x2000060e
 8001808:	20000610 	.word	0x20000610
 800180c:	20000618 	.word	0x20000618
 8001810:	40001000 	.word	0x40001000

08001814 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void){
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
//	TIM3->CNT = 0;
	dataIn = ((dataRx[0] << 8) + dataRx[1]) << 1;
 8001818:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <DMA2_Stream0_IRQHandler+0xac>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	b29b      	uxth	r3, r3
 8001822:	4a27      	ldr	r2, [pc, #156]	; (80018c0 <DMA2_Stream0_IRQHandler+0xac>)
 8001824:	7852      	ldrb	r2, [r2, #1]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	4413      	add	r3, r2
 800182a:	b29b      	uxth	r3, r3
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <DMA2_Stream0_IRQHandler+0xb0>)
 8001832:	801a      	strh	r2, [r3, #0]

//	 FFT
	if (effectNumber == 11){
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <DMA2_Stream0_IRQHandler+0xb4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b0b      	cmp	r3, #11
 800183a:	d133      	bne.n	80018a4 <DMA2_Stream0_IRQHandler+0x90>
		sampleBuffer[sampleBufferIndex] = dataIn;
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <DMA2_Stream0_IRQHandler+0xb8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a20      	ldr	r2, [pc, #128]	; (80018c4 <DMA2_Stream0_IRQHandler+0xb0>)
 8001842:	8812      	ldrh	r2, [r2, #0]
 8001844:	b291      	uxth	r1, r2
 8001846:	4a22      	ldr	r2, [pc, #136]	; (80018d0 <DMA2_Stream0_IRQHandler+0xbc>)
 8001848:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		dataOut = sampleBuffer[sampleBufferIndex + 2 * FFT_SAMPLES] + averageValue;
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <DMA2_Stream0_IRQHandler+0xb8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001854:	4a1e      	ldr	r2, [pc, #120]	; (80018d0 <DMA2_Stream0_IRQHandler+0xbc>)
 8001856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <DMA2_Stream0_IRQHandler+0xc0>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	4413      	add	r3, r2
 8001862:	b29a      	uxth	r2, r3
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <DMA2_Stream0_IRQHandler+0xc4>)
 8001866:	801a      	strh	r2, [r3, #0]

		sampleBuffer[sampleBufferIndex + 2 * FFT_SAMPLES] = 0; // clear sample
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <DMA2_Stream0_IRQHandler+0xb8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001870:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <DMA2_Stream0_IRQHandler+0xbc>)
 8001872:	2100      	movs	r1, #0
 8001874:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// set flag if sample index = FFT_SAMPLES * n / 2, n = 0,1,2,3
		if (!(sampleBufferIndex & (FFT_SAMPLES/2 - 1))){
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <DMA2_Stream0_IRQHandler+0xb8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <DMA2_Stream0_IRQHandler+0x76>
			startFFTFlag = 1;
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <DMA2_Stream0_IRQHandler+0xc8>)
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]
		}
		sampleBufferIndex++;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <DMA2_Stream0_IRQHandler+0xb8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <DMA2_Stream0_IRQHandler+0xb8>)
 8001892:	6013      	str	r3, [r2, #0]
		if (sampleBufferIndex >= (2 * FFT_SAMPLES)){
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <DMA2_Stream0_IRQHandler+0xb8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800189c:	d302      	bcc.n	80018a4 <DMA2_Stream0_IRQHandler+0x90>
		  sampleBufferIndex = 0;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <DMA2_Stream0_IRQHandler+0xb8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
		}
	}

	dataReadyFlag = 1;
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <DMA2_Stream0_IRQHandler+0xcc>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]

	//clear flag
	DMA2->LIFCR |= DMA_LIFCR_CTCIF0;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <DMA2_Stream0_IRQHandler+0xd0>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <DMA2_Stream0_IRQHandler+0xd0>)
 80018b0:	f043 0320 	orr.w	r3, r3, #32
 80018b4:	6093      	str	r3, [r2, #8]
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	20000618 	.word	0x20000618
 80018c4:	2000060c 	.word	0x2000060c
 80018c8:	2003437c 	.word	0x2003437c
 80018cc:	20031360 	.word	0x20031360
 80018d0:	20000620 	.word	0x20000620
 80018d4:	2003438c 	.word	0x2003438c
 80018d8:	2000060e 	.word	0x2000060e
 80018dc:	20034368 	.word	0x20034368
 80018e0:	20031364 	.word	0x20031364
 80018e4:	40026400 	.word	0x40026400

080018e8 <EXTI9_5_IRQHandler>:

	//clear flag
	DMA2->LIFCR |= DMA_LIFCR_CTCIF0;
}*/

void EXTI9_5_IRQHandler(void){
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
	effectNumber = (GPIOC->IDR >> 8) & 0x0F;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <EXTI9_5_IRQHandler+0x28>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	4a07      	ldr	r2, [pc, #28]	; (8001914 <EXTI9_5_IRQHandler+0x2c>)
 80018f8:	6013      	str	r3, [r2, #0]

	//clear flag
	EXTI->PR |= EXTI_PR_PR8;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <EXTI9_5_IRQHandler+0x30>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	4a06      	ldr	r2, [pc, #24]	; (8001918 <EXTI9_5_IRQHandler+0x30>)
 8001900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001904:	6153      	str	r3, [r2, #20]
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40020800 	.word	0x40020800
 8001914:	2003437c 	.word	0x2003437c
 8001918:	40013c00 	.word	0x40013c00

0800191c <Configure_MCP3561R>:

void Configure_MCP3561R(unsigned char *buffer, char readback){
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	70fb      	strb	r3, [r7, #3]
	  // configure ADC registers

	  dataTx[0] = 0x46; //01 0001 10 - command byte: write starting at config0
 8001928:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <Configure_MCP3561R+0xbc>)
 800192a:	2246      	movs	r2, #70	; 0x46
 800192c:	701a      	strb	r2, [r3, #0]
//	  dataTx[1] = 0xE3; // 1110 0011 - config 0: internal reference, start adc conversions
	  dataTx[1] = 0x63; // 0110 0011 - config 0: external reference, start adc conversions
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <Configure_MCP3561R+0xbc>)
 8001930:	2263      	movs	r2, #99	; 0x63
 8001932:	705a      	strb	r2, [r3, #1]
	  dataTx[2] = 0x00; // 0000 0000 - config 1: 16bit adc
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <Configure_MCP3561R+0xbc>)
 8001936:	2200      	movs	r2, #0
 8001938:	709a      	strb	r2, [r3, #2]
	  dataTx[3] = 0x89; // 1000 1001 - config 2: gain = 1; no auto zero
 800193a:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <Configure_MCP3561R+0xbc>)
 800193c:	2289      	movs	r2, #137	; 0x89
 800193e:	70da      	strb	r2, [r3, #3]
	  dataTx[4] = 0xC0; // 1100 0000 - config 3: continuous conversion, 24bit adc register, no calibration
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <Configure_MCP3561R+0xbc>)
 8001942:	22c0      	movs	r2, #192	; 0xc0
 8001944:	711a      	strb	r2, [r3, #4]
	  dataTx[5] = 0x77; // 0111 0111 - IRQ
 8001946:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <Configure_MCP3561R+0xbc>)
 8001948:	2277      	movs	r2, #119	; 0x77
 800194a:	715a      	strb	r2, [r3, #5]
	  dataTx[6] = 0x08; // 0000 1000 - Multiplexer: V+ = CH0, V- = GND
 800194c:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <Configure_MCP3561R+0xbc>)
 800194e:	2208      	movs	r2, #8
 8001950:	719a      	strb	r2, [r3, #6]


	  SPI_Communicate(dataTx, dataRx, 7);
 8001952:	2207      	movs	r2, #7
 8001954:	4921      	ldr	r1, [pc, #132]	; (80019dc <Configure_MCP3561R+0xc0>)
 8001956:	4820      	ldr	r0, [pc, #128]	; (80019d8 <Configure_MCP3561R+0xbc>)
 8001958:	f7fe fe16 	bl	8000588 <SPI_Communicate>

	  HAL_Delay(100);
 800195c:	2064      	movs	r0, #100	; 0x64
 800195e:	f000 fb9d 	bl	800209c <HAL_Delay>

	  GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <Configure_MCP3561R+0xc4>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <Configure_MCP3561R+0xc4>)
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	6193      	str	r3, [r2, #24]

	  // read back adc oncfig

	  if (readback){
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d02d      	beq.n	80019d0 <Configure_MCP3561R+0xb4>
		  dataTx[0] = 0x47; //01 0001 11 - command byte: read starting at config0
 8001974:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <Configure_MCP3561R+0xbc>)
 8001976:	2247      	movs	r2, #71	; 0x47
 8001978:	701a      	strb	r2, [r3, #0]

		  SPI_Communicate(dataTx, dataRx, 7);
 800197a:	2207      	movs	r2, #7
 800197c:	4917      	ldr	r1, [pc, #92]	; (80019dc <Configure_MCP3561R+0xc0>)
 800197e:	4816      	ldr	r0, [pc, #88]	; (80019d8 <Configure_MCP3561R+0xbc>)
 8001980:	f7fe fe02 	bl	8000588 <SPI_Communicate>

		  HAL_Delay(100);
 8001984:	2064      	movs	r0, #100	; 0x64
 8001986:	f000 fb89 	bl	800209c <HAL_Delay>

		  // Slave select high
		  GPIOA->BSRR |= (GPIO_BSRR_BS4);
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <Configure_MCP3561R+0xc4>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <Configure_MCP3561R+0xc4>)
 8001990:	f043 0310 	orr.w	r3, r3, #16
 8001994:	6193      	str	r3, [r2, #24]

		  for (int i = 0; i < 7; i++){
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e016      	b.n	80019ca <Configure_MCP3561R+0xae>
			  while(!UART_Buffer_Is_Free());
 800199c:	bf00      	nop
 800199e:	f7fe fea7 	bl	80006f0 <UART_Buffer_Is_Free>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0fa      	beq.n	800199e <Configure_MCP3561R+0x82>

			  sprintf((char*)buffer, "%3x\r\n", dataRx[i]);
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <Configure_MCP3561R+0xc0>)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	490b      	ldr	r1, [pc, #44]	; (80019e4 <Configure_MCP3561R+0xc8>)
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f003 f910 	bl	8004bdc <siprintf>
			  UART_Transmit(buffer, 5);
 80019bc:	2105      	movs	r1, #5
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe fe6e 	bl	80006a0 <UART_Transmit>
		  for (int i = 0; i < 7; i++){
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3301      	adds	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b06      	cmp	r3, #6
 80019ce:	dde5      	ble.n	800199c <Configure_MCP3561R+0x80>
		  }
	  }
}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000610 	.word	0x20000610
 80019dc:	20000618 	.word	0x20000618
 80019e0:	40020000 	.word	0x40020000
 80019e4:	0800774c 	.word	0x0800774c

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <Error_Handler+0x8>

080019f4 <GPIO_Setup>:
 */

#include "peripherals.h"


void GPIO_Setup(void){
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	 * NO - PG2 - Input
	 *
	 */

	// GPIO Clock Enable
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOAEN;
 80019f8:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <GPIO_Setup+0xc4>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	4a2e      	ldr	r2, [pc, #184]	; (8001ab8 <GPIO_Setup+0xc4>)
 80019fe:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 8001a02:	6313      	str	r3, [r2, #48]	; 0x30

	// Set Port Mode
	//				PA15 - AF            | PA7 - Analog      | PA6 - Analog      | PA5 - Analog      | PA4 - Output
	GPIOA->MODER |= GPIO_MODER_MODER15_1 | GPIO_MODER_MODER7 | GPIO_MODER_MODER6 | GPIO_MODER_MODER5 | GPIO_MODER_MODER4_0;
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <GPIO_Setup+0xc8>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	492c      	ldr	r1, [pc, #176]	; (8001abc <GPIO_Setup+0xc8>)
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <GPIO_Setup+0xcc>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
	//              PB5 - AF            | PB4 - AF            | PB3 - AF
	GPIOB->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER4_1 | GPIO_MODER_MODER3_1;
 8001a10:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <GPIO_Setup+0xd0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2b      	ldr	r2, [pc, #172]	; (8001ac4 <GPIO_Setup+0xd0>)
 8001a16:	f443 6328 	orr.w	r3, r3, #2688	; 0xa80
 8001a1a:	6013      	str	r3, [r2, #0]
	//				PC7 - AF
	GPIOC->MODER |= GPIO_MODER_MODER7_1 | GPIO_MODER_MODER6_0;
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <GPIO_Setup+0xd4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a29      	ldr	r2, [pc, #164]	; (8001ac8 <GPIO_Setup+0xd4>)
 8001a22:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
 8001a26:	6013      	str	r3, [r2, #0]
	//				PD15 - AF            | PD9 - AF            | PD0 - AF
	GPIOD->MODER |= GPIO_MODER_MODER15_1 | GPIO_MODER_MODER9_1 | GPIO_MODER_MODER8_1;
 8001a28:	4b28      	ldr	r3, [pc, #160]	; (8001acc <GPIO_Setup+0xd8>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4927      	ldr	r1, [pc, #156]	; (8001acc <GPIO_Setup+0xd8>)
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <GPIO_Setup+0xdc>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]

	// Set Alternate Function
	//               PA4 - AF5
	GPIOA->AFR[0] |= (5 << GPIO_AFRL_AFRL4_Pos);
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <GPIO_Setup+0xc8>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a20      	ldr	r2, [pc, #128]	; (8001abc <GPIO_Setup+0xc8>)
 8001a3a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001a3e:	6213      	str	r3, [r2, #32]
	//               PA15 - AF1
	GPIOA->AFR[1] |= (1 << GPIO_AFRH_AFRH7_Pos);
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <GPIO_Setup+0xc8>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <GPIO_Setup+0xc8>)
 8001a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	6253      	str	r3, [r2, #36]	; 0x24
	//               PB5 - AF5                  | PB4 - AF5                  | PB3 - AF5
	GPIOB->AFR[0] |= (5 << GPIO_AFRL_AFRL5_Pos) | (5 << GPIO_AFRL_AFRL4_Pos) | (5 << GPIO_AFRL_AFRL3_Pos);
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <GPIO_Setup+0xd0>)
 8001a4e:	6a1a      	ldr	r2, [r3, #32]
 8001a50:	491c      	ldr	r1, [pc, #112]	; (8001ac4 <GPIO_Setup+0xd0>)
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <GPIO_Setup+0xe0>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	620b      	str	r3, [r1, #32]
	//               PC7 - AF2
	GPIOC->AFR[0] |= (2 << GPIO_AFRL_AFRL7_Pos);
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <GPIO_Setup+0xd4>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4a1a      	ldr	r2, [pc, #104]	; (8001ac8 <GPIO_Setup+0xd4>)
 8001a5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a62:	6213      	str	r3, [r2, #32]
	//               PD15 - AF2                 | PD9 - AF7                  | PD8 - AF7
	GPIOD->AFR[1] |= (2 << GPIO_AFRH_AFRH7_Pos) | (7 << GPIO_AFRH_AFRH1_Pos) | (7 << GPIO_AFRH_AFRH0_Pos);
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <GPIO_Setup+0xd8>)
 8001a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a68:	4918      	ldr	r1, [pc, #96]	; (8001acc <GPIO_Setup+0xd8>)
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <GPIO_Setup+0xe4>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	624b      	str	r3, [r1, #36]	; 0x24
	// Set Output Type


	// Set Output Speed
	//                PB5 - Very high speed | PB4 - Very high speed | PB3 - Very high speed
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR5 | GPIO_OSPEEDR_OSPEEDR4 | GPIO_OSPEEDR_OSPEEDR3;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <GPIO_Setup+0xd0>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <GPIO_Setup+0xd0>)
 8001a76:	f443 637c 	orr.w	r3, r3, #4032	; 0xfc0
 8001a7a:	6093      	str	r3, [r2, #8]

	// Set Pull-up/pull-down
	//              PC11 - Pull-up       | PC10 - Pull-up       | PC9 - Pull-up       | PC8 - Pull-up
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR11_0 | GPIO_PUPDR_PUPDR10_0 | GPIO_PUPDR_PUPDR9_0 | GPIO_PUPDR_PUPDR8_0;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <GPIO_Setup+0xd4>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4a11      	ldr	r2, [pc, #68]	; (8001ac8 <GPIO_Setup+0xd4>)
 8001a82:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8001a86:	60d3      	str	r3, [r2, #12]
	//              PC11 - Pull-up
	GPIOG->PUPDR |= GPIO_PUPDR_PUPDR2_0;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <GPIO_Setup+0xe8>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a13      	ldr	r2, [pc, #76]	; (8001adc <GPIO_Setup+0xe8>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	60d3      	str	r3, [r2, #12]

	// SS high
	GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <GPIO_Setup+0xc8>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <GPIO_Setup+0xc8>)
 8001a9a:	f043 0310 	orr.w	r3, r3, #16
 8001a9e:	6193      	str	r3, [r2, #24]

	// PC6 low
	GPIOC->BSRR |= (GPIO_BSRR_BR6);
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <GPIO_Setup+0xd4>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <GPIO_Setup+0xd4>)
 8001aa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aaa:	6193      	str	r3, [r2, #24]

}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	8000fd00 	.word	0x8000fd00
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	40020c00 	.word	0x40020c00
 8001ad0:	800a0000 	.word	0x800a0000
 8001ad4:	00555000 	.word	0x00555000
 8001ad8:	20000077 	.word	0x20000077
 8001adc:	40021800 	.word	0x40021800

08001ae0 <TIMER4_Setup>:




// Pulse LED
void TIMER4_Setup(void){
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
	// Timer4 Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <TIMER4_Setup+0x70>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <TIMER4_Setup+0x70>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6413      	str	r3, [r2, #64]	; 0x40

	// frequency = CLK/(PSC + 1)/(ARR + 1)
	//Duty_Cycle = CCR1/(ARR + 1);
	TIM4->PSC = 10800-1;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <TIMER4_Setup+0x74>)
 8001af2:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 10000-1;
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <TIMER4_Setup+0x74>)
 8001afa:	f242 720f 	movw	r2, #9999	; 0x270f
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR4 = 5000;
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <TIMER4_Setup+0x74>)
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40

	// Update registers
	TIM4->EGR |= TIM_EGR_UG;
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <TIMER4_Setup+0x74>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <TIMER4_Setup+0x74>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6153      	str	r3, [r2, #20]

	//             Enable PWM Mode 1            | Enable CCR4 preload register
	TIM4->CCMR2 |= (0x06 << TIM_CCMR2_OC4M_Pos) | TIM_CCMR2_OC4PE; //
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <TIMER4_Setup+0x74>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <TIMER4_Setup+0x74>)
 8001b1a:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8001b1e:	61d3      	str	r3, [r2, #28]

	//           ARR preload  | enable counter
	TIM4->CR1 |= TIM_CR1_ARPE | TIM_CR1_CEN;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <TIMER4_Setup+0x74>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <TIMER4_Setup+0x74>)
 8001b26:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 8001b2a:	6013      	str	r3, [r2, #0]

	//           update as TRGO
	TIM4->CR2 |= (2 << TIM_CR2_MMS_Pos);
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <TIMER4_Setup+0x74>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <TIMER4_Setup+0x74>)
 8001b32:	f043 0320 	orr.w	r3, r3, #32
 8001b36:	6053      	str	r3, [r2, #4]

	//            Output on CH4
	TIM4->CCER |= TIM_CCER_CC4E;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <TIMER4_Setup+0x74>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <TIMER4_Setup+0x74>)
 8001b3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b42:	6213      	str	r3, [r2, #32]

//	TIM4->BDTR |= TIM_BDTR_MOE;
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40000800 	.word	0x40000800

08001b58 <TIMER5_Setup>:


// LFO Prescaler
void TIMER5_Setup(void){
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
	// Timer5  Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <TIMER5_Setup+0x40>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <TIMER5_Setup+0x40>)
 8001b62:	f043 0308 	orr.w	r3, r3, #8
 8001b66:	6413      	str	r3, [r2, #64]	; 0x40

	// update event at 1Mhz
	TIM5->PSC = 54-1;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <TIMER5_Setup+0x44>)
 8001b6a:	2235      	movs	r2, #53	; 0x35
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->ARR = 2-1;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <TIMER5_Setup+0x44>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c

	//           update as TRGO
	TIM5->CR2 |= (2 << TIM_CR2_MMS_Pos);
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <TIMER5_Setup+0x44>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <TIMER5_Setup+0x44>)
 8001b7a:	f043 0320 	orr.w	r3, r3, #32
 8001b7e:	6053      	str	r3, [r2, #4]

	//           enable timer
	TIM5->CR1 |= TIM_CR1_CEN;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <TIMER5_Setup+0x44>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <TIMER5_Setup+0x44>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40000c00 	.word	0x40000c00

08001ba0 <TIMER6_Setup>:


// Sampling timer
void TIMER6_Setup(void){
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
	// Timer6  Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <TIMER6_Setup+0x58>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	4a13      	ldr	r2, [pc, #76]	; (8001bf8 <TIMER6_Setup+0x58>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	6413      	str	r3, [r2, #64]	; 0x40

	// f = 32khz
	TIM6->PSC = 2-1;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <TIMER6_Setup+0x5c>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = 1688-1;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <TIMER6_Setup+0x5c>)
 8001bb8:	f240 6297 	movw	r2, #1687	; 0x697
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c

//	TIM6->EGR |= TIM_EGR_UG;

	//           update as TRGO
	TIM6->CR2 |= (2 << TIM_CR2_MMS_Pos);
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <TIMER6_Setup+0x5c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <TIMER6_Setup+0x5c>)
 8001bc4:	f043 0320 	orr.w	r3, r3, #32
 8001bc8:	6053      	str	r3, [r2, #4]

	// clear flag
	TIM6->SR &= ~TIM_SR_UIF;
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <TIMER6_Setup+0x5c>)
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <TIMER6_Setup+0x5c>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6113      	str	r3, [r2, #16]

	TIM6->DIER |= TIM_DIER_UIE;
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <TIMER6_Setup+0x5c>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <TIMER6_Setup+0x5c>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	60d3      	str	r3, [r2, #12]

//	NVIC_SetPriority(TIM6_DAC_IRQn, 0);
//	NVIC_EnableIRQ(TIM6_DAC_IRQn);

	//           enable timer
	TIM6->CR1 |= TIM_CR1_CEN;
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <TIMER6_Setup+0x5c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <TIMER6_Setup+0x5c>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6013      	str	r3, [r2, #0]

}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40001000 	.word	0x40001000

08001c00 <TIMER12_Setup>:

// LFO for effects - count value is index for sin lookup table
void TIMER12_Setup(void){
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
	// Timer12 Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_TIM12EN;
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <TIMER12_Setup+0x40>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <TIMER12_Setup+0x40>)
 8001c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40

	TIM12->ARR = 255;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <TIMER12_Setup+0x44>)
 8001c12:	22ff      	movs	r2, #255	; 0xff
 8001c14:	62da      	str	r2, [r3, #44]	; 0x2c

	// TIM5 used as a clock source (1 Mhz)
	//             timer 5 TRGI          | external clock mode
	TIM12->SMCR |= (1 << TIM_SMCR_TS_Pos) | (7 << TIM_SMCR_SMS_Pos);
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <TIMER12_Setup+0x44>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <TIMER12_Setup+0x44>)
 8001c1c:	f043 0317 	orr.w	r3, r3, #23
 8001c20:	6093      	str	r3, [r2, #8]


	TIM12->PSC = 40;//8000
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <TIMER12_Setup+0x44>)
 8001c24:	2228      	movs	r2, #40	; 0x28
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28

	//            enable timer
	TIM12->CR1 |= TIM_CR1_CEN;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <TIMER12_Setup+0x44>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <TIMER12_Setup+0x44>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40001800 	.word	0x40001800

08001c48 <RNG_Setup>:


void RNG_Setup(void){
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
	// RNG Clock Enable
	RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <RNG_Setup+0x28>)
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c50:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <RNG_Setup+0x28>)
 8001c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c56:	6353      	str	r3, [r2, #52]	; 0x34

	//         enalbe RNG
	RNG->CR |= RNG_CR_RNGEN;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <RNG_Setup+0x2c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <RNG_Setup+0x2c>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	50060800 	.word	0x50060800

08001c78 <ADC_Setup>:
	// enable corresponding NVIC
	NVIC_EnableIRQ(EXTI9_5_IRQn);
}


void ADC_Setup(long adcDataAdress, long adcDataAdress2){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
//	ADC1->CR2 |= ADC_CR2_SWSTART;



	// ADC  Clock Enable
	RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <ADC_Setup+0x64>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <ADC_Setup+0x64>)
 8001c88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44

	ADC2->CR2 |= ADC_CR2_ADON;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <ADC_Setup+0x68>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <ADC_Setup+0x68>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6093      	str	r3, [r2, #8]

	ADC_DMA_Setup(adcDataAdress, adcDataAdress2);
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f823 	bl	8001ce8 <ADC_DMA_Setup>

	//             2 conversions
	ADC2->SQR1 |= ((2 - 1) << ADC_SQR1_L_Pos);
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <ADC_Setup+0x68>)
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <ADC_Setup+0x68>)
 8001ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cac:	62d3      	str	r3, [r2, #44]	; 0x2c

	//            conversion 2: ADC7: PA7 | conversion 1: ADC6: PA6
	ADC2->SQR3 |= (7 << ADC_SQR3_SQ2_Pos) | (6 << ADC_SQR3_SQ1_Pos);
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <ADC_Setup+0x68>)
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <ADC_Setup+0x68>)
 8001cb4:	f043 03e6 	orr.w	r3, r3, #230	; 0xe6
 8001cb8:	6353      	str	r3, [r2, #52]	; 0x34

	//             480 cycles ADC7           | 480 cycles ADC6
	ADC2->SMPR1 |= (7 << ADC_SMPR2_SMP7_Pos) | (7 << ADC_SMPR2_SMP6_Pos);
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <ADC_Setup+0x68>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <ADC_Setup+0x68>)
 8001cc0:	f443 037c 	orr.w	r3, r3, #16515072	; 0xfc0000
 8001cc4:	60d3      	str	r3, [r2, #12]

	//           Hardware trigger | external trigger TIM6 TRGO   | left align    | circular DMA | DMA enable
	ADC2->CR2 |=  ADC_CR2_EXTEN_0  | (0xD << ADC_CR2_EXTSEL_Pos) | ADC_CR2_ALIGN | ADC_CR2_DDS  | ADC_CR2_DMA;
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <ADC_Setup+0x68>)
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	4905      	ldr	r1, [pc, #20]	; (8001ce0 <ADC_Setup+0x68>)
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <ADC_Setup+0x6c>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
//	ADC2->CR2 |=  ADC_CR2_EXTEN_0  | (0xC << ADC_CR2_EXTSEL_Pos) | ADC_CR2_ALIGN | ADC_CR2_DDS | ADC_CR2_DMA;

	//           Start ADC Conversion
//	ADC2->CR2 |= ADC_CR2_SWSTART;

}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40012100 	.word	0x40012100
 8001ce4:	1d000b00 	.word	0x1d000b00

08001ce8 <ADC_DMA_Setup>:


void ADC_DMA_Setup(long adcDataAdress, long adcDataAdress2){
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
	// DMA Clock Enable
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMA2EN;
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <ADC_DMA_Setup+0x40>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <ADC_DMA_Setup+0x40>)
 8001cf8:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30


	// ADC2 - Stream 3 - Channel 1
	DMA2_Stream2->PAR = (long)&(ADC2->DR);
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <ADC_DMA_Setup+0x44>)
 8001d00:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <ADC_DMA_Setup+0x48>)
 8001d02:	609a      	str	r2, [r3, #8]
	DMA2_Stream2->M0AR = adcDataAdress;
 8001d04:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <ADC_DMA_Setup+0x44>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60d3      	str	r3, [r2, #12]
//	DMA2_Stream2->M1AR = adcDataAdress2;
	DMA2_Stream2->NDTR = 2;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <ADC_DMA_Setup+0x44>)
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	605a      	str	r2, [r3, #4]

	//                  channel 1                 | medium proir  | mmry inc      | 16 bit transfer  | 16 bit transfer  | circular mode | enable
	DMA2_Stream2->CR |= (1 << DMA_SxCR_CHSEL_Pos) | DMA_SxCR_PL_0 | DMA_SxCR_MINC | DMA_SxCR_MSIZE_0 | DMA_SxCR_PSIZE_0 | DMA_SxCR_CIRC | DMA_SxCR_EN;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <ADC_DMA_Setup+0x44>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4905      	ldr	r1, [pc, #20]	; (8001d2c <ADC_DMA_Setup+0x44>)
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <ADC_DMA_Setup+0x4c>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]

}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40026440 	.word	0x40026440
 8001d30:	4001214c 	.word	0x4001214c
 8001d34:	02012d01 	.word	0x02012d01

08001d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_MspInit+0x44>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <HAL_MspInit+0x44>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_MspInit+0x44>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_MspInit+0x44>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <HAL_MspInit+0x44>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_MspInit+0x44>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <NMI_Handler+0x4>

08001d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <HardFault_Handler+0x4>

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <MemManage_Handler+0x4>

08001d98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd6:	f000 f941 	bl	800205c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
	return 1;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <_kill>:

int _kill(int pid, int sig)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001df8:	f002 fa84 	bl	8004304 <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2216      	movs	r2, #22
 8001e00:	601a      	str	r2, [r3, #0]
	return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_exit>:

void _exit (int status)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffe7 	bl	8001dee <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <_exit+0x12>

08001e24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	e00a      	b.n	8001e4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e36:	f3af 8000 	nop.w
 8001e3a:	4601      	mov	r1, r0
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	60ba      	str	r2, [r7, #8]
 8001e42:	b2ca      	uxtb	r2, r1
 8001e44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dbf0      	blt.n	8001e36 <_read+0x12>
	}

return len;
 8001e54:	687b      	ldr	r3, [r7, #4]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e009      	b.n	8001e84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	60ba      	str	r2, [r7, #8]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbf1      	blt.n	8001e70 <_write+0x12>
	}
	return len;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_close>:

int _close(int file)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ebe:	605a      	str	r2, [r3, #4]
	return 0;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <_isatty>:

int _isatty(int file)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
	return 0;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f002 f9e8 	bl	8004304 <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20080000 	.word	0x20080000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	200353b8 	.word	0x200353b8
 8001f68:	200353d0 	.word	0x200353d0

08001f6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <SystemInit+0x20>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <SystemInit+0x20>)
 8001f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f94:	480d      	ldr	r0, [pc, #52]	; (8001fcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f96:	490e      	ldr	r1, [pc, #56]	; (8001fd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f98:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fac:	4c0b      	ldr	r4, [pc, #44]	; (8001fdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fba:	f7ff ffd7 	bl	8001f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f002 f9a7 	bl	8004310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc2:	f7fe fbef 	bl	80007a4 <main>
  bx  lr    
 8001fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fc8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	200005f0 	.word	0x200005f0
  ldr r2, =_sidata
 8001fd4:	0801b7c4 	.word	0x0801b7c4
  ldr r2, =_sbss
 8001fd8:	200005f0 	.word	0x200005f0
  ldr r4, =_ebss
 8001fdc:	200353d0 	.word	0x200353d0

08001fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC_IRQHandler>

08001fe2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe6:	2003      	movs	r0, #3
 8001fe8:	f000 f92e 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f000 f805 	bl	8001ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff2:	f7ff fea1 	bl	8001d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_InitTick+0x54>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_InitTick+0x58>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002012:	fbb3 f3f1 	udiv	r3, r3, r1
 8002016:	fbb2 f3f3 	udiv	r3, r2, r3
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f93b 	bl	8002296 <HAL_SYSTICK_Config>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e00e      	b.n	8002048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b0f      	cmp	r3, #15
 800202e:	d80a      	bhi.n	8002046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002030:	2200      	movs	r2, #0
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002038:	f000 f911 	bl	800225e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <HAL_InitTick+0x5c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e000      	b.n	8002048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000414 	.word	0x20000414
 8002054:	2000041c 	.word	0x2000041c
 8002058:	20000418 	.word	0x20000418

0800205c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_IncTick+0x20>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x24>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <HAL_IncTick+0x24>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	2000041c 	.word	0x2000041c
 8002080:	200353bc 	.word	0x200353bc

08002084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <HAL_GetTick+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	200353bc 	.word	0x200353bc

0800209c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff ffee 	bl	8002084 <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020b4:	d005      	beq.n	80020c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_Delay+0x44>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020c2:	bf00      	nop
 80020c4:	f7ff ffde 	bl	8002084 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d8f7      	bhi.n	80020c4 <HAL_Delay+0x28>
  {
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000041c 	.word	0x2000041c

080020e4 <__NVIC_SetPriorityGrouping>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <__NVIC_SetPriorityGrouping+0x40>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 800210e:	4313      	orrs	r3, r2
 8002110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002112:	4a04      	ldr	r2, [pc, #16]	; (8002124 <__NVIC_SetPriorityGrouping+0x40>)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	60d3      	str	r3, [r2, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00
 8002128:	05fa0000 	.word	0x05fa0000

0800212c <__NVIC_GetPriorityGrouping>:
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_SetPriority>:
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	490c      	ldr	r1, [pc, #48]	; (8002194 <__NVIC_SetPriority+0x4c>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <__NVIC_SetPriority+0x50>)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3b04      	subs	r3, #4
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	4313      	orrs	r3, r2
         );
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002228:	f7ff ff8e 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff47 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002270:	f7ff ff5c 	bl	800212c <__NVIC_GetPriorityGrouping>
 8002274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff ff8e 	bl	800219c <NVIC_EncodePriority>
 8002280:	4602      	mov	r2, r0
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff5d 	bl	8002148 <__NVIC_SetPriority>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffb0 	bl	8002204 <SysTick_Config>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	; 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	e175      	b.n	80025bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022d0:	2201      	movs	r2, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f040 8164 	bne.w	80025b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d005      	beq.n	8002306 <HAL_GPIO_Init+0x56>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d130      	bne.n	8002368 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800233c:	2201      	movs	r2, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 0201 	and.w	r2, r3, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b03      	cmp	r3, #3
 8002372:	d017      	beq.n	80023a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d123      	bne.n	80023f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	220f      	movs	r2, #15
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	08da      	lsrs	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3208      	adds	r2, #8
 80023f2:	69b9      	ldr	r1, [r7, #24]
 80023f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0203 	and.w	r2, r3, #3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80be 	beq.w	80025b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	4b66      	ldr	r3, [pc, #408]	; (80025d4 <HAL_GPIO_Init+0x324>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	4a65      	ldr	r2, [pc, #404]	; (80025d4 <HAL_GPIO_Init+0x324>)
 8002440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002444:	6453      	str	r3, [r2, #68]	; 0x44
 8002446:	4b63      	ldr	r3, [pc, #396]	; (80025d4 <HAL_GPIO_Init+0x324>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002452:	4a61      	ldr	r2, [pc, #388]	; (80025d8 <HAL_GPIO_Init+0x328>)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_GPIO_Init+0x32c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d037      	beq.n	80024ee <HAL_GPIO_Init+0x23e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a57      	ldr	r2, [pc, #348]	; (80025e0 <HAL_GPIO_Init+0x330>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d031      	beq.n	80024ea <HAL_GPIO_Init+0x23a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a56      	ldr	r2, [pc, #344]	; (80025e4 <HAL_GPIO_Init+0x334>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d02b      	beq.n	80024e6 <HAL_GPIO_Init+0x236>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a55      	ldr	r2, [pc, #340]	; (80025e8 <HAL_GPIO_Init+0x338>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d025      	beq.n	80024e2 <HAL_GPIO_Init+0x232>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a54      	ldr	r2, [pc, #336]	; (80025ec <HAL_GPIO_Init+0x33c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01f      	beq.n	80024de <HAL_GPIO_Init+0x22e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a53      	ldr	r2, [pc, #332]	; (80025f0 <HAL_GPIO_Init+0x340>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d019      	beq.n	80024da <HAL_GPIO_Init+0x22a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a52      	ldr	r2, [pc, #328]	; (80025f4 <HAL_GPIO_Init+0x344>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_GPIO_Init+0x226>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a51      	ldr	r2, [pc, #324]	; (80025f8 <HAL_GPIO_Init+0x348>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00d      	beq.n	80024d2 <HAL_GPIO_Init+0x222>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a50      	ldr	r2, [pc, #320]	; (80025fc <HAL_GPIO_Init+0x34c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <HAL_GPIO_Init+0x21e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4f      	ldr	r2, [pc, #316]	; (8002600 <HAL_GPIO_Init+0x350>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_GPIO_Init+0x21a>
 80024c6:	2309      	movs	r3, #9
 80024c8:	e012      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024ca:	230a      	movs	r3, #10
 80024cc:	e010      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024ce:	2308      	movs	r3, #8
 80024d0:	e00e      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024d2:	2307      	movs	r3, #7
 80024d4:	e00c      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024d6:	2306      	movs	r3, #6
 80024d8:	e00a      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024da:	2305      	movs	r3, #5
 80024dc:	e008      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024de:	2304      	movs	r3, #4
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024e2:	2303      	movs	r3, #3
 80024e4:	e004      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e002      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024ee:	2300      	movs	r3, #0
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	f002 0203 	and.w	r2, r2, #3
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	4093      	lsls	r3, r2
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002500:	4935      	ldr	r1, [pc, #212]	; (80025d8 <HAL_GPIO_Init+0x328>)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_GPIO_Init+0x354>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002532:	4a34      	ldr	r2, [pc, #208]	; (8002604 <HAL_GPIO_Init+0x354>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002538:	4b32      	ldr	r3, [pc, #200]	; (8002604 <HAL_GPIO_Init+0x354>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800255c:	4a29      	ldr	r2, [pc, #164]	; (8002604 <HAL_GPIO_Init+0x354>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <HAL_GPIO_Init+0x354>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002586:	4a1f      	ldr	r2, [pc, #124]	; (8002604 <HAL_GPIO_Init+0x354>)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <HAL_GPIO_Init+0x354>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <HAL_GPIO_Init+0x354>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3301      	adds	r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	2b0f      	cmp	r3, #15
 80025c0:	f67f ae86 	bls.w	80022d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40013800 	.word	0x40013800
 80025dc:	40020000 	.word	0x40020000
 80025e0:	40020400 	.word	0x40020400
 80025e4:	40020800 	.word	0x40020800
 80025e8:	40020c00 	.word	0x40020c00
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40021400 	.word	0x40021400
 80025f4:	40021800 	.word	0x40021800
 80025f8:	40021c00 	.word	0x40021c00
 80025fc:	40022000 	.word	0x40022000
 8002600:	40022400 	.word	0x40022400
 8002604:	40013c00 	.word	0x40013c00

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264a:	6013      	str	r3, [r2, #0]
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40007000 	.word	0x40007000

0800265c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800268a:	f7ff fcfb 	bl	8002084 <HAL_GetTick>
 800268e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002690:	e009      	b.n	80026a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002692:	f7ff fcf7 	bl	8002084 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a0:	d901      	bls.n	80026a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e022      	b.n	80026ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b2:	d1ee      	bne.n	8002692 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026c0:	f7ff fce0 	bl	8002084 <HAL_GetTick>
 80026c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026c6:	e009      	b.n	80026dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026c8:	f7ff fcdc 	bl	8002084 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d6:	d901      	bls.n	80026dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e007      	b.n	80026ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026e8:	d1ee      	bne.n	80026c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40007000 	.word	0x40007000

080026fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002704:	2300      	movs	r3, #0
 8002706:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e29b      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8087 	beq.w	800282e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002720:	4b96      	ldr	r3, [pc, #600]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	2b04      	cmp	r3, #4
 800272a:	d00c      	beq.n	8002746 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272c:	4b93      	ldr	r3, [pc, #588]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b08      	cmp	r3, #8
 8002736:	d112      	bne.n	800275e <HAL_RCC_OscConfig+0x62>
 8002738:	4b90      	ldr	r3, [pc, #576]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002744:	d10b      	bne.n	800275e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002746:	4b8d      	ldr	r3, [pc, #564]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d06c      	beq.n	800282c <HAL_RCC_OscConfig+0x130>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d168      	bne.n	800282c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e275      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002766:	d106      	bne.n	8002776 <HAL_RCC_OscConfig+0x7a>
 8002768:	4b84      	ldr	r3, [pc, #528]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a83      	ldr	r2, [pc, #524]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800276e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	e02e      	b.n	80027d4 <HAL_RCC_OscConfig+0xd8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0x9c>
 800277e:	4b7f      	ldr	r3, [pc, #508]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a7e      	ldr	r2, [pc, #504]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b7c      	ldr	r3, [pc, #496]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a7b      	ldr	r2, [pc, #492]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e01d      	b.n	80027d4 <HAL_RCC_OscConfig+0xd8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0xc0>
 80027a2:	4b76      	ldr	r3, [pc, #472]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a75      	ldr	r2, [pc, #468]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b73      	ldr	r3, [pc, #460]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a72      	ldr	r2, [pc, #456]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0xd8>
 80027bc:	4b6f      	ldr	r3, [pc, #444]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a6e      	ldr	r2, [pc, #440]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b6c      	ldr	r3, [pc, #432]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a6b      	ldr	r2, [pc, #428]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d013      	beq.n	8002804 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7ff fc52 	bl	8002084 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e4:	f7ff fc4e 	bl	8002084 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	; 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e229      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	4b61      	ldr	r3, [pc, #388]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0xe8>
 8002802:	e014      	b.n	800282e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7ff fc3e 	bl	8002084 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800280c:	f7ff fc3a 	bl	8002084 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e215      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281e:	4b57      	ldr	r3, [pc, #348]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x110>
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d069      	beq.n	800290e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800283a:	4b50      	ldr	r3, [pc, #320]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002846:	4b4d      	ldr	r3, [pc, #308]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b08      	cmp	r3, #8
 8002850:	d11c      	bne.n	800288c <HAL_RCC_OscConfig+0x190>
 8002852:	4b4a      	ldr	r3, [pc, #296]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d116      	bne.n	800288c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_RCC_OscConfig+0x17a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e1e9      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002876:	4b41      	ldr	r3, [pc, #260]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	493d      	ldr	r1, [pc, #244]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288a:	e040      	b.n	800290e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d023      	beq.n	80028dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002894:	4b39      	ldr	r3, [pc, #228]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a38      	ldr	r2, [pc, #224]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7ff fbf0 	bl	8002084 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a8:	f7ff fbec 	bl	8002084 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e1c7      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b30      	ldr	r3, [pc, #192]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c6:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4929      	ldr	r1, [pc, #164]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
 80028da:	e018      	b.n	800290e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028dc:	4b27      	ldr	r3, [pc, #156]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a26      	ldr	r2, [pc, #152]	; (800297c <HAL_RCC_OscConfig+0x280>)
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7ff fbcc 	bl	8002084 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f0:	f7ff fbc8 	bl	8002084 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1a3      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d038      	beq.n	800298c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d019      	beq.n	8002956 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002922:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002926:	4a15      	ldr	r2, [pc, #84]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7ff fba9 	bl	8002084 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002936:	f7ff fba5 	bl	8002084 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e180      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800294a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x23a>
 8002954:	e01a      	b.n	800298c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_OscConfig+0x280>)
 8002958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_OscConfig+0x280>)
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002962:	f7ff fb8f 	bl	8002084 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002968:	e00a      	b.n	8002980 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296a:	f7ff fb8b 	bl	8002084 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d903      	bls.n	8002980 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e166      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
 800297c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	4b92      	ldr	r3, [pc, #584]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ee      	bne.n	800296a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80a4 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299a:	4b8c      	ldr	r3, [pc, #560]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10d      	bne.n	80029c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	4b89      	ldr	r3, [pc, #548]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	4a88      	ldr	r2, [pc, #544]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
 80029b2:	4b86      	ldr	r3, [pc, #536]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029be:	2301      	movs	r3, #1
 80029c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c2:	4b83      	ldr	r3, [pc, #524]	; (8002bd0 <HAL_RCC_OscConfig+0x4d4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d118      	bne.n	8002a00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80029ce:	4b80      	ldr	r3, [pc, #512]	; (8002bd0 <HAL_RCC_OscConfig+0x4d4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a7f      	ldr	r2, [pc, #508]	; (8002bd0 <HAL_RCC_OscConfig+0x4d4>)
 80029d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029da:	f7ff fb53 	bl	8002084 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e2:	f7ff fb4f 	bl	8002084 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b64      	cmp	r3, #100	; 0x64
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e12a      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f4:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_RCC_OscConfig+0x4d4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x31a>
 8002a08:	4b70      	ldr	r3, [pc, #448]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a6f      	ldr	r2, [pc, #444]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6713      	str	r3, [r2, #112]	; 0x70
 8002a14:	e02d      	b.n	8002a72 <HAL_RCC_OscConfig+0x376>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x33c>
 8002a1e:	4b6b      	ldr	r3, [pc, #428]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	4a6a      	ldr	r2, [pc, #424]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2a:	4b68      	ldr	r3, [pc, #416]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a67      	ldr	r2, [pc, #412]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
 8002a36:	e01c      	b.n	8002a72 <HAL_RCC_OscConfig+0x376>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCC_OscConfig+0x35e>
 8002a40:	4b62      	ldr	r3, [pc, #392]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a61      	ldr	r2, [pc, #388]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4c:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a5e      	ldr	r2, [pc, #376]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
 8002a58:	e00b      	b.n	8002a72 <HAL_RCC_OscConfig+0x376>
 8002a5a:	4b5c      	ldr	r3, [pc, #368]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a5b      	ldr	r2, [pc, #364]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a6c:	f023 0304 	bic.w	r3, r3, #4
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d015      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7a:	f7ff fb03 	bl	8002084 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a80:	e00a      	b.n	8002a98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7ff faff 	bl	8002084 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e0d8      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a98:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0ee      	beq.n	8002a82 <HAL_RCC_OscConfig+0x386>
 8002aa4:	e014      	b.n	8002ad0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa6:	f7ff faed 	bl	8002084 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f7ff fae9 	bl	8002084 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e0c2      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac4:	4b41      	ldr	r3, [pc, #260]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ee      	bne.n	8002aae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ad0:	7dfb      	ldrb	r3, [r7, #23]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d105      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a3c      	ldr	r2, [pc, #240]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 80ae 	beq.w	8002c48 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aec:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d06d      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d14b      	bne.n	8002b98 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b00:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a31      	ldr	r2, [pc, #196]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7ff faba 	bl	8002084 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7ff fab6 	bl	8002084 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e091      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69da      	ldr	r2, [r3, #28]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	019b      	lsls	r3, r3, #6
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	071b      	lsls	r3, r3, #28
 8002b5e:	491b      	ldr	r1, [pc, #108]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7ff fa88 	bl	8002084 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7ff fa84 	bl	8002084 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e05f      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x47c>
 8002b96:	e057      	b.n	8002c48 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7ff fa6e 	bl	8002084 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7ff fa6a 	bl	8002084 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e045      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <HAL_RCC_OscConfig+0x4d0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x4b0>
 8002bca:	e03d      	b.n	8002c48 <HAL_RCC_OscConfig+0x54c>
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002bd4:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <HAL_RCC_OscConfig+0x558>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d030      	beq.n	8002c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d129      	bne.n	8002c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d122      	bne.n	8002c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c04:	4013      	ands	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d119      	bne.n	8002c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	085b      	lsrs	r3, r3, #1
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d10f      	bne.n	8002c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800

08002c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0d0      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d910      	bls.n	8002ca0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b67      	ldr	r3, [pc, #412]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 020f 	bic.w	r2, r3, #15
 8002c86:	4965      	ldr	r1, [pc, #404]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b63      	ldr	r3, [pc, #396]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0b8      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb8:	4b59      	ldr	r3, [pc, #356]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4a58      	ldr	r2, [pc, #352]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd0:	4b53      	ldr	r3, [pc, #332]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a52      	ldr	r2, [pc, #328]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cdc:	4b50      	ldr	r3, [pc, #320]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	494d      	ldr	r1, [pc, #308]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d040      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d115      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e07f      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e073      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e06b      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b39      	ldr	r3, [pc, #228]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4936      	ldr	r1, [pc, #216]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4c:	f7ff f99a 	bl	8002084 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7ff f996 	bl	8002084 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e053      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d210      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 020f 	bic.w	r2, r3, #15
 8002d92:	4922      	ldr	r1, [pc, #136]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e032      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db8:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4916      	ldr	r1, [pc, #88]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dd6:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	490e      	ldr	r1, [pc, #56]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dea:	f000 f821 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002dee:	4602      	mov	r2, r0
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	490a      	ldr	r1, [pc, #40]	; (8002e24 <HAL_RCC_ClockConfig+0x1cc>)
 8002dfc:	5ccb      	ldrb	r3, [r1, r3]
 8002dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002e02:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <HAL_RCC_ClockConfig+0x1d0>)
 8002e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_RCC_ClockConfig+0x1d4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f8f6 	bl	8001ffc <HAL_InitTick>

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023c00 	.word	0x40023c00
 8002e20:	40023800 	.word	0x40023800
 8002e24:	08007754 	.word	0x08007754
 8002e28:	20000414 	.word	0x20000414
 8002e2c:	20000418 	.word	0x20000418

08002e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e34:	b094      	sub	sp, #80	; 0x50
 8002e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e40:	2300      	movs	r3, #0
 8002e42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e48:	4b79      	ldr	r3, [pc, #484]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d00d      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x40>
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	f200 80e1 	bhi.w	800301c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e62:	e0db      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b73      	ldr	r3, [pc, #460]	; (8003034 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e68:	e0db      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e6a:	4b73      	ldr	r3, [pc, #460]	; (8003038 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e6e:	e0d8      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e70:	4b6f      	ldr	r3, [pc, #444]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e7a:	4b6d      	ldr	r3, [pc, #436]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e86:	4b6a      	ldr	r3, [pc, #424]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	462b      	mov	r3, r5
 8002ea6:	f04f 0000 	mov.w	r0, #0
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	0159      	lsls	r1, r3, #5
 8002eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb4:	0150      	lsls	r0, r2, #5
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4621      	mov	r1, r4
 8002ebc:	1a51      	subs	r1, r2, r1
 8002ebe:	6139      	str	r1, [r7, #16]
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	018b      	lsls	r3, r1, #6
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ede:	4651      	mov	r1, sl
 8002ee0:	018a      	lsls	r2, r1, #6
 8002ee2:	4651      	mov	r1, sl
 8002ee4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee8:	4659      	mov	r1, fp
 8002eea:	eb63 0901 	sbc.w	r9, r3, r1
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f02:	4690      	mov	r8, r2
 8002f04:	4699      	mov	r9, r3
 8002f06:	4623      	mov	r3, r4
 8002f08:	eb18 0303 	adds.w	r3, r8, r3
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	462b      	mov	r3, r5
 8002f10:	eb49 0303 	adc.w	r3, r9, r3
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f22:	4629      	mov	r1, r5
 8002f24:	024b      	lsls	r3, r1, #9
 8002f26:	4621      	mov	r1, r4
 8002f28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	024a      	lsls	r2, r1, #9
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f36:	2200      	movs	r2, #0
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f40:	f7fd fa16 	bl	8000370 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f4c:	e058      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4e:	4b38      	ldr	r3, [pc, #224]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	2200      	movs	r2, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	4611      	mov	r1, r2
 8002f5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f5e:	623b      	str	r3, [r7, #32]
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
 8002f64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	f04f 0000 	mov.w	r0, #0
 8002f70:	f04f 0100 	mov.w	r1, #0
 8002f74:	0159      	lsls	r1, r3, #5
 8002f76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f7a:	0150      	lsls	r0, r2, #5
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4641      	mov	r1, r8
 8002f82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f86:	4649      	mov	r1, r9
 8002f88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fa0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fa4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	00eb      	lsls	r3, r5, #3
 8002fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb6:	00e2      	lsls	r2, r4, #3
 8002fb8:	4614      	mov	r4, r2
 8002fba:	461d      	mov	r5, r3
 8002fbc:	4643      	mov	r3, r8
 8002fbe:	18e3      	adds	r3, r4, r3
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	eb45 0303 	adc.w	r3, r5, r3
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	028b      	lsls	r3, r1, #10
 8002fda:	4621      	mov	r1, r4
 8002fdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	028a      	lsls	r2, r1, #10
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fea:	2200      	movs	r2, #0
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	61fa      	str	r2, [r7, #28]
 8002ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff4:	f7fd f9bc 	bl	8000370 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	3301      	adds	r3, #1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003010:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800301a:	e002      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <HAL_RCC_GetSysClockFreq+0x204>)
 800301e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003024:	4618      	mov	r0, r3
 8003026:	3750      	adds	r7, #80	; 0x50
 8003028:	46bd      	mov	sp, r7
 800302a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	00f42400 	.word	0x00f42400
 8003038:	007a1200 	.word	0x007a1200

0800303c <arm_rfft_fast_init_f32>:
 800303c:	084b      	lsrs	r3, r1, #1
 800303e:	2b80      	cmp	r3, #128	; 0x80
 8003040:	b430      	push	{r4, r5}
 8003042:	8201      	strh	r1, [r0, #16]
 8003044:	8003      	strh	r3, [r0, #0]
 8003046:	d06f      	beq.n	8003128 <arm_rfft_fast_init_f32+0xec>
 8003048:	d916      	bls.n	8003078 <arm_rfft_fast_init_f32+0x3c>
 800304a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304e:	d05e      	beq.n	800310e <arm_rfft_fast_init_f32+0xd2>
 8003050:	d935      	bls.n	80030be <arm_rfft_fast_init_f32+0x82>
 8003052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003056:	d025      	beq.n	80030a4 <arm_rfft_fast_init_f32+0x68>
 8003058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800305c:	d112      	bne.n	8003084 <arm_rfft_fast_init_f32+0x48>
 800305e:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8003062:	4c37      	ldr	r4, [pc, #220]	; (8003140 <arm_rfft_fast_init_f32+0x104>)
 8003064:	4937      	ldr	r1, [pc, #220]	; (8003144 <arm_rfft_fast_init_f32+0x108>)
 8003066:	2300      	movs	r3, #0
 8003068:	4a37      	ldr	r2, [pc, #220]	; (8003148 <arm_rfft_fast_init_f32+0x10c>)
 800306a:	8185      	strh	r5, [r0, #12]
 800306c:	6084      	str	r4, [r0, #8]
 800306e:	6041      	str	r1, [r0, #4]
 8003070:	6142      	str	r2, [r0, #20]
 8003072:	b258      	sxtb	r0, r3
 8003074:	bc30      	pop	{r4, r5}
 8003076:	4770      	bx	lr
 8003078:	2b20      	cmp	r3, #32
 800307a:	d030      	beq.n	80030de <arm_rfft_fast_init_f32+0xa2>
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d005      	beq.n	800308c <arm_rfft_fast_init_f32+0x50>
 8003080:	2b10      	cmp	r3, #16
 8003082:	d038      	beq.n	80030f6 <arm_rfft_fast_init_f32+0xba>
 8003084:	23ff      	movs	r3, #255	; 0xff
 8003086:	bc30      	pop	{r4, r5}
 8003088:	b258      	sxtb	r0, r3
 800308a:	4770      	bx	lr
 800308c:	2538      	movs	r5, #56	; 0x38
 800308e:	4c2f      	ldr	r4, [pc, #188]	; (800314c <arm_rfft_fast_init_f32+0x110>)
 8003090:	492f      	ldr	r1, [pc, #188]	; (8003150 <arm_rfft_fast_init_f32+0x114>)
 8003092:	2300      	movs	r3, #0
 8003094:	4a2f      	ldr	r2, [pc, #188]	; (8003154 <arm_rfft_fast_init_f32+0x118>)
 8003096:	8185      	strh	r5, [r0, #12]
 8003098:	6084      	str	r4, [r0, #8]
 800309a:	6041      	str	r1, [r0, #4]
 800309c:	6142      	str	r2, [r0, #20]
 800309e:	b258      	sxtb	r0, r3
 80030a0:	bc30      	pop	{r4, r5}
 80030a2:	4770      	bx	lr
 80030a4:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 80030a8:	4c2b      	ldr	r4, [pc, #172]	; (8003158 <arm_rfft_fast_init_f32+0x11c>)
 80030aa:	492c      	ldr	r1, [pc, #176]	; (800315c <arm_rfft_fast_init_f32+0x120>)
 80030ac:	2300      	movs	r3, #0
 80030ae:	4a2c      	ldr	r2, [pc, #176]	; (8003160 <arm_rfft_fast_init_f32+0x124>)
 80030b0:	8185      	strh	r5, [r0, #12]
 80030b2:	6084      	str	r4, [r0, #8]
 80030b4:	6041      	str	r1, [r0, #4]
 80030b6:	6142      	str	r2, [r0, #20]
 80030b8:	b258      	sxtb	r0, r3
 80030ba:	bc30      	pop	{r4, r5}
 80030bc:	4770      	bx	lr
 80030be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c2:	d1df      	bne.n	8003084 <arm_rfft_fast_init_f32+0x48>
 80030c4:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 80030c8:	4c26      	ldr	r4, [pc, #152]	; (8003164 <arm_rfft_fast_init_f32+0x128>)
 80030ca:	4927      	ldr	r1, [pc, #156]	; (8003168 <arm_rfft_fast_init_f32+0x12c>)
 80030cc:	2300      	movs	r3, #0
 80030ce:	4a27      	ldr	r2, [pc, #156]	; (800316c <arm_rfft_fast_init_f32+0x130>)
 80030d0:	8185      	strh	r5, [r0, #12]
 80030d2:	6084      	str	r4, [r0, #8]
 80030d4:	6041      	str	r1, [r0, #4]
 80030d6:	6142      	str	r2, [r0, #20]
 80030d8:	b258      	sxtb	r0, r3
 80030da:	bc30      	pop	{r4, r5}
 80030dc:	4770      	bx	lr
 80030de:	2530      	movs	r5, #48	; 0x30
 80030e0:	4c23      	ldr	r4, [pc, #140]	; (8003170 <arm_rfft_fast_init_f32+0x134>)
 80030e2:	4924      	ldr	r1, [pc, #144]	; (8003174 <arm_rfft_fast_init_f32+0x138>)
 80030e4:	2300      	movs	r3, #0
 80030e6:	4a24      	ldr	r2, [pc, #144]	; (8003178 <arm_rfft_fast_init_f32+0x13c>)
 80030e8:	8185      	strh	r5, [r0, #12]
 80030ea:	6084      	str	r4, [r0, #8]
 80030ec:	6041      	str	r1, [r0, #4]
 80030ee:	6142      	str	r2, [r0, #20]
 80030f0:	b258      	sxtb	r0, r3
 80030f2:	bc30      	pop	{r4, r5}
 80030f4:	4770      	bx	lr
 80030f6:	2514      	movs	r5, #20
 80030f8:	4c20      	ldr	r4, [pc, #128]	; (800317c <arm_rfft_fast_init_f32+0x140>)
 80030fa:	4921      	ldr	r1, [pc, #132]	; (8003180 <arm_rfft_fast_init_f32+0x144>)
 80030fc:	2300      	movs	r3, #0
 80030fe:	4a21      	ldr	r2, [pc, #132]	; (8003184 <arm_rfft_fast_init_f32+0x148>)
 8003100:	8185      	strh	r5, [r0, #12]
 8003102:	6084      	str	r4, [r0, #8]
 8003104:	6041      	str	r1, [r0, #4]
 8003106:	6142      	str	r2, [r0, #20]
 8003108:	b258      	sxtb	r0, r3
 800310a:	bc30      	pop	{r4, r5}
 800310c:	4770      	bx	lr
 800310e:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8003112:	4c1d      	ldr	r4, [pc, #116]	; (8003188 <arm_rfft_fast_init_f32+0x14c>)
 8003114:	491d      	ldr	r1, [pc, #116]	; (800318c <arm_rfft_fast_init_f32+0x150>)
 8003116:	2300      	movs	r3, #0
 8003118:	4a1d      	ldr	r2, [pc, #116]	; (8003190 <arm_rfft_fast_init_f32+0x154>)
 800311a:	8185      	strh	r5, [r0, #12]
 800311c:	6084      	str	r4, [r0, #8]
 800311e:	6041      	str	r1, [r0, #4]
 8003120:	6142      	str	r2, [r0, #20]
 8003122:	b258      	sxtb	r0, r3
 8003124:	bc30      	pop	{r4, r5}
 8003126:	4770      	bx	lr
 8003128:	25d0      	movs	r5, #208	; 0xd0
 800312a:	4c1a      	ldr	r4, [pc, #104]	; (8003194 <arm_rfft_fast_init_f32+0x158>)
 800312c:	491a      	ldr	r1, [pc, #104]	; (8003198 <arm_rfft_fast_init_f32+0x15c>)
 800312e:	2300      	movs	r3, #0
 8003130:	4a1a      	ldr	r2, [pc, #104]	; (800319c <arm_rfft_fast_init_f32+0x160>)
 8003132:	8185      	strh	r5, [r0, #12]
 8003134:	6084      	str	r4, [r0, #8]
 8003136:	6041      	str	r1, [r0, #4]
 8003138:	6142      	str	r2, [r0, #20]
 800313a:	b258      	sxtb	r0, r3
 800313c:	bc30      	pop	{r4, r5}
 800313e:	4770      	bx	lr
 8003140:	08016d70 	.word	0x08016d70
 8003144:	08007764 	.word	0x08007764
 8003148:	0800d8d4 	.word	0x0800d8d4
 800314c:	0800b864 	.word	0x0800b864
 8003150:	08018b30 	.word	0x08018b30
 8003154:	0801b020 	.word	0x0801b020
 8003158:	08014254 	.word	0x08014254
 800315c:	08012154 	.word	0x08012154
 8003160:	0800b8d4 	.word	0x0800b8d4
 8003164:	0801acb0 	.word	0x0801acb0
 8003168:	080118d4 	.word	0x080118d4
 800316c:	08018d30 	.word	0x08018d30
 8003170:	0801510c 	.word	0x0801510c
 8003174:	08014154 	.word	0x08014154
 8003178:	0800b764 	.word	0x0800b764
 800317c:	08015064 	.word	0x08015064
 8003180:	080120d4 	.word	0x080120d4
 8003184:	0801508c 	.word	0x0801508c
 8003188:	08019530 	.word	0x08019530
 800318c:	08015d70 	.word	0x08015d70
 8003190:	080198b0 	.word	0x080198b0
 8003194:	0801b220 	.word	0x0801b220
 8003198:	08015970 	.word	0x08015970
 800319c:	0801a8b0 	.word	0x0801a8b0

080031a0 <arm_rfft_fast_f32>:
 80031a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031a4:	8a05      	ldrh	r5, [r0, #16]
 80031a6:	4606      	mov	r6, r0
 80031a8:	4690      	mov	r8, r2
 80031aa:	460c      	mov	r4, r1
 80031ac:	086d      	lsrs	r5, r5, #1
 80031ae:	8005      	strh	r5, [r0, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d15e      	bne.n	8003272 <arm_rfft_fast_f32+0xd2>
 80031b4:	461a      	mov	r2, r3
 80031b6:	2301      	movs	r3, #1
 80031b8:	f000 fbe0 	bl	800397c <arm_cfft_f32>
 80031bc:	edd4 7a00 	vldr	s15, [r4]
 80031c0:	ed94 7a01 	vldr	s14, [r4, #4]
 80031c4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80031c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80031cc:	8837      	ldrh	r7, [r6, #0]
 80031ce:	ee37 7a07 	vadd.f32	s14, s14, s14
 80031d2:	6975      	ldr	r5, [r6, #20]
 80031d4:	3f01      	subs	r7, #1
 80031d6:	eef0 3a46 	vmov.f32	s7, s12
 80031da:	3510      	adds	r5, #16
 80031dc:	f108 0610 	add.w	r6, r8, #16
 80031e0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80031e4:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 80031e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031ec:	f104 0310 	add.w	r3, r4, #16
 80031f0:	3808      	subs	r0, #8
 80031f2:	ee26 7a86 	vmul.f32	s14, s13, s12
 80031f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80031fa:	ed88 7a00 	vstr	s14, [r8]
 80031fe:	edc8 7a01 	vstr	s15, [r8, #4]
 8003202:	edd0 6a02 	vldr	s13, [r0, #8]
 8003206:	3f01      	subs	r7, #1
 8003208:	ed13 5a02 	vldr	s10, [r3, #-8]
 800320c:	f1a0 0008 	sub.w	r0, r0, #8
 8003210:	ed13 7a01 	vldr	s14, [r3, #-4]
 8003214:	f105 0508 	add.w	r5, r5, #8
 8003218:	ee76 7ac5 	vsub.f32	s15, s13, s10
 800321c:	ed15 6a04 	vldr	s12, [r5, #-16]
 8003220:	edd0 5a05 	vldr	s11, [r0, #20]
 8003224:	ee36 5a85 	vadd.f32	s10, s13, s10
 8003228:	ed55 6a03 	vldr	s13, [r5, #-12]
 800322c:	f103 0308 	add.w	r3, r3, #8
 8003230:	ee35 4a87 	vadd.f32	s8, s11, s14
 8003234:	f106 0608 	add.w	r6, r6, #8
 8003238:	ee66 4a27 	vmul.f32	s9, s12, s15
 800323c:	ee77 5a65 	vsub.f32	s11, s14, s11
 8003240:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8003244:	ee34 5a85 	vadd.f32	s10, s9, s10
 8003248:	ee26 6a04 	vmul.f32	s12, s12, s8
 800324c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8003250:	ee77 7a25 	vadd.f32	s15, s14, s11
 8003254:	ee76 6a85 	vadd.f32	s13, s13, s10
 8003258:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800325c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8003260:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8003264:	ed46 6a04 	vstr	s13, [r6, #-16]
 8003268:	ed46 7a03 	vstr	s15, [r6, #-12]
 800326c:	d1c9      	bne.n	8003202 <arm_rfft_fast_f32+0x62>
 800326e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003272:	edd1 7a00 	vldr	s15, [r1]
 8003276:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800327a:	edd1 6a01 	vldr	s13, [r1, #4]
 800327e:	1e68      	subs	r0, r5, #1
 8003280:	6975      	ldr	r5, [r6, #20]
 8003282:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003286:	00c1      	lsls	r1, r0, #3
 8003288:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800328c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003290:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8003294:	ed82 7a00 	vstr	s14, [r2]
 8003298:	edc2 7a01 	vstr	s15, [r2, #4]
 800329c:	b3e0      	cbz	r0, 8003318 <arm_rfft_fast_f32+0x178>
 800329e:	3908      	subs	r1, #8
 80032a0:	f104 0210 	add.w	r2, r4, #16
 80032a4:	3510      	adds	r5, #16
 80032a6:	440c      	add	r4, r1
 80032a8:	f108 0110 	add.w	r1, r8, #16
 80032ac:	ed94 7a02 	vldr	s14, [r4, #8]
 80032b0:	3801      	subs	r0, #1
 80032b2:	ed52 6a02 	vldr	s13, [r2, #-8]
 80032b6:	f1a4 0408 	sub.w	r4, r4, #8
 80032ba:	ed15 6a02 	vldr	s12, [r5, #-8]
 80032be:	f102 0208 	add.w	r2, r2, #8
 80032c2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80032c6:	ed94 4a05 	vldr	s8, [r4, #20]
 80032ca:	ed12 5a03 	vldr	s10, [r2, #-12]
 80032ce:	ee77 6a26 	vadd.f32	s13, s14, s13
 80032d2:	ed55 5a01 	vldr	s11, [r5, #-4]
 80032d6:	f101 0108 	add.w	r1, r1, #8
 80032da:	ee26 3a27 	vmul.f32	s6, s12, s15
 80032de:	f105 0508 	add.w	r5, r5, #8
 80032e2:	ee74 4a05 	vadd.f32	s9, s8, s10
 80032e6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80032ea:	ee35 5a44 	vsub.f32	s10, s10, s8
 80032ee:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80032f2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80032f6:	ee77 7a05 	vadd.f32	s15, s14, s10
 80032fa:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80032fe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003302:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8003306:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800330a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800330e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8003312:	ed01 7a04 	vstr	s14, [r1, #-16]
 8003316:	d1c9      	bne.n	80032ac <arm_rfft_fast_f32+0x10c>
 8003318:	4630      	mov	r0, r6
 800331a:	4641      	mov	r1, r8
 800331c:	461a      	mov	r2, r3
 800331e:	2301      	movs	r3, #1
 8003320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003324:	f000 bb2a 	b.w	800397c <arm_cfft_f32>

08003328 <arm_cfft_radix8by2_f32>:
 8003328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800332c:	ed2d 8b06 	vpush	{d8-d10}
 8003330:	f8b0 e000 	ldrh.w	lr, [r0]
 8003334:	4607      	mov	r7, r0
 8003336:	6842      	ldr	r2, [r0, #4]
 8003338:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800333c:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8003340:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8003344:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8003348:	f000 80af 	beq.w	80034aa <arm_cfft_radix8by2_f32+0x182>
 800334c:	3310      	adds	r3, #16
 800334e:	3210      	adds	r2, #16
 8003350:	f101 0610 	add.w	r6, r1, #16
 8003354:	f108 0510 	add.w	r5, r8, #16
 8003358:	18cc      	adds	r4, r1, r3
 800335a:	4443      	add	r3, r8
 800335c:	ed55 6a04 	vldr	s13, [r5, #-16]
 8003360:	f1be 0e01 	subs.w	lr, lr, #1
 8003364:	ed56 4a04 	vldr	s9, [r6, #-16]
 8003368:	f104 0410 	add.w	r4, r4, #16
 800336c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8003370:	f106 0610 	add.w	r6, r6, #16
 8003374:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8003378:	ed53 0a04 	vldr	s1, [r3, #-16]
 800337c:	ed13 5a03 	vldr	s10, [r3, #-12]
 8003380:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8003384:	ed13 3a02 	vldr	s6, [r3, #-8]
 8003388:	f102 0210 	add.w	r2, r2, #16
 800338c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8003390:	f103 0310 	add.w	r3, r3, #16
 8003394:	ed55 2a01 	vldr	s5, [r5, #-4]
 8003398:	f105 0510 	add.w	r5, r5, #16
 800339c:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 80033a0:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 80033a4:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 80033a8:	ee33 8a83 	vadd.f32	s16, s7, s6
 80033ac:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 80033b0:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 80033b4:	ee34 0a06 	vadd.f32	s0, s8, s12
 80033b8:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 80033bc:	ee76 aa87 	vadd.f32	s21, s13, s14
 80033c0:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80033c4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80033c8:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 80033cc:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80033d0:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 80033d4:	ee71 8a05 	vadd.f32	s17, s2, s10
 80033d8:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80033dc:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 80033e0:	ee72 9a22 	vadd.f32	s19, s4, s5
 80033e4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80033e8:	ee35 5a41 	vsub.f32	s10, s10, s2
 80033ec:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 80033f0:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 80033f4:	ee36 6a44 	vsub.f32	s12, s12, s8
 80033f8:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 80033fc:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8003400:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8003404:	ee72 7a62 	vsub.f32	s15, s4, s5
 8003408:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800340c:	ee73 2a63 	vsub.f32	s5, s6, s7
 8003410:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8003414:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8003418:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800341c:	ee24 3a84 	vmul.f32	s6, s9, s8
 8003420:	ee27 2a26 	vmul.f32	s4, s14, s13
 8003424:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8003428:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800342c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003430:	ee65 5a84 	vmul.f32	s11, s11, s8
 8003434:	ee65 6a26 	vmul.f32	s13, s10, s13
 8003438:	ee25 5a04 	vmul.f32	s10, s10, s8
 800343c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003440:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8003444:	ee33 4a02 	vadd.f32	s8, s6, s4
 8003448:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800344c:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8003450:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8003454:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8003458:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800345c:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8003460:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8003464:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8003468:	ee27 4a87 	vmul.f32	s8, s15, s14
 800346c:	ee61 5a87 	vmul.f32	s11, s3, s14
 8003470:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003474:	ee22 5a87 	vmul.f32	s10, s5, s14
 8003478:	ee26 7a07 	vmul.f32	s14, s12, s14
 800347c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8003480:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8003484:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003488:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800348c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003490:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003494:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8003498:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800349c:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 80034a0:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80034a4:	f47f af5a 	bne.w	800335c <arm_cfft_radix8by2_f32+0x34>
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	fa1f f48c 	uxth.w	r4, ip
 80034ae:	4608      	mov	r0, r1
 80034b0:	2302      	movs	r3, #2
 80034b2:	4621      	mov	r1, r4
 80034b4:	f000 fc46 	bl	8003d44 <arm_radix8_butterfly_f32>
 80034b8:	4640      	mov	r0, r8
 80034ba:	4621      	mov	r1, r4
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	2302      	movs	r3, #2
 80034c0:	ecbd 8b06 	vpop	{d8-d10}
 80034c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034c8:	f000 bc3c 	b.w	8003d44 <arm_radix8_butterfly_f32>

080034cc <arm_cfft_radix8by4_f32>:
 80034cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d0:	ed2d 8b06 	vpush	{d8-d10}
 80034d4:	8804      	ldrh	r4, [r0, #0]
 80034d6:	b08f      	sub	sp, #60	; 0x3c
 80034d8:	ed91 6a00 	vldr	s12, [r1]
 80034dc:	460a      	mov	r2, r1
 80034de:	0864      	lsrs	r4, r4, #1
 80034e0:	ed91 7a01 	vldr	s14, [r1, #4]
 80034e4:	9101      	str	r1, [sp, #4]
 80034e6:	00a3      	lsls	r3, r4, #2
 80034e8:	9104      	str	r1, [sp, #16]
 80034ea:	0864      	lsrs	r4, r4, #1
 80034ec:	6841      	ldr	r1, [r0, #4]
 80034ee:	900c      	str	r0, [sp, #48]	; 0x30
 80034f0:	4625      	mov	r5, r4
 80034f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80034f4:	f101 0408 	add.w	r4, r1, #8
 80034f8:	f101 0610 	add.w	r6, r1, #16
 80034fc:	9406      	str	r4, [sp, #24]
 80034fe:	18d4      	adds	r4, r2, r3
 8003500:	1eaa      	subs	r2, r5, #2
 8003502:	f101 0518 	add.w	r5, r1, #24
 8003506:	18e0      	adds	r0, r4, r3
 8003508:	ed94 4a00 	vldr	s8, [r4]
 800350c:	edd4 3a01 	vldr	s7, [r4, #4]
 8003510:	46a6      	mov	lr, r4
 8003512:	edd0 6a00 	vldr	s13, [r0]
 8003516:	18c7      	adds	r7, r0, r3
 8003518:	edd0 7a01 	vldr	s15, [r0, #4]
 800351c:	46a0      	mov	r8, r4
 800351e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8003522:	edd7 4a00 	vldr	s9, [r7]
 8003526:	9402      	str	r4, [sp, #8]
 8003528:	4604      	mov	r4, r0
 800352a:	9507      	str	r5, [sp, #28]
 800352c:	4605      	mov	r5, r0
 800352e:	ee75 2a84 	vadd.f32	s5, s11, s8
 8003532:	900a      	str	r0, [sp, #40]	; 0x28
 8003534:	9801      	ldr	r0, [sp, #4]
 8003536:	ee76 6a66 	vsub.f32	s13, s12, s13
 800353a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800353e:	ed97 5a01 	vldr	s10, [r7, #4]
 8003542:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8003546:	46bc      	mov	ip, r7
 8003548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800354c:	9605      	str	r6, [sp, #20]
 800354e:	ee36 7a63 	vsub.f32	s14, s12, s7
 8003552:	9703      	str	r7, [sp, #12]
 8003554:	ee12 9a90 	vmov	r9, s5
 8003558:	ee33 3aa6 	vadd.f32	s6, s7, s13
 800355c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8003560:	1f3e      	subs	r6, r7, #4
 8003562:	f840 9b08 	str.w	r9, [r0], #8
 8003566:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800356a:	edde 2a01 	vldr	s5, [lr, #4]
 800356e:	ee77 3ac4 	vsub.f32	s7, s15, s8
 8003572:	ee77 7a84 	vadd.f32	s15, s15, s8
 8003576:	ed9c 4a01 	vldr	s8, [ip, #4]
 800357a:	ee36 6a22 	vadd.f32	s12, s12, s5
 800357e:	9001      	str	r0, [sp, #4]
 8003580:	ee37 7a45 	vsub.f32	s14, s14, s10
 8003584:	9804      	ldr	r0, [sp, #16]
 8003586:	ee75 6a26 	vadd.f32	s13, s10, s13
 800358a:	f1ae 0704 	sub.w	r7, lr, #4
 800358e:	ee36 6a04 	vadd.f32	s12, s12, s8
 8003592:	ee33 4a45 	vsub.f32	s8, s6, s10
 8003596:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800359a:	ee33 5aa4 	vadd.f32	s10, s7, s9
 800359e:	ed80 6a01 	vstr	s12, [r0, #4]
 80035a2:	ee14 9a10 	vmov	r9, s8
 80035a6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80035aa:	f848 9b08 	str.w	r9, [r8], #8
 80035ae:	ed8e 5a01 	vstr	s10, [lr, #4]
 80035b2:	ee15 ea90 	vmov	lr, s11
 80035b6:	f844 eb08 	str.w	lr, [r4], #8
 80035ba:	ee16 ea90 	vmov	lr, s13
 80035be:	9408      	str	r4, [sp, #32]
 80035c0:	462c      	mov	r4, r5
 80035c2:	ed85 7a01 	vstr	s14, [r5, #4]
 80035c6:	9d03      	ldr	r5, [sp, #12]
 80035c8:	f84c eb08 	str.w	lr, [ip], #8
 80035cc:	edc5 7a01 	vstr	s15, [r5, #4]
 80035d0:	0855      	lsrs	r5, r2, #1
 80035d2:	9509      	str	r5, [sp, #36]	; 0x24
 80035d4:	f000 8130 	beq.w	8003838 <arm_cfft_radix8by4_f32+0x36c>
 80035d8:	9804      	ldr	r0, [sp, #16]
 80035da:	3b08      	subs	r3, #8
 80035dc:	46ab      	mov	fp, r5
 80035de:	f1a4 020c 	sub.w	r2, r4, #12
 80035e2:	f100 0510 	add.w	r5, r0, #16
 80035e6:	f101 0920 	add.w	r9, r1, #32
 80035ea:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80035ee:	f8dd a014 	ldr.w	sl, [sp, #20]
 80035f2:	4433      	add	r3, r6
 80035f4:	3410      	adds	r4, #16
 80035f6:	4660      	mov	r0, ip
 80035f8:	4641      	mov	r1, r8
 80035fa:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80035fe:	ed54 6a02 	vldr	s13, [r4, #-8]
 8003602:	f1bb 0b01 	subs.w	fp, fp, #1
 8003606:	ed55 5a02 	vldr	s11, [r5, #-8]
 800360a:	f10a 0a08 	add.w	sl, sl, #8
 800360e:	edd1 7a00 	vldr	s15, [r1]
 8003612:	f105 0508 	add.w	r5, r5, #8
 8003616:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800361a:	edd0 2a00 	vldr	s5, [r0]
 800361e:	ed14 7a01 	vldr	s14, [r4, #-4]
 8003622:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8003626:	ed55 6a03 	vldr	s13, [r5, #-12]
 800362a:	f1a2 0208 	sub.w	r2, r2, #8
 800362e:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8003632:	ed90 2a01 	vldr	s4, [r0, #4]
 8003636:	ee36 5a87 	vadd.f32	s10, s13, s14
 800363a:	ed91 6a01 	vldr	s12, [r1, #4]
 800363e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003642:	f109 0910 	add.w	r9, r9, #16
 8003646:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800364a:	f104 0408 	add.w	r4, r4, #8
 800364e:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8003652:	f10e 0e18 	add.w	lr, lr, #24
 8003656:	ee37 3a67 	vsub.f32	s6, s14, s15
 800365a:	f1a3 0308 	sub.w	r3, r3, #8
 800365e:	ed45 6a04 	vstr	s13, [r5, #-16]
 8003662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003666:	edd1 6a01 	vldr	s13, [r1, #4]
 800366a:	ee76 1a25 	vadd.f32	s3, s12, s11
 800366e:	edd0 4a01 	vldr	s9, [r0, #4]
 8003672:	ee33 3a22 	vadd.f32	s6, s6, s5
 8003676:	ee75 6a26 	vadd.f32	s13, s10, s13
 800367a:	ee35 5a46 	vsub.f32	s10, s10, s12
 800367e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8003682:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003686:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800368a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800368e:	ed45 6a03 	vstr	s13, [r5, #-12]
 8003692:	ee32 2a06 	vadd.f32	s4, s4, s12
 8003696:	edd6 7a00 	vldr	s15, [r6]
 800369a:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800369e:	ed97 1a00 	vldr	s2, [r7]
 80036a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80036a6:	ed92 8a04 	vldr	s16, [r2, #16]
 80036aa:	ee71 8a27 	vadd.f32	s17, s2, s15
 80036ae:	ed93 aa04 	vldr	s20, [r3, #16]
 80036b2:	ed16 7a01 	vldr	s14, [r6, #-4]
 80036b6:	ee71 7a67 	vsub.f32	s15, s2, s15
 80036ba:	ed57 0a01 	vldr	s1, [r7, #-4]
 80036be:	ee38 1a4a 	vsub.f32	s2, s16, s20
 80036c2:	ee38 6a88 	vadd.f32	s12, s17, s16
 80036c6:	edd3 9a03 	vldr	s19, [r3, #12]
 80036ca:	ee30 0a87 	vadd.f32	s0, s1, s14
 80036ce:	ed92 9a03 	vldr	s18, [r2, #12]
 80036d2:	ee78 5ac8 	vsub.f32	s11, s17, s16
 80036d6:	ee3a 6a06 	vadd.f32	s12, s20, s12
 80036da:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80036de:	ee37 4ac9 	vsub.f32	s8, s15, s18
 80036e2:	ee16 ca10 	vmov	ip, s12
 80036e6:	ee30 6a49 	vsub.f32	s12, s0, s18
 80036ea:	ee71 4a07 	vadd.f32	s9, s2, s14
 80036ee:	f847 c908 	str.w	ip, [r7], #-8
 80036f2:	ee34 4a29 	vadd.f32	s8, s8, s19
 80036f6:	edd2 8a03 	vldr	s17, [r2, #12]
 80036fa:	ee39 9ac9 	vsub.f32	s18, s19, s18
 80036fe:	ed93 8a03 	vldr	s16, [r3, #12]
 8003702:	ee71 0a47 	vsub.f32	s1, s2, s14
 8003706:	ee30 0a28 	vadd.f32	s0, s0, s17
 800370a:	ee39 1a67 	vsub.f32	s2, s18, s15
 800370e:	ee36 6a69 	vsub.f32	s12, s12, s19
 8003712:	ee30 0a08 	vadd.f32	s0, s0, s16
 8003716:	ee75 5aca 	vsub.f32	s11, s11, s20
 800371a:	ed87 0a01 	vstr	s0, [r7, #4]
 800371e:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8003722:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8003726:	ee21 8a80 	vmul.f32	s16, s3, s0
 800372a:	ee23 7a26 	vmul.f32	s14, s6, s13
 800372e:	ee64 7a26 	vmul.f32	s15, s8, s13
 8003732:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8003736:	ee24 4a00 	vmul.f32	s8, s8, s0
 800373a:	ee23 3a00 	vmul.f32	s6, s6, s0
 800373e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8003742:	ee24 0a80 	vmul.f32	s0, s9, s0
 8003746:	ee38 7a07 	vadd.f32	s14, s16, s14
 800374a:	ee76 6a84 	vadd.f32	s13, s13, s8
 800374e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003752:	ee33 3a61 	vsub.f32	s6, s6, s3
 8003756:	ee17 ca10 	vmov	ip, s14
 800375a:	f841 cb08 	str.w	ip, [r1], #8
 800375e:	ed01 3a01 	vstr	s6, [r1, #-4]
 8003762:	ed82 0a04 	vstr	s0, [r2, #16]
 8003766:	edc2 6a03 	vstr	s13, [r2, #12]
 800376a:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800376e:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8003772:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8003776:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800377a:	ee65 4a27 	vmul.f32	s9, s10, s15
 800377e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003782:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8003786:	ee66 7a27 	vmul.f32	s15, s12, s15
 800378a:	ee25 5a26 	vmul.f32	s10, s10, s13
 800378e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003796:	ee34 6a24 	vadd.f32	s12, s8, s9
 800379a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800379e:	ee35 5a63 	vsub.f32	s10, s10, s7
 80037a2:	ee17 ca90 	vmov	ip, s15
 80037a6:	ed04 6a04 	vstr	s12, [r4, #-16]
 80037aa:	ed04 5a03 	vstr	s10, [r4, #-12]
 80037ae:	f846 c908 	str.w	ip, [r6], #-8
 80037b2:	edc6 6a01 	vstr	s13, [r6, #4]
 80037b6:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 80037ba:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 80037be:	ee62 5a27 	vmul.f32	s11, s4, s15
 80037c2:	ee22 6a87 	vmul.f32	s12, s5, s14
 80037c6:	ee22 2a07 	vmul.f32	s4, s4, s14
 80037ca:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80037ce:	ee61 6a07 	vmul.f32	s13, s2, s14
 80037d2:	ee20 7a87 	vmul.f32	s14, s1, s14
 80037d6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80037da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80037de:	ee35 6a86 	vadd.f32	s12, s11, s12
 80037e2:	ee72 2ac2 	vsub.f32	s5, s5, s4
 80037e6:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80037ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ee:	ee16 ca10 	vmov	ip, s12
 80037f2:	f840 cb08 	str.w	ip, [r0], #8
 80037f6:	ed40 2a01 	vstr	s5, [r0, #-4]
 80037fa:	edc3 0a04 	vstr	s1, [r3, #16]
 80037fe:	edc3 7a03 	vstr	s15, [r3, #12]
 8003802:	f47f aefc 	bne.w	80035fe <arm_cfft_radix8by4_f32+0x132>
 8003806:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003808:	9805      	ldr	r0, [sp, #20]
 800380a:	00cb      	lsls	r3, r1, #3
 800380c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8003810:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003814:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003818:	4498      	add	r8, r3
 800381a:	449c      	add	ip, r3
 800381c:	9105      	str	r1, [sp, #20]
 800381e:	9901      	ldr	r1, [sp, #4]
 8003820:	4419      	add	r1, r3
 8003822:	9101      	str	r1, [sp, #4]
 8003824:	9906      	ldr	r1, [sp, #24]
 8003826:	4419      	add	r1, r3
 8003828:	9106      	str	r1, [sp, #24]
 800382a:	9908      	ldr	r1, [sp, #32]
 800382c:	4419      	add	r1, r3
 800382e:	9b07      	ldr	r3, [sp, #28]
 8003830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003834:	9108      	str	r1, [sp, #32]
 8003836:	9307      	str	r3, [sp, #28]
 8003838:	9a01      	ldr	r2, [sp, #4]
 800383a:	2304      	movs	r3, #4
 800383c:	9e08      	ldr	r6, [sp, #32]
 800383e:	edd2 6a00 	vldr	s13, [r2]
 8003842:	ed96 4a00 	vldr	s8, [r6]
 8003846:	edd8 7a00 	vldr	s15, [r8]
 800384a:	ee36 6a84 	vadd.f32	s12, s13, s8
 800384e:	eddc 2a00 	vldr	s5, [ip]
 8003852:	ed96 7a01 	vldr	s14, [r6, #4]
 8003856:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800385a:	edd2 6a01 	vldr	s13, [r2, #4]
 800385e:	ee76 4a27 	vadd.f32	s9, s12, s15
 8003862:	ed98 2a01 	vldr	s4, [r8, #4]
 8003866:	ee76 5a87 	vadd.f32	s11, s13, s14
 800386a:	ed9c 5a01 	vldr	s10, [ip, #4]
 800386e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003872:	9d05      	ldr	r5, [sp, #20]
 8003874:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8003878:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800387c:	ee72 3a04 	vadd.f32	s7, s4, s8
 8003880:	9804      	ldr	r0, [sp, #16]
 8003882:	ee77 4a67 	vsub.f32	s9, s14, s15
 8003886:	4621      	mov	r1, r4
 8003888:	edc2 6a00 	vstr	s13, [r2]
 800388c:	ee76 6a67 	vsub.f32	s13, s12, s15
 8003890:	ed98 3a01 	vldr	s6, [r8, #4]
 8003894:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8003898:	eddc 1a01 	vldr	s3, [ip, #4]
 800389c:	ee74 4aa2 	vadd.f32	s9, s9, s5
 80038a0:	ee35 3a83 	vadd.f32	s6, s11, s6
 80038a4:	ee34 4a42 	vsub.f32	s8, s8, s4
 80038a8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80038ac:	ee73 5a21 	vadd.f32	s11, s6, s3
 80038b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b4:	ee36 6a45 	vsub.f32	s12, s12, s10
 80038b8:	edc2 5a01 	vstr	s11, [r2, #4]
 80038bc:	ee35 5a04 	vadd.f32	s10, s10, s8
 80038c0:	9a06      	ldr	r2, [sp, #24]
 80038c2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80038c6:	edd2 7a00 	vldr	s15, [r2]
 80038ca:	edd2 5a01 	vldr	s11, [r2, #4]
 80038ce:	ee23 4aa7 	vmul.f32	s8, s7, s15
 80038d2:	ee63 3aa5 	vmul.f32	s7, s7, s11
 80038d6:	ee64 5aa5 	vmul.f32	s11, s9, s11
 80038da:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80038de:	ee77 7a62 	vsub.f32	s15, s14, s5
 80038e2:	ee74 5a25 	vadd.f32	s11, s8, s11
 80038e6:	ee74 4ae3 	vsub.f32	s9, s9, s7
 80038ea:	edc8 5a00 	vstr	s11, [r8]
 80038ee:	edc8 4a01 	vstr	s9, [r8, #4]
 80038f2:	edd5 4a01 	vldr	s9, [r5, #4]
 80038f6:	ed95 7a00 	vldr	s14, [r5]
 80038fa:	9d07      	ldr	r5, [sp, #28]
 80038fc:	ee66 5a87 	vmul.f32	s11, s13, s14
 8003900:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8003904:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003908:	ee26 6a24 	vmul.f32	s12, s12, s9
 800390c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8003910:	ee35 6a86 	vadd.f32	s12, s11, s12
 8003914:	edc6 6a01 	vstr	s13, [r6, #4]
 8003918:	ed86 6a00 	vstr	s12, [r6]
 800391c:	ed95 6a01 	vldr	s12, [r5, #4]
 8003920:	ed95 7a00 	vldr	s14, [r5]
 8003924:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003926:	ee65 6a07 	vmul.f32	s13, s10, s14
 800392a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800392e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8003932:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003936:	ee37 5a45 	vsub.f32	s10, s14, s10
 800393a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800393e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8003942:	edcc 7a00 	vstr	s15, [ip]
 8003946:	6872      	ldr	r2, [r6, #4]
 8003948:	f000 f9fc 	bl	8003d44 <arm_radix8_butterfly_f32>
 800394c:	9802      	ldr	r0, [sp, #8]
 800394e:	4621      	mov	r1, r4
 8003950:	6872      	ldr	r2, [r6, #4]
 8003952:	2304      	movs	r3, #4
 8003954:	f000 f9f6 	bl	8003d44 <arm_radix8_butterfly_f32>
 8003958:	980a      	ldr	r0, [sp, #40]	; 0x28
 800395a:	4621      	mov	r1, r4
 800395c:	6872      	ldr	r2, [r6, #4]
 800395e:	2304      	movs	r3, #4
 8003960:	f000 f9f0 	bl	8003d44 <arm_radix8_butterfly_f32>
 8003964:	9803      	ldr	r0, [sp, #12]
 8003966:	4621      	mov	r1, r4
 8003968:	6872      	ldr	r2, [r6, #4]
 800396a:	2304      	movs	r3, #4
 800396c:	b00f      	add	sp, #60	; 0x3c
 800396e:	ecbd 8b06 	vpop	{d8-d10}
 8003972:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003976:	f000 b9e5 	b.w	8003d44 <arm_radix8_butterfly_f32>
 800397a:	bf00      	nop

0800397c <arm_cfft_f32>:
 800397c:	2a01      	cmp	r2, #1
 800397e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003982:	4606      	mov	r6, r0
 8003984:	4617      	mov	r7, r2
 8003986:	460c      	mov	r4, r1
 8003988:	4698      	mov	r8, r3
 800398a:	8805      	ldrh	r5, [r0, #0]
 800398c:	d053      	beq.n	8003a36 <arm_cfft_f32+0xba>
 800398e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003992:	d04b      	beq.n	8003a2c <arm_cfft_f32+0xb0>
 8003994:	d916      	bls.n	80039c4 <arm_cfft_f32+0x48>
 8003996:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800399a:	d01a      	beq.n	80039d2 <arm_cfft_f32+0x56>
 800399c:	d95a      	bls.n	8003a54 <arm_cfft_f32+0xd8>
 800399e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80039a2:	d043      	beq.n	8003a2c <arm_cfft_f32+0xb0>
 80039a4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80039a8:	d105      	bne.n	80039b6 <arm_cfft_f32+0x3a>
 80039aa:	4620      	mov	r0, r4
 80039ac:	4629      	mov	r1, r5
 80039ae:	6872      	ldr	r2, [r6, #4]
 80039b0:	2301      	movs	r3, #1
 80039b2:	f000 f9c7 	bl	8003d44 <arm_radix8_butterfly_f32>
 80039b6:	f1b8 0f00 	cmp.w	r8, #0
 80039ba:	d111      	bne.n	80039e0 <arm_cfft_f32+0x64>
 80039bc:	2f01      	cmp	r7, #1
 80039be:	d016      	beq.n	80039ee <arm_cfft_f32+0x72>
 80039c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039c4:	2d20      	cmp	r5, #32
 80039c6:	d031      	beq.n	8003a2c <arm_cfft_f32+0xb0>
 80039c8:	d948      	bls.n	8003a5c <arm_cfft_f32+0xe0>
 80039ca:	2d40      	cmp	r5, #64	; 0x40
 80039cc:	d0ed      	beq.n	80039aa <arm_cfft_f32+0x2e>
 80039ce:	2d80      	cmp	r5, #128	; 0x80
 80039d0:	d1f1      	bne.n	80039b6 <arm_cfft_f32+0x3a>
 80039d2:	4630      	mov	r0, r6
 80039d4:	4621      	mov	r1, r4
 80039d6:	f7ff fca7 	bl	8003328 <arm_cfft_radix8by2_f32>
 80039da:	f1b8 0f00 	cmp.w	r8, #0
 80039de:	d0ed      	beq.n	80039bc <arm_cfft_f32+0x40>
 80039e0:	4620      	mov	r0, r4
 80039e2:	89b1      	ldrh	r1, [r6, #12]
 80039e4:	68b2      	ldr	r2, [r6, #8]
 80039e6:	f7fc fc0b 	bl	8000200 <arm_bitreversal_32>
 80039ea:	2f01      	cmp	r7, #1
 80039ec:	d1e8      	bne.n	80039c0 <arm_cfft_f32+0x44>
 80039ee:	ee07 5a90 	vmov	s15, r5
 80039f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80039fa:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80039fe:	2d00      	cmp	r5, #0
 8003a00:	d0de      	beq.n	80039c0 <arm_cfft_f32+0x44>
 8003a02:	f104 0108 	add.w	r1, r4, #8
 8003a06:	2300      	movs	r3, #0
 8003a08:	ed11 7a02 	vldr	s14, [r1, #-8]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8003a12:	3108      	adds	r1, #8
 8003a14:	429d      	cmp	r5, r3
 8003a16:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003a1a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003a1e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8003a22:	ed41 7a03 	vstr	s15, [r1, #-12]
 8003a26:	d1ef      	bne.n	8003a08 <arm_cfft_f32+0x8c>
 8003a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	4621      	mov	r1, r4
 8003a30:	f7ff fd4c 	bl	80034cc <arm_cfft_radix8by4_f32>
 8003a34:	e7bf      	b.n	80039b6 <arm_cfft_f32+0x3a>
 8003a36:	b1a5      	cbz	r5, 8003a62 <arm_cfft_f32+0xe6>
 8003a38:	f101 030c 	add.w	r3, r1, #12
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8003a42:	3201      	adds	r2, #1
 8003a44:	3308      	adds	r3, #8
 8003a46:	eef1 7a67 	vneg.f32	s15, s15
 8003a4a:	4295      	cmp	r5, r2
 8003a4c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8003a50:	d1f5      	bne.n	8003a3e <arm_cfft_f32+0xc2>
 8003a52:	e79c      	b.n	800398e <arm_cfft_f32+0x12>
 8003a54:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8003a58:	d0a7      	beq.n	80039aa <arm_cfft_f32+0x2e>
 8003a5a:	e7ac      	b.n	80039b6 <arm_cfft_f32+0x3a>
 8003a5c:	2d10      	cmp	r5, #16
 8003a5e:	d0b8      	beq.n	80039d2 <arm_cfft_f32+0x56>
 8003a60:	e7a9      	b.n	80039b6 <arm_cfft_f32+0x3a>
 8003a62:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003a66:	d896      	bhi.n	8003996 <arm_cfft_f32+0x1a>
 8003a68:	e7ac      	b.n	80039c4 <arm_cfft_f32+0x48>
 8003a6a:	bf00      	nop

08003a6c <arm_cmplx_mag_f32>:
 8003a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a70:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8003a74:	b084      	sub	sp, #16
 8003a76:	d07f      	beq.n	8003b78 <arm_cmplx_mag_f32+0x10c>
 8003a78:	f100 0420 	add.w	r4, r0, #32
 8003a7c:	f101 0510 	add.w	r5, r1, #16
 8003a80:	4646      	mov	r6, r8
 8003a82:	2700      	movs	r7, #0
 8003a84:	e05a      	b.n	8003b3c <arm_cmplx_mag_f32+0xd0>
 8003a86:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003a8a:	eeb4 0a40 	vcmp.f32	s0, s0
 8003a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a92:	f040 80a4 	bne.w	8003bde <arm_cmplx_mag_f32+0x172>
 8003a96:	ed05 0a04 	vstr	s0, [r5, #-16]
 8003a9a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8003a9e:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8003aa2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003aa6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003aaa:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003aae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab6:	f2c0 808f 	blt.w	8003bd8 <arm_cmplx_mag_f32+0x16c>
 8003aba:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003abe:	eeb4 0a40 	vcmp.f32	s0, s0
 8003ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac6:	f040 80af 	bne.w	8003c28 <arm_cmplx_mag_f32+0x1bc>
 8003aca:	ed05 0a03 	vstr	s0, [r5, #-12]
 8003ace:	ed54 7a04 	vldr	s15, [r4, #-16]
 8003ad2:	ed14 0a03 	vldr	s0, [r4, #-12]
 8003ad6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003ada:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003ade:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003ae2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aea:	db72      	blt.n	8003bd2 <arm_cmplx_mag_f32+0x166>
 8003aec:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003af0:	eeb4 0a40 	vcmp.f32	s0, s0
 8003af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af8:	f040 808c 	bne.w	8003c14 <arm_cmplx_mag_f32+0x1a8>
 8003afc:	ed05 0a02 	vstr	s0, [r5, #-8]
 8003b00:	ed54 7a02 	vldr	s15, [r4, #-8]
 8003b04:	ed14 0a01 	vldr	s0, [r4, #-4]
 8003b08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003b0c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003b10:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003b14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1c:	db20      	blt.n	8003b60 <arm_cmplx_mag_f32+0xf4>
 8003b1e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003b22:	eeb4 0a40 	vcmp.f32	s0, s0
 8003b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2a:	d169      	bne.n	8003c00 <arm_cmplx_mag_f32+0x194>
 8003b2c:	3e01      	subs	r6, #1
 8003b2e:	ed05 0a01 	vstr	s0, [r5, #-4]
 8003b32:	f104 0420 	add.w	r4, r4, #32
 8003b36:	f105 0510 	add.w	r5, r5, #16
 8003b3a:	d019      	beq.n	8003b70 <arm_cmplx_mag_f32+0x104>
 8003b3c:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8003b40:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8003b44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003b48:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003b4c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b58:	da95      	bge.n	8003a86 <arm_cmplx_mag_f32+0x1a>
 8003b5a:	f845 7c10 	str.w	r7, [r5, #-16]
 8003b5e:	e79c      	b.n	8003a9a <arm_cmplx_mag_f32+0x2e>
 8003b60:	3e01      	subs	r6, #1
 8003b62:	f845 7c04 	str.w	r7, [r5, #-4]
 8003b66:	f104 0420 	add.w	r4, r4, #32
 8003b6a:	f105 0510 	add.w	r5, r5, #16
 8003b6e:	d1e5      	bne.n	8003b3c <arm_cmplx_mag_f32+0xd0>
 8003b70:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8003b74:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8003b78:	f012 0503 	ands.w	r5, r2, #3
 8003b7c:	d026      	beq.n	8003bcc <arm_cmplx_mag_f32+0x160>
 8003b7e:	f100 0408 	add.w	r4, r0, #8
 8003b82:	2600      	movs	r6, #0
 8003b84:	e00c      	b.n	8003ba0 <arm_cmplx_mag_f32+0x134>
 8003b86:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003b8a:	eeb4 0a40 	vcmp.f32	s0, s0
 8003b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b92:	d12e      	bne.n	8003bf2 <arm_cmplx_mag_f32+0x186>
 8003b94:	3d01      	subs	r5, #1
 8003b96:	ed01 0a01 	vstr	s0, [r1, #-4]
 8003b9a:	f104 0408 	add.w	r4, r4, #8
 8003b9e:	d015      	beq.n	8003bcc <arm_cmplx_mag_f32+0x160>
 8003ba0:	ed54 7a02 	vldr	s15, [r4, #-8]
 8003ba4:	3104      	adds	r1, #4
 8003ba6:	ed14 0a01 	vldr	s0, [r4, #-4]
 8003baa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003bae:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003bb2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003bb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bbe:	dae2      	bge.n	8003b86 <arm_cmplx_mag_f32+0x11a>
 8003bc0:	3d01      	subs	r5, #1
 8003bc2:	f841 6c04 	str.w	r6, [r1, #-4]
 8003bc6:	f104 0408 	add.w	r4, r4, #8
 8003bca:	d1e9      	bne.n	8003ba0 <arm_cmplx_mag_f32+0x134>
 8003bcc:	b004      	add	sp, #16
 8003bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bd2:	f845 7c08 	str.w	r7, [r5, #-8]
 8003bd6:	e793      	b.n	8003b00 <arm_cmplx_mag_f32+0x94>
 8003bd8:	f845 7c0c 	str.w	r7, [r5, #-12]
 8003bdc:	e777      	b.n	8003ace <arm_cmplx_mag_f32+0x62>
 8003bde:	eeb0 0a67 	vmov.f32	s0, s15
 8003be2:	9203      	str	r2, [sp, #12]
 8003be4:	9102      	str	r1, [sp, #8]
 8003be6:	9001      	str	r0, [sp, #4]
 8003be8:	f003 fa06 	bl	8006ff8 <sqrtf>
 8003bec:	a801      	add	r0, sp, #4
 8003bee:	c807      	ldmia	r0, {r0, r1, r2}
 8003bf0:	e751      	b.n	8003a96 <arm_cmplx_mag_f32+0x2a>
 8003bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf6:	9101      	str	r1, [sp, #4]
 8003bf8:	f003 f9fe 	bl	8006ff8 <sqrtf>
 8003bfc:	9901      	ldr	r1, [sp, #4]
 8003bfe:	e7c9      	b.n	8003b94 <arm_cmplx_mag_f32+0x128>
 8003c00:	eeb0 0a67 	vmov.f32	s0, s15
 8003c04:	9203      	str	r2, [sp, #12]
 8003c06:	9102      	str	r1, [sp, #8]
 8003c08:	9001      	str	r0, [sp, #4]
 8003c0a:	f003 f9f5 	bl	8006ff8 <sqrtf>
 8003c0e:	a801      	add	r0, sp, #4
 8003c10:	c807      	ldmia	r0, {r0, r1, r2}
 8003c12:	e78b      	b.n	8003b2c <arm_cmplx_mag_f32+0xc0>
 8003c14:	eeb0 0a67 	vmov.f32	s0, s15
 8003c18:	9203      	str	r2, [sp, #12]
 8003c1a:	9102      	str	r1, [sp, #8]
 8003c1c:	9001      	str	r0, [sp, #4]
 8003c1e:	f003 f9eb 	bl	8006ff8 <sqrtf>
 8003c22:	a801      	add	r0, sp, #4
 8003c24:	c807      	ldmia	r0, {r0, r1, r2}
 8003c26:	e769      	b.n	8003afc <arm_cmplx_mag_f32+0x90>
 8003c28:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2c:	9203      	str	r2, [sp, #12]
 8003c2e:	9102      	str	r1, [sp, #8]
 8003c30:	9001      	str	r0, [sp, #4]
 8003c32:	f003 f9e1 	bl	8006ff8 <sqrtf>
 8003c36:	a801      	add	r0, sp, #4
 8003c38:	c807      	ldmia	r0, {r0, r1, r2}
 8003c3a:	e746      	b.n	8003aca <arm_cmplx_mag_f32+0x5e>

08003c3c <arm_sin_f32>:
 8003c3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003c40:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003cb8 <arm_sin_f32+0x7c>
 8003c44:	ee20 7a07 	vmul.f32	s14, s0, s14
 8003c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8003c50:	d42c      	bmi.n	8003cac <arm_sin_f32+0x70>
 8003c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c56:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003cbc <arm_sin_f32+0x80>
 8003c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c62:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6a:	db01      	blt.n	8003c70 <arm_sin_f32+0x34>
 8003c6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003c70:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8003c74:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <arm_sin_f32+0x84>)
 8003c76:	ee17 3a10 	vmov	r3, s14
 8003c7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c82:	ee06 3a90 	vmov	s13, r3
 8003c86:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003c8a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003c8e:	ed91 0a00 	vldr	s0, [r1]
 8003c92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003c96:	edd1 6a01 	vldr	s13, [r1, #4]
 8003c9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ca2:	ee27 0a00 	vmul.f32	s0, s14, s0
 8003ca6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003caa:	4770      	bx	lr
 8003cac:	ee17 3a90 	vmov	r3, s15
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	e7cc      	b.n	8003c52 <arm_sin_f32+0x16>
 8003cb8:	3e22f983 	.word	0x3e22f983
 8003cbc:	44000000 	.word	0x44000000
 8003cc0:	0801516c 	.word	0x0801516c

08003cc4 <arm_cos_f32>:
 8003cc4:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003d38 <arm_cos_f32+0x74>
 8003cc8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003ccc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003cd0:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003cd4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003cd8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce0:	d504      	bpl.n	8003cec <arm_cos_f32+0x28>
 8003ce2:	ee17 3a90 	vmov	r3, s15
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf0:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003d3c <arm_cos_f32+0x78>
 8003cf4:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <arm_cos_f32+0x7c>)
 8003cf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cfa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003cfe:	ee20 0a26 	vmul.f32	s0, s0, s13
 8003d02:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003d06:	ee17 3a90 	vmov	r3, s15
 8003d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1a:	edd1 6a00 	vldr	s13, [r1]
 8003d1e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8003d22:	ed91 0a01 	vldr	s0, [r1, #4]
 8003d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d2a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003d2e:	ee27 0a26 	vmul.f32	s0, s14, s13
 8003d32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003d36:	4770      	bx	lr
 8003d38:	3e22f983 	.word	0x3e22f983
 8003d3c:	44000000 	.word	0x44000000
 8003d40:	0801516c 	.word	0x0801516c

08003d44 <arm_radix8_butterfly_f32>:
 8003d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d48:	469e      	mov	lr, r3
 8003d4a:	1d03      	adds	r3, r0, #4
 8003d4c:	4683      	mov	fp, r0
 8003d4e:	468a      	mov	sl, r1
 8003d50:	4688      	mov	r8, r1
 8003d52:	469c      	mov	ip, r3
 8003d54:	ed2d 8b10 	vpush	{d8-d15}
 8003d58:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 800406c <arm_radix8_butterfly_f32+0x328>
 8003d5c:	b09f      	sub	sp, #124	; 0x7c
 8003d5e:	921c      	str	r2, [sp, #112]	; 0x70
 8003d60:	931d      	str	r3, [sp, #116]	; 0x74
 8003d62:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8003d66:	f04f 0900 	mov.w	r9, #0
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	930e      	str	r3, [sp, #56]	; 0x38
 8003d6e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003d72:	0051      	lsls	r1, r2, #1
 8003d74:	4608      	mov	r0, r1
 8003d76:	9103      	str	r1, [sp, #12]
 8003d78:	00d1      	lsls	r1, r2, #3
 8003d7a:	1885      	adds	r5, r0, r2
 8003d7c:	0110      	lsls	r0, r2, #4
 8003d7e:	eb0b 0601 	add.w	r6, fp, r1
 8003d82:	9101      	str	r1, [sp, #4]
 8003d84:	18ac      	adds	r4, r5, r2
 8003d86:	9002      	str	r0, [sp, #8]
 8003d88:	1877      	adds	r7, r6, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4422      	add	r2, r4
 8003d8e:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8003d92:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8003d96:	1850      	adds	r0, r2, r1
 8003d98:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8003d9c:	4401      	add	r1, r0
 8003d9e:	3204      	adds	r2, #4
 8003da0:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8003da4:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8003da8:	3104      	adds	r1, #4
 8003daa:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8003dae:	44c1      	add	r9, r8
 8003db0:	edd4 6a00 	vldr	s13, [r4]
 8003db4:	ed97 6a00 	vldr	s12, [r7]
 8003db8:	45ca      	cmp	sl, r9
 8003dba:	edd0 7a00 	vldr	s15, [r0]
 8003dbe:	ee37 5a66 	vsub.f32	s10, s14, s13
 8003dc2:	edd6 5a00 	vldr	s11, [r6]
 8003dc6:	ee37 2a26 	vadd.f32	s4, s14, s13
 8003dca:	ee76 2a67 	vsub.f32	s5, s12, s15
 8003dce:	edd5 6a00 	vldr	s13, [r5]
 8003dd2:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003dd6:	ee76 4a27 	vadd.f32	s9, s12, s15
 8003dda:	ed11 6a01 	vldr	s12, [r1, #-4]
 8003dde:	ee75 1a87 	vadd.f32	s3, s11, s14
 8003de2:	ee36 4a86 	vadd.f32	s8, s13, s12
 8003de6:	ee72 7a24 	vadd.f32	s15, s4, s9
 8003dea:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8003dee:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8003df2:	ee31 6a84 	vadd.f32	s12, s3, s8
 8003df6:	ee32 2a64 	vsub.f32	s4, s4, s9
 8003dfa:	ee77 6a65 	vsub.f32	s13, s14, s11
 8003dfe:	ee77 4a86 	vadd.f32	s9, s15, s12
 8003e02:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003e06:	ee37 7a25 	vadd.f32	s14, s14, s11
 8003e0a:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8003e0e:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8003e12:	edc4 7a00 	vstr	s15, [r4]
 8003e16:	ee66 6a89 	vmul.f32	s13, s13, s18
 8003e1a:	edd6 5a01 	vldr	s11, [r6, #4]
 8003e1e:	ee27 6a09 	vmul.f32	s12, s14, s18
 8003e22:	edd5 3a01 	vldr	s7, [r5, #4]
 8003e26:	ed92 4a00 	vldr	s8, [r2]
 8003e2a:	ee35 1a26 	vadd.f32	s2, s10, s13
 8003e2e:	edd1 4a00 	vldr	s9, [r1]
 8003e32:	ee75 6a66 	vsub.f32	s13, s10, s13
 8003e36:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8003e3a:	ed94 0a01 	vldr	s0, [r4, #4]
 8003e3e:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8003e42:	ed9c 7a00 	vldr	s14, [ip]
 8003e46:	edd0 0a01 	vldr	s1, [r0, #4]
 8003e4a:	ee35 4a84 	vadd.f32	s8, s11, s8
 8003e4e:	ed97 5a01 	vldr	s10, [r7, #4]
 8003e52:	ee73 4aa4 	vadd.f32	s9, s7, s9
 8003e56:	ee73 5a27 	vadd.f32	s11, s6, s15
 8003e5a:	ee77 3a00 	vadd.f32	s7, s14, s0
 8003e5e:	ee33 3a67 	vsub.f32	s6, s6, s15
 8003e62:	ee37 7a40 	vsub.f32	s14, s14, s0
 8003e66:	ee35 0a20 	vadd.f32	s0, s10, s1
 8003e6a:	ee63 7a09 	vmul.f32	s15, s6, s18
 8003e6e:	ee35 5a60 	vsub.f32	s10, s10, s1
 8003e72:	ee33 3a80 	vadd.f32	s6, s7, s0
 8003e76:	ee74 0a24 	vadd.f32	s1, s8, s9
 8003e7a:	ee65 5a89 	vmul.f32	s11, s11, s18
 8003e7e:	ee74 4a64 	vsub.f32	s9, s8, s9
 8003e82:	ee33 4ac0 	vsub.f32	s8, s7, s0
 8003e86:	ee75 3a25 	vadd.f32	s7, s10, s11
 8003e8a:	ee75 5a65 	vsub.f32	s11, s10, s11
 8003e8e:	ee37 5a27 	vadd.f32	s10, s14, s15
 8003e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e96:	ee32 7a86 	vadd.f32	s14, s5, s12
 8003e9a:	ee32 6ac6 	vsub.f32	s12, s5, s12
 8003e9e:	ee73 2a20 	vadd.f32	s5, s6, s1
 8003ea2:	ee33 3a60 	vsub.f32	s6, s6, s1
 8003ea6:	ee72 0a24 	vadd.f32	s1, s4, s9
 8003eaa:	edcc 2a00 	vstr	s5, [ip]
 8003eae:	ee72 4a64 	vsub.f32	s9, s4, s9
 8003eb2:	ed84 3a01 	vstr	s6, [r4, #4]
 8003eb6:	ee74 2a61 	vsub.f32	s5, s8, s3
 8003eba:	ee31 3a23 	vadd.f32	s6, s2, s7
 8003ebe:	edc7 0a00 	vstr	s1, [r7]
 8003ec2:	ee31 1a63 	vsub.f32	s2, s2, s7
 8003ec6:	edc0 4a00 	vstr	s9, [r0]
 8003eca:	ee76 3aa5 	vadd.f32	s7, s13, s11
 8003ece:	edc7 2a01 	vstr	s5, [r7, #4]
 8003ed2:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8003ed6:	441c      	add	r4, r3
 8003ed8:	ee75 5a47 	vsub.f32	s11, s10, s14
 8003edc:	449c      	add	ip, r3
 8003ede:	ee35 5a07 	vadd.f32	s10, s10, s14
 8003ee2:	441f      	add	r7, r3
 8003ee4:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8003ee8:	ee34 4a21 	vadd.f32	s8, s8, s3
 8003eec:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003ef0:	ed80 4a01 	vstr	s8, [r0, #4]
 8003ef4:	4418      	add	r0, r3
 8003ef6:	ed86 3a00 	vstr	s6, [r6]
 8003efa:	ed01 1a01 	vstr	s2, [r1, #-4]
 8003efe:	ed42 3a01 	vstr	s7, [r2, #-4]
 8003f02:	edc5 6a00 	vstr	s13, [r5]
 8003f06:	edc6 5a01 	vstr	s11, [r6, #4]
 8003f0a:	441e      	add	r6, r3
 8003f0c:	ed81 5a00 	vstr	s10, [r1]
 8003f10:	4419      	add	r1, r3
 8003f12:	ed82 7a00 	vstr	s14, [r2]
 8003f16:	441a      	add	r2, r3
 8003f18:	edc5 7a01 	vstr	s15, [r5, #4]
 8003f1c:	441d      	add	r5, r3
 8003f1e:	f63f af44 	bhi.w	8003daa <arm_radix8_butterfly_f32+0x66>
 8003f22:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8003f24:	2f07      	cmp	r7, #7
 8003f26:	f240 81e8 	bls.w	80042fa <arm_radix8_butterfly_f32+0x5b6>
 8003f2a:	9903      	ldr	r1, [sp, #12]
 8003f2c:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 8003f30:	9e01      	ldr	r6, [sp, #4]
 8003f32:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8003f36:	19ca      	adds	r2, r1, r7
 8003f38:	1c4c      	adds	r4, r1, #1
 8003f3a:	eb05 010e 	add.w	r1, r5, lr
 8003f3e:	00ed      	lsls	r5, r5, #3
 8003f40:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8003f44:	3608      	adds	r6, #8
 8003f46:	950f      	str	r5, [sp, #60]	; 0x3c
 8003f48:	eb01 050e 	add.w	r5, r1, lr
 8003f4c:	00c9      	lsls	r1, r1, #3
 8003f4e:	443c      	add	r4, r7
 8003f50:	9618      	str	r6, [sp, #96]	; 0x60
 8003f52:	00ee      	lsls	r6, r5, #3
 8003f54:	460f      	mov	r7, r1
 8003f56:	9114      	str	r1, [sp, #80]	; 0x50
 8003f58:	9902      	ldr	r1, [sp, #8]
 8003f5a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8003f5e:	9611      	str	r6, [sp, #68]	; 0x44
 8003f60:	00c0      	lsls	r0, r0, #3
 8003f62:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8003f64:	3108      	adds	r1, #8
 8003f66:	3404      	adds	r4, #4
 8003f68:	f04f 0901 	mov.w	r9, #1
 8003f6c:	9119      	str	r1, [sp, #100]	; 0x64
 8003f6e:	eb05 010e 	add.w	r1, r5, lr
 8003f72:	4635      	mov	r5, r6
 8003f74:	940b      	str	r4, [sp, #44]	; 0x2c
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	443d      	add	r5, r7
 8003f7a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8003f7c:	9507      	str	r5, [sp, #28]
 8003f7e:	eb01 050e 	add.w	r5, r1, lr
 8003f82:	00c9      	lsls	r1, r1, #3
 8003f84:	19f7      	adds	r7, r6, r7
 8003f86:	00ed      	lsls	r5, r5, #3
 8003f88:	9110      	str	r1, [sp, #64]	; 0x40
 8003f8a:	00d1      	lsls	r1, r2, #3
 8003f8c:	970a      	str	r7, [sp, #40]	; 0x28
 8003f8e:	462f      	mov	r7, r5
 8003f90:	9515      	str	r5, [sp, #84]	; 0x54
 8003f92:	0112      	lsls	r2, r2, #4
 8003f94:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f96:	19f4      	adds	r4, r6, r7
 8003f98:	320c      	adds	r2, #12
 8003f9a:	3108      	adds	r1, #8
 8003f9c:	1975      	adds	r5, r6, r5
 8003f9e:	9408      	str	r4, [sp, #32]
 8003fa0:	9217      	str	r2, [sp, #92]	; 0x5c
 8003fa2:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8003fa6:	9509      	str	r5, [sp, #36]	; 0x24
 8003fa8:	f100 020c 	add.w	r2, r0, #12
 8003fac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003fae:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8003fb0:	1975      	adds	r5, r6, r5
 8003fb2:	9216      	str	r2, [sp, #88]	; 0x58
 8003fb4:	1932      	adds	r2, r6, r4
 8003fb6:	911b      	str	r1, [sp, #108]	; 0x6c
 8003fb8:	9505      	str	r5, [sp, #20]
 8003fba:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8003fbe:	0179      	lsls	r1, r7, #5
 8003fc0:	9204      	str	r2, [sp, #16]
 8003fc2:	1972      	adds	r2, r6, r5
 8003fc4:	9412      	str	r4, [sp, #72]	; 0x48
 8003fc6:	9513      	str	r5, [sp, #76]	; 0x4c
 8003fc8:	9206      	str	r2, [sp, #24]
 8003fca:	f101 0208 	add.w	r2, r1, #8
 8003fce:	921a      	str	r2, [sp, #104]	; 0x68
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f102 0108 	add.w	r1, r2, #8
 8003fd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003fd8:	46cc      	mov	ip, r9
 8003fda:	460f      	mov	r7, r1
 8003fdc:	910c      	str	r1, [sp, #48]	; 0x30
 8003fde:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003fe0:	eb0b 0e07 	add.w	lr, fp, r7
 8003fe4:	9f04      	ldr	r7, [sp, #16]
 8003fe6:	188e      	adds	r6, r1, r2
 8003fe8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003fea:	edd7 fa00 	vldr	s31, [r7]
 8003fee:	9f06      	ldr	r7, [sp, #24]
 8003ff0:	188d      	adds	r5, r1, r2
 8003ff2:	9919      	ldr	r1, [sp, #100]	; 0x64
 8003ff4:	445e      	add	r6, fp
 8003ff6:	ed97 fa00 	vldr	s30, [r7]
 8003ffa:	445d      	add	r5, fp
 8003ffc:	9f05      	ldr	r7, [sp, #20]
 8003ffe:	188c      	adds	r4, r1, r2
 8004000:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004002:	edd7 ea00 	vldr	s29, [r7]
 8004006:	445c      	add	r4, fp
 8004008:	9f07      	ldr	r7, [sp, #28]
 800400a:	1888      	adds	r0, r1, r2
 800400c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800400e:	ed97 ea00 	vldr	s28, [r7]
 8004012:	4458      	add	r0, fp
 8004014:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004016:	4411      	add	r1, r2
 8004018:	441a      	add	r2, r3
 800401a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800401c:	edd7 da00 	vldr	s27, [r7]
 8004020:	4459      	add	r1, fp
 8004022:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004024:	445a      	add	r2, fp
 8004026:	930d      	str	r3, [sp, #52]	; 0x34
 8004028:	ed97 da00 	vldr	s26, [r7]
 800402c:	9f08      	ldr	r7, [sp, #32]
 800402e:	edd7 ca00 	vldr	s25, [r7]
 8004032:	9f04      	ldr	r7, [sp, #16]
 8004034:	ed97 ca01 	vldr	s24, [r7, #4]
 8004038:	9f06      	ldr	r7, [sp, #24]
 800403a:	edd7 ba01 	vldr	s23, [r7, #4]
 800403e:	9f05      	ldr	r7, [sp, #20]
 8004040:	ed97 ba01 	vldr	s22, [r7, #4]
 8004044:	9f07      	ldr	r7, [sp, #28]
 8004046:	edd7 aa01 	vldr	s21, [r7, #4]
 800404a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800404c:	ed97 aa01 	vldr	s20, [r7, #4]
 8004050:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004052:	9b01      	ldr	r3, [sp, #4]
 8004054:	edd7 7a01 	vldr	s15, [r7, #4]
 8004058:	9f08      	ldr	r7, [sp, #32]
 800405a:	edcd 7a02 	vstr	s15, [sp, #8]
 800405e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004062:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004064:	edcd 7a03 	vstr	s15, [sp, #12]
 8004068:	e002      	b.n	8004070 <arm_radix8_butterfly_f32+0x32c>
 800406a:	bf00      	nop
 800406c:	3f3504f3 	.word	0x3f3504f3
 8004070:	ed90 2a00 	vldr	s4, [r0]
 8004074:	44c4      	add	ip, r8
 8004076:	ed96 7a00 	vldr	s14, [r6]
 800407a:	ed94 8a00 	vldr	s16, [r4]
 800407e:	45e2      	cmp	sl, ip
 8004080:	ed52 7a01 	vldr	s15, [r2, #-4]
 8004084:	ed95 5a00 	vldr	s10, [r5]
 8004088:	ed51 5a01 	vldr	s11, [r1, #-4]
 800408c:	ee38 6a27 	vadd.f32	s12, s16, s15
 8004090:	ed9e 1a00 	vldr	s2, [lr]
 8004094:	ee78 2a67 	vsub.f32	s5, s16, s15
 8004098:	ed17 4a01 	vldr	s8, [r7, #-4]
 800409c:	ee75 3a25 	vadd.f32	s7, s10, s11
 80040a0:	ee31 3a07 	vadd.f32	s6, s2, s14
 80040a4:	edde 4a01 	vldr	s9, [lr, #4]
 80040a8:	ee72 6a04 	vadd.f32	s13, s4, s8
 80040ac:	ee75 5a65 	vsub.f32	s11, s10, s11
 80040b0:	ee73 1a06 	vadd.f32	s3, s6, s12
 80040b4:	ee33 5aa6 	vadd.f32	s10, s7, s13
 80040b8:	ee32 4a44 	vsub.f32	s8, s4, s8
 80040bc:	ee31 1a47 	vsub.f32	s2, s2, s14
 80040c0:	ee31 7a85 	vadd.f32	s14, s3, s10
 80040c4:	ee75 7a84 	vadd.f32	s15, s11, s8
 80040c8:	ee33 3a46 	vsub.f32	s6, s6, s12
 80040cc:	ed8e 7a00 	vstr	s14, [lr]
 80040d0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80040d4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80040d8:	ed90 2a01 	vldr	s4, [r0, #4]
 80040dc:	ed95 7a01 	vldr	s14, [r5, #4]
 80040e0:	ee35 4ac4 	vsub.f32	s8, s11, s8
 80040e4:	ed91 6a00 	vldr	s12, [r1]
 80040e8:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80040ec:	edd7 8a00 	vldr	s17, [r7]
 80040f0:	ee32 8ae7 	vsub.f32	s16, s5, s15
 80040f4:	ee72 5aa7 	vadd.f32	s11, s5, s15
 80040f8:	edd2 0a00 	vldr	s1, [r2]
 80040fc:	ee72 6a68 	vsub.f32	s13, s4, s17
 8004100:	edd6 7a01 	vldr	s15, [r6, #4]
 8004104:	ee77 2a46 	vsub.f32	s5, s14, s12
 8004108:	ee37 0a06 	vadd.f32	s0, s14, s12
 800410c:	ed94 7a01 	vldr	s14, [r4, #4]
 8004110:	ee32 6a28 	vadd.f32	s12, s4, s17
 8004114:	ee72 9ae6 	vsub.f32	s19, s5, s13
 8004118:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800411c:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8004120:	ee77 6a20 	vadd.f32	s13, s14, s1
 8004124:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8004128:	ee37 7a60 	vsub.f32	s14, s14, s1
 800412c:	ee24 4a09 	vmul.f32	s8, s8, s18
 8004130:	ee70 0a06 	vadd.f32	s1, s0, s12
 8004134:	ee69 7a89 	vmul.f32	s15, s19, s18
 8004138:	ee62 2a89 	vmul.f32	s5, s5, s18
 800413c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004140:	ee32 0a26 	vadd.f32	s0, s4, s13
 8004144:	ee72 6a66 	vsub.f32	s13, s4, s13
 8004148:	ee77 8a62 	vsub.f32	s17, s14, s5
 800414c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8004150:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8004154:	ee77 4a22 	vadd.f32	s9, s14, s5
 8004158:	ee71 2a04 	vadd.f32	s5, s2, s8
 800415c:	ee31 7a44 	vsub.f32	s14, s2, s8
 8004160:	ee30 1a60 	vsub.f32	s2, s0, s1
 8004164:	ee73 1a06 	vadd.f32	s3, s6, s12
 8004168:	ee33 6a46 	vsub.f32	s12, s6, s12
 800416c:	ee36 3ae3 	vsub.f32	s6, s13, s7
 8004170:	ee37 4ac8 	vsub.f32	s8, s15, s16
 8004174:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8004178:	ee77 7a88 	vadd.f32	s15, s15, s16
 800417c:	ee72 3a65 	vsub.f32	s7, s4, s11
 8004180:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8004184:	ee72 5a25 	vadd.f32	s11, s4, s11
 8004188:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800418c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8004190:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8004194:	ee77 2a28 	vadd.f32	s5, s14, s17
 8004198:	ee37 7a68 	vsub.f32	s14, s14, s17
 800419c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 80041a0:	ee2a 5a85 	vmul.f32	s10, s21, s10
 80041a4:	ee6f 9a21 	vmul.f32	s19, s30, s3
 80041a8:	ee70 0a20 	vadd.f32	s1, s0, s1
 80041ac:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 80041b0:	ee2b 0a83 	vmul.f32	s0, s23, s6
 80041b4:	ee2f 3a03 	vmul.f32	s6, s30, s6
 80041b8:	edce 0a01 	vstr	s1, [lr, #4]
 80041bc:	ee38 8a88 	vadd.f32	s16, s17, s16
 80041c0:	449e      	add	lr, r3
 80041c2:	ee6c 8a23 	vmul.f32	s17, s24, s7
 80041c6:	ee31 5a45 	vsub.f32	s10, s2, s10
 80041ca:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 80041ce:	ed86 8a00 	vstr	s16, [r6]
 80041d2:	ee39 0a80 	vadd.f32	s0, s19, s0
 80041d6:	ee33 3a61 	vsub.f32	s6, s6, s3
 80041da:	ed86 5a01 	vstr	s10, [r6, #4]
 80041de:	ee6f 0a82 	vmul.f32	s1, s31, s4
 80041e2:	edcd 3a01 	vstr	s7, [sp, #4]
 80041e6:	ed9d 5a03 	vldr	s10, [sp, #12]
 80041ea:	ee2d 8a06 	vmul.f32	s16, s26, s12
 80041ee:	eddd 3a02 	vldr	s7, [sp, #8]
 80041f2:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 80041f6:	ed84 0a00 	vstr	s0, [r4]
 80041fa:	ee65 4a24 	vmul.f32	s9, s10, s9
 80041fe:	ed84 3a01 	vstr	s6, [r4, #4]
 8004202:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8004206:	ee23 6a86 	vmul.f32	s12, s7, s12
 800420a:	eddd 3a01 	vldr	s7, [sp, #4]
 800420e:	ee25 5a25 	vmul.f32	s10, s10, s11
 8004212:	441e      	add	r6, r3
 8004214:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8004218:	441c      	add	r4, r3
 800421a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800421e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8004222:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8004226:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800422a:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800422e:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8004232:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8004236:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800423a:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800423e:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8004242:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8004246:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800424a:	ee38 8a01 	vadd.f32	s16, s16, s2
 800424e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8004252:	ee39 5a85 	vadd.f32	s10, s19, s10
 8004256:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800425a:	ed02 8a01 	vstr	s16, [r2, #-4]
 800425e:	ee30 0a21 	vadd.f32	s0, s0, s3
 8004262:	ed82 6a00 	vstr	s12, [r2]
 8004266:	ee74 2a62 	vsub.f32	s5, s8, s5
 800426a:	edc5 0a00 	vstr	s1, [r5]
 800426e:	ee33 3a28 	vadd.f32	s6, s6, s17
 8004272:	edc5 3a01 	vstr	s7, [r5, #4]
 8004276:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800427a:	ed07 5a01 	vstr	s10, [r7, #-4]
 800427e:	edc7 4a00 	vstr	s9, [r7]
 8004282:	441d      	add	r5, r3
 8004284:	ed01 0a01 	vstr	s0, [r1, #-4]
 8004288:	441a      	add	r2, r3
 800428a:	edc1 2a00 	vstr	s5, [r1]
 800428e:	441f      	add	r7, r3
 8004290:	ed80 3a00 	vstr	s6, [r0]
 8004294:	4419      	add	r1, r3
 8004296:	ed80 7a01 	vstr	s14, [r0, #4]
 800429a:	4418      	add	r0, r3
 800429c:	f63f aee8 	bhi.w	8004070 <arm_radix8_butterfly_f32+0x32c>
 80042a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80042a2:	f109 0901 	add.w	r9, r9, #1
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	9b04      	ldr	r3, [sp, #16]
 80042aa:	4413      	add	r3, r2
 80042ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80042ae:	9304      	str	r3, [sp, #16]
 80042b0:	9b06      	ldr	r3, [sp, #24]
 80042b2:	4413      	add	r3, r2
 80042b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042b6:	9306      	str	r3, [sp, #24]
 80042b8:	9b05      	ldr	r3, [sp, #20]
 80042ba:	4413      	add	r3, r2
 80042bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80042be:	9305      	str	r3, [sp, #20]
 80042c0:	9b07      	ldr	r3, [sp, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80042c6:	9307      	str	r3, [sp, #28]
 80042c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042ca:	4413      	add	r3, r2
 80042cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80042ce:	930a      	str	r3, [sp, #40]	; 0x28
 80042d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d2:	4413      	add	r3, r2
 80042d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80042d6:	9309      	str	r3, [sp, #36]	; 0x24
 80042d8:	9b08      	ldr	r3, [sp, #32]
 80042da:	4413      	add	r3, r2
 80042dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042de:	9308      	str	r3, [sp, #32]
 80042e0:	3208      	adds	r2, #8
 80042e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80042e6:	4599      	cmp	r9, r3
 80042e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042ea:	f47f ae72 	bne.w	8003fd2 <arm_radix8_butterfly_f32+0x28e>
 80042ee:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 80042f2:	46c8      	mov	r8, r9
 80042f4:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 80042f8:	e533      	b.n	8003d62 <arm_radix8_butterfly_f32+0x1e>
 80042fa:	b01f      	add	sp, #124	; 0x7c
 80042fc:	ecbd 8b10 	vpop	{d8-d15}
 8004300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004304 <__errno>:
 8004304:	4b01      	ldr	r3, [pc, #4]	; (800430c <__errno+0x8>)
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000420 	.word	0x20000420

08004310 <__libc_init_array>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	4d0d      	ldr	r5, [pc, #52]	; (8004348 <__libc_init_array+0x38>)
 8004314:	4c0d      	ldr	r4, [pc, #52]	; (800434c <__libc_init_array+0x3c>)
 8004316:	1b64      	subs	r4, r4, r5
 8004318:	10a4      	asrs	r4, r4, #2
 800431a:	2600      	movs	r6, #0
 800431c:	42a6      	cmp	r6, r4
 800431e:	d109      	bne.n	8004334 <__libc_init_array+0x24>
 8004320:	4d0b      	ldr	r5, [pc, #44]	; (8004350 <__libc_init_array+0x40>)
 8004322:	4c0c      	ldr	r4, [pc, #48]	; (8004354 <__libc_init_array+0x44>)
 8004324:	f003 f9ee 	bl	8007704 <_init>
 8004328:	1b64      	subs	r4, r4, r5
 800432a:	10a4      	asrs	r4, r4, #2
 800432c:	2600      	movs	r6, #0
 800432e:	42a6      	cmp	r6, r4
 8004330:	d105      	bne.n	800433e <__libc_init_array+0x2e>
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	f855 3b04 	ldr.w	r3, [r5], #4
 8004338:	4798      	blx	r3
 800433a:	3601      	adds	r6, #1
 800433c:	e7ee      	b.n	800431c <__libc_init_array+0xc>
 800433e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004342:	4798      	blx	r3
 8004344:	3601      	adds	r6, #1
 8004346:	e7f2      	b.n	800432e <__libc_init_array+0x1e>
 8004348:	0801b7bc 	.word	0x0801b7bc
 800434c:	0801b7bc 	.word	0x0801b7bc
 8004350:	0801b7bc 	.word	0x0801b7bc
 8004354:	0801b7c0 	.word	0x0801b7c0

08004358 <memset>:
 8004358:	4402      	add	r2, r0
 800435a:	4603      	mov	r3, r0
 800435c:	4293      	cmp	r3, r2
 800435e:	d100      	bne.n	8004362 <memset+0xa>
 8004360:	4770      	bx	lr
 8004362:	f803 1b01 	strb.w	r1, [r3], #1
 8004366:	e7f9      	b.n	800435c <memset+0x4>

08004368 <__cvt>:
 8004368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800436a:	ed2d 8b02 	vpush	{d8}
 800436e:	eeb0 8b40 	vmov.f64	d8, d0
 8004372:	b085      	sub	sp, #20
 8004374:	4617      	mov	r7, r2
 8004376:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004378:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800437a:	ee18 2a90 	vmov	r2, s17
 800437e:	f025 0520 	bic.w	r5, r5, #32
 8004382:	2a00      	cmp	r2, #0
 8004384:	bfb6      	itet	lt
 8004386:	222d      	movlt	r2, #45	; 0x2d
 8004388:	2200      	movge	r2, #0
 800438a:	eeb1 8b40 	vneglt.f64	d8, d0
 800438e:	2d46      	cmp	r5, #70	; 0x46
 8004390:	460c      	mov	r4, r1
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	d004      	beq.n	80043a0 <__cvt+0x38>
 8004396:	2d45      	cmp	r5, #69	; 0x45
 8004398:	d100      	bne.n	800439c <__cvt+0x34>
 800439a:	3401      	adds	r4, #1
 800439c:	2102      	movs	r1, #2
 800439e:	e000      	b.n	80043a2 <__cvt+0x3a>
 80043a0:	2103      	movs	r1, #3
 80043a2:	ab03      	add	r3, sp, #12
 80043a4:	9301      	str	r3, [sp, #4]
 80043a6:	ab02      	add	r3, sp, #8
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	4622      	mov	r2, r4
 80043ac:	4633      	mov	r3, r6
 80043ae:	eeb0 0b48 	vmov.f64	d0, d8
 80043b2:	f000 fcbd 	bl	8004d30 <_dtoa_r>
 80043b6:	2d47      	cmp	r5, #71	; 0x47
 80043b8:	d101      	bne.n	80043be <__cvt+0x56>
 80043ba:	07fb      	lsls	r3, r7, #31
 80043bc:	d51a      	bpl.n	80043f4 <__cvt+0x8c>
 80043be:	2d46      	cmp	r5, #70	; 0x46
 80043c0:	eb00 0204 	add.w	r2, r0, r4
 80043c4:	d10c      	bne.n	80043e0 <__cvt+0x78>
 80043c6:	7803      	ldrb	r3, [r0, #0]
 80043c8:	2b30      	cmp	r3, #48	; 0x30
 80043ca:	d107      	bne.n	80043dc <__cvt+0x74>
 80043cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80043d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d4:	bf1c      	itt	ne
 80043d6:	f1c4 0401 	rsbne	r4, r4, #1
 80043da:	6034      	strne	r4, [r6, #0]
 80043dc:	6833      	ldr	r3, [r6, #0]
 80043de:	441a      	add	r2, r3
 80043e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80043e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e8:	bf08      	it	eq
 80043ea:	9203      	streq	r2, [sp, #12]
 80043ec:	2130      	movs	r1, #48	; 0x30
 80043ee:	9b03      	ldr	r3, [sp, #12]
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d307      	bcc.n	8004404 <__cvt+0x9c>
 80043f4:	9b03      	ldr	r3, [sp, #12]
 80043f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043f8:	1a1b      	subs	r3, r3, r0
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	b005      	add	sp, #20
 80043fe:	ecbd 8b02 	vpop	{d8}
 8004402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004404:	1c5c      	adds	r4, r3, #1
 8004406:	9403      	str	r4, [sp, #12]
 8004408:	7019      	strb	r1, [r3, #0]
 800440a:	e7f0      	b.n	80043ee <__cvt+0x86>

0800440c <__exponent>:
 800440c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800440e:	4603      	mov	r3, r0
 8004410:	2900      	cmp	r1, #0
 8004412:	bfb8      	it	lt
 8004414:	4249      	neglt	r1, r1
 8004416:	f803 2b02 	strb.w	r2, [r3], #2
 800441a:	bfb4      	ite	lt
 800441c:	222d      	movlt	r2, #45	; 0x2d
 800441e:	222b      	movge	r2, #43	; 0x2b
 8004420:	2909      	cmp	r1, #9
 8004422:	7042      	strb	r2, [r0, #1]
 8004424:	dd2a      	ble.n	800447c <__exponent+0x70>
 8004426:	f10d 0207 	add.w	r2, sp, #7
 800442a:	4617      	mov	r7, r2
 800442c:	260a      	movs	r6, #10
 800442e:	4694      	mov	ip, r2
 8004430:	fb91 f5f6 	sdiv	r5, r1, r6
 8004434:	fb06 1415 	mls	r4, r6, r5, r1
 8004438:	3430      	adds	r4, #48	; 0x30
 800443a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800443e:	460c      	mov	r4, r1
 8004440:	2c63      	cmp	r4, #99	; 0x63
 8004442:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004446:	4629      	mov	r1, r5
 8004448:	dcf1      	bgt.n	800442e <__exponent+0x22>
 800444a:	3130      	adds	r1, #48	; 0x30
 800444c:	f1ac 0402 	sub.w	r4, ip, #2
 8004450:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004454:	1c41      	adds	r1, r0, #1
 8004456:	4622      	mov	r2, r4
 8004458:	42ba      	cmp	r2, r7
 800445a:	d30a      	bcc.n	8004472 <__exponent+0x66>
 800445c:	f10d 0209 	add.w	r2, sp, #9
 8004460:	eba2 020c 	sub.w	r2, r2, ip
 8004464:	42bc      	cmp	r4, r7
 8004466:	bf88      	it	hi
 8004468:	2200      	movhi	r2, #0
 800446a:	4413      	add	r3, r2
 800446c:	1a18      	subs	r0, r3, r0
 800446e:	b003      	add	sp, #12
 8004470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004472:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004476:	f801 5f01 	strb.w	r5, [r1, #1]!
 800447a:	e7ed      	b.n	8004458 <__exponent+0x4c>
 800447c:	2330      	movs	r3, #48	; 0x30
 800447e:	3130      	adds	r1, #48	; 0x30
 8004480:	7083      	strb	r3, [r0, #2]
 8004482:	70c1      	strb	r1, [r0, #3]
 8004484:	1d03      	adds	r3, r0, #4
 8004486:	e7f1      	b.n	800446c <__exponent+0x60>

08004488 <_printf_float>:
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	b08b      	sub	sp, #44	; 0x2c
 800448e:	460c      	mov	r4, r1
 8004490:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004494:	4616      	mov	r6, r2
 8004496:	461f      	mov	r7, r3
 8004498:	4605      	mov	r5, r0
 800449a:	f001 f9b5 	bl	8005808 <_localeconv_r>
 800449e:	f8d0 b000 	ldr.w	fp, [r0]
 80044a2:	4658      	mov	r0, fp
 80044a4:	f7fb ff0c 	bl	80002c0 <strlen>
 80044a8:	2300      	movs	r3, #0
 80044aa:	9308      	str	r3, [sp, #32]
 80044ac:	f8d8 3000 	ldr.w	r3, [r8]
 80044b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80044b4:	6822      	ldr	r2, [r4, #0]
 80044b6:	3307      	adds	r3, #7
 80044b8:	f023 0307 	bic.w	r3, r3, #7
 80044bc:	f103 0108 	add.w	r1, r3, #8
 80044c0:	f8c8 1000 	str.w	r1, [r8]
 80044c4:	ed93 0b00 	vldr	d0, [r3]
 80044c8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8004728 <_printf_float+0x2a0>
 80044cc:	eeb0 7bc0 	vabs.f64	d7, d0
 80044d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80044d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80044dc:	4682      	mov	sl, r0
 80044de:	dd24      	ble.n	800452a <_printf_float+0xa2>
 80044e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80044e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e8:	d502      	bpl.n	80044f0 <_printf_float+0x68>
 80044ea:	232d      	movs	r3, #45	; 0x2d
 80044ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f0:	498f      	ldr	r1, [pc, #572]	; (8004730 <_printf_float+0x2a8>)
 80044f2:	4b90      	ldr	r3, [pc, #576]	; (8004734 <_printf_float+0x2ac>)
 80044f4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044f8:	bf94      	ite	ls
 80044fa:	4688      	movls	r8, r1
 80044fc:	4698      	movhi	r8, r3
 80044fe:	2303      	movs	r3, #3
 8004500:	6123      	str	r3, [r4, #16]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	2300      	movs	r3, #0
 8004508:	6022      	str	r2, [r4, #0]
 800450a:	9304      	str	r3, [sp, #16]
 800450c:	9700      	str	r7, [sp, #0]
 800450e:	4633      	mov	r3, r6
 8004510:	aa09      	add	r2, sp, #36	; 0x24
 8004512:	4621      	mov	r1, r4
 8004514:	4628      	mov	r0, r5
 8004516:	f000 f9d1 	bl	80048bc <_printf_common>
 800451a:	3001      	adds	r0, #1
 800451c:	f040 808a 	bne.w	8004634 <_printf_float+0x1ac>
 8004520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004524:	b00b      	add	sp, #44	; 0x2c
 8004526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800452a:	eeb4 0b40 	vcmp.f64	d0, d0
 800452e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004532:	d709      	bvc.n	8004548 <_printf_float+0xc0>
 8004534:	ee10 3a90 	vmov	r3, s1
 8004538:	2b00      	cmp	r3, #0
 800453a:	bfbc      	itt	lt
 800453c:	232d      	movlt	r3, #45	; 0x2d
 800453e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004542:	497d      	ldr	r1, [pc, #500]	; (8004738 <_printf_float+0x2b0>)
 8004544:	4b7d      	ldr	r3, [pc, #500]	; (800473c <_printf_float+0x2b4>)
 8004546:	e7d5      	b.n	80044f4 <_printf_float+0x6c>
 8004548:	6863      	ldr	r3, [r4, #4]
 800454a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800454e:	9104      	str	r1, [sp, #16]
 8004550:	1c59      	adds	r1, r3, #1
 8004552:	d13c      	bne.n	80045ce <_printf_float+0x146>
 8004554:	2306      	movs	r3, #6
 8004556:	6063      	str	r3, [r4, #4]
 8004558:	2300      	movs	r3, #0
 800455a:	9303      	str	r3, [sp, #12]
 800455c:	ab08      	add	r3, sp, #32
 800455e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004562:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004566:	ab07      	add	r3, sp, #28
 8004568:	6861      	ldr	r1, [r4, #4]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	6022      	str	r2, [r4, #0]
 800456e:	f10d 031b 	add.w	r3, sp, #27
 8004572:	4628      	mov	r0, r5
 8004574:	f7ff fef8 	bl	8004368 <__cvt>
 8004578:	9b04      	ldr	r3, [sp, #16]
 800457a:	9907      	ldr	r1, [sp, #28]
 800457c:	2b47      	cmp	r3, #71	; 0x47
 800457e:	4680      	mov	r8, r0
 8004580:	d108      	bne.n	8004594 <_printf_float+0x10c>
 8004582:	1cc8      	adds	r0, r1, #3
 8004584:	db02      	blt.n	800458c <_printf_float+0x104>
 8004586:	6863      	ldr	r3, [r4, #4]
 8004588:	4299      	cmp	r1, r3
 800458a:	dd41      	ble.n	8004610 <_printf_float+0x188>
 800458c:	f1a9 0902 	sub.w	r9, r9, #2
 8004590:	fa5f f989 	uxtb.w	r9, r9
 8004594:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004598:	d820      	bhi.n	80045dc <_printf_float+0x154>
 800459a:	3901      	subs	r1, #1
 800459c:	464a      	mov	r2, r9
 800459e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045a2:	9107      	str	r1, [sp, #28]
 80045a4:	f7ff ff32 	bl	800440c <__exponent>
 80045a8:	9a08      	ldr	r2, [sp, #32]
 80045aa:	9004      	str	r0, [sp, #16]
 80045ac:	1813      	adds	r3, r2, r0
 80045ae:	2a01      	cmp	r2, #1
 80045b0:	6123      	str	r3, [r4, #16]
 80045b2:	dc02      	bgt.n	80045ba <_printf_float+0x132>
 80045b4:	6822      	ldr	r2, [r4, #0]
 80045b6:	07d2      	lsls	r2, r2, #31
 80045b8:	d501      	bpl.n	80045be <_printf_float+0x136>
 80045ba:	3301      	adds	r3, #1
 80045bc:	6123      	str	r3, [r4, #16]
 80045be:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0a2      	beq.n	800450c <_printf_float+0x84>
 80045c6:	232d      	movs	r3, #45	; 0x2d
 80045c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045cc:	e79e      	b.n	800450c <_printf_float+0x84>
 80045ce:	9904      	ldr	r1, [sp, #16]
 80045d0:	2947      	cmp	r1, #71	; 0x47
 80045d2:	d1c1      	bne.n	8004558 <_printf_float+0xd0>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1bf      	bne.n	8004558 <_printf_float+0xd0>
 80045d8:	2301      	movs	r3, #1
 80045da:	e7bc      	b.n	8004556 <_printf_float+0xce>
 80045dc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80045e0:	d118      	bne.n	8004614 <_printf_float+0x18c>
 80045e2:	2900      	cmp	r1, #0
 80045e4:	6863      	ldr	r3, [r4, #4]
 80045e6:	dd0b      	ble.n	8004600 <_printf_float+0x178>
 80045e8:	6121      	str	r1, [r4, #16]
 80045ea:	b913      	cbnz	r3, 80045f2 <_printf_float+0x16a>
 80045ec:	6822      	ldr	r2, [r4, #0]
 80045ee:	07d0      	lsls	r0, r2, #31
 80045f0:	d502      	bpl.n	80045f8 <_printf_float+0x170>
 80045f2:	3301      	adds	r3, #1
 80045f4:	440b      	add	r3, r1
 80045f6:	6123      	str	r3, [r4, #16]
 80045f8:	2300      	movs	r3, #0
 80045fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80045fc:	9304      	str	r3, [sp, #16]
 80045fe:	e7de      	b.n	80045be <_printf_float+0x136>
 8004600:	b913      	cbnz	r3, 8004608 <_printf_float+0x180>
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	07d2      	lsls	r2, r2, #31
 8004606:	d501      	bpl.n	800460c <_printf_float+0x184>
 8004608:	3302      	adds	r3, #2
 800460a:	e7f4      	b.n	80045f6 <_printf_float+0x16e>
 800460c:	2301      	movs	r3, #1
 800460e:	e7f2      	b.n	80045f6 <_printf_float+0x16e>
 8004610:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004614:	9b08      	ldr	r3, [sp, #32]
 8004616:	4299      	cmp	r1, r3
 8004618:	db05      	blt.n	8004626 <_printf_float+0x19e>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	6121      	str	r1, [r4, #16]
 800461e:	07d8      	lsls	r0, r3, #31
 8004620:	d5ea      	bpl.n	80045f8 <_printf_float+0x170>
 8004622:	1c4b      	adds	r3, r1, #1
 8004624:	e7e7      	b.n	80045f6 <_printf_float+0x16e>
 8004626:	2900      	cmp	r1, #0
 8004628:	bfd4      	ite	le
 800462a:	f1c1 0202 	rsble	r2, r1, #2
 800462e:	2201      	movgt	r2, #1
 8004630:	4413      	add	r3, r2
 8004632:	e7e0      	b.n	80045f6 <_printf_float+0x16e>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	055a      	lsls	r2, r3, #21
 8004638:	d407      	bmi.n	800464a <_printf_float+0x1c2>
 800463a:	6923      	ldr	r3, [r4, #16]
 800463c:	4642      	mov	r2, r8
 800463e:	4631      	mov	r1, r6
 8004640:	4628      	mov	r0, r5
 8004642:	47b8      	blx	r7
 8004644:	3001      	adds	r0, #1
 8004646:	d12a      	bne.n	800469e <_printf_float+0x216>
 8004648:	e76a      	b.n	8004520 <_printf_float+0x98>
 800464a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800464e:	f240 80e0 	bls.w	8004812 <_printf_float+0x38a>
 8004652:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004656:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800465a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465e:	d133      	bne.n	80046c8 <_printf_float+0x240>
 8004660:	4a37      	ldr	r2, [pc, #220]	; (8004740 <_printf_float+0x2b8>)
 8004662:	2301      	movs	r3, #1
 8004664:	4631      	mov	r1, r6
 8004666:	4628      	mov	r0, r5
 8004668:	47b8      	blx	r7
 800466a:	3001      	adds	r0, #1
 800466c:	f43f af58 	beq.w	8004520 <_printf_float+0x98>
 8004670:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004674:	429a      	cmp	r2, r3
 8004676:	db02      	blt.n	800467e <_printf_float+0x1f6>
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	07d8      	lsls	r0, r3, #31
 800467c:	d50f      	bpl.n	800469e <_printf_float+0x216>
 800467e:	4653      	mov	r3, sl
 8004680:	465a      	mov	r2, fp
 8004682:	4631      	mov	r1, r6
 8004684:	4628      	mov	r0, r5
 8004686:	47b8      	blx	r7
 8004688:	3001      	adds	r0, #1
 800468a:	f43f af49 	beq.w	8004520 <_printf_float+0x98>
 800468e:	f04f 0800 	mov.w	r8, #0
 8004692:	f104 091a 	add.w	r9, r4, #26
 8004696:	9b08      	ldr	r3, [sp, #32]
 8004698:	3b01      	subs	r3, #1
 800469a:	4543      	cmp	r3, r8
 800469c:	dc09      	bgt.n	80046b2 <_printf_float+0x22a>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	079b      	lsls	r3, r3, #30
 80046a2:	f100 8106 	bmi.w	80048b2 <_printf_float+0x42a>
 80046a6:	68e0      	ldr	r0, [r4, #12]
 80046a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046aa:	4298      	cmp	r0, r3
 80046ac:	bfb8      	it	lt
 80046ae:	4618      	movlt	r0, r3
 80046b0:	e738      	b.n	8004524 <_printf_float+0x9c>
 80046b2:	2301      	movs	r3, #1
 80046b4:	464a      	mov	r2, r9
 80046b6:	4631      	mov	r1, r6
 80046b8:	4628      	mov	r0, r5
 80046ba:	47b8      	blx	r7
 80046bc:	3001      	adds	r0, #1
 80046be:	f43f af2f 	beq.w	8004520 <_printf_float+0x98>
 80046c2:	f108 0801 	add.w	r8, r8, #1
 80046c6:	e7e6      	b.n	8004696 <_printf_float+0x20e>
 80046c8:	9b07      	ldr	r3, [sp, #28]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	dc3a      	bgt.n	8004744 <_printf_float+0x2bc>
 80046ce:	4a1c      	ldr	r2, [pc, #112]	; (8004740 <_printf_float+0x2b8>)
 80046d0:	2301      	movs	r3, #1
 80046d2:	4631      	mov	r1, r6
 80046d4:	4628      	mov	r0, r5
 80046d6:	47b8      	blx	r7
 80046d8:	3001      	adds	r0, #1
 80046da:	f43f af21 	beq.w	8004520 <_printf_float+0x98>
 80046de:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	d102      	bne.n	80046ec <_printf_float+0x264>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	07d9      	lsls	r1, r3, #31
 80046ea:	d5d8      	bpl.n	800469e <_printf_float+0x216>
 80046ec:	4653      	mov	r3, sl
 80046ee:	465a      	mov	r2, fp
 80046f0:	4631      	mov	r1, r6
 80046f2:	4628      	mov	r0, r5
 80046f4:	47b8      	blx	r7
 80046f6:	3001      	adds	r0, #1
 80046f8:	f43f af12 	beq.w	8004520 <_printf_float+0x98>
 80046fc:	f04f 0900 	mov.w	r9, #0
 8004700:	f104 0a1a 	add.w	sl, r4, #26
 8004704:	9b07      	ldr	r3, [sp, #28]
 8004706:	425b      	negs	r3, r3
 8004708:	454b      	cmp	r3, r9
 800470a:	dc01      	bgt.n	8004710 <_printf_float+0x288>
 800470c:	9b08      	ldr	r3, [sp, #32]
 800470e:	e795      	b.n	800463c <_printf_float+0x1b4>
 8004710:	2301      	movs	r3, #1
 8004712:	4652      	mov	r2, sl
 8004714:	4631      	mov	r1, r6
 8004716:	4628      	mov	r0, r5
 8004718:	47b8      	blx	r7
 800471a:	3001      	adds	r0, #1
 800471c:	f43f af00 	beq.w	8004520 <_printf_float+0x98>
 8004720:	f109 0901 	add.w	r9, r9, #1
 8004724:	e7ee      	b.n	8004704 <_printf_float+0x27c>
 8004726:	bf00      	nop
 8004728:	ffffffff 	.word	0xffffffff
 800472c:	7fefffff 	.word	0x7fefffff
 8004730:	0801b3c4 	.word	0x0801b3c4
 8004734:	0801b3c8 	.word	0x0801b3c8
 8004738:	0801b3cc 	.word	0x0801b3cc
 800473c:	0801b3d0 	.word	0x0801b3d0
 8004740:	0801b3d4 	.word	0x0801b3d4
 8004744:	9a08      	ldr	r2, [sp, #32]
 8004746:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004748:	429a      	cmp	r2, r3
 800474a:	bfa8      	it	ge
 800474c:	461a      	movge	r2, r3
 800474e:	2a00      	cmp	r2, #0
 8004750:	4691      	mov	r9, r2
 8004752:	dc38      	bgt.n	80047c6 <_printf_float+0x33e>
 8004754:	2300      	movs	r3, #0
 8004756:	9305      	str	r3, [sp, #20]
 8004758:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800475c:	f104 021a 	add.w	r2, r4, #26
 8004760:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004762:	9905      	ldr	r1, [sp, #20]
 8004764:	9304      	str	r3, [sp, #16]
 8004766:	eba3 0309 	sub.w	r3, r3, r9
 800476a:	428b      	cmp	r3, r1
 800476c:	dc33      	bgt.n	80047d6 <_printf_float+0x34e>
 800476e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004772:	429a      	cmp	r2, r3
 8004774:	db3c      	blt.n	80047f0 <_printf_float+0x368>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	07da      	lsls	r2, r3, #31
 800477a:	d439      	bmi.n	80047f0 <_printf_float+0x368>
 800477c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004780:	eba2 0903 	sub.w	r9, r2, r3
 8004784:	9b04      	ldr	r3, [sp, #16]
 8004786:	1ad2      	subs	r2, r2, r3
 8004788:	4591      	cmp	r9, r2
 800478a:	bfa8      	it	ge
 800478c:	4691      	movge	r9, r2
 800478e:	f1b9 0f00 	cmp.w	r9, #0
 8004792:	dc35      	bgt.n	8004800 <_printf_float+0x378>
 8004794:	f04f 0800 	mov.w	r8, #0
 8004798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800479c:	f104 0a1a 	add.w	sl, r4, #26
 80047a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	eba3 0309 	sub.w	r3, r3, r9
 80047aa:	4543      	cmp	r3, r8
 80047ac:	f77f af77 	ble.w	800469e <_printf_float+0x216>
 80047b0:	2301      	movs	r3, #1
 80047b2:	4652      	mov	r2, sl
 80047b4:	4631      	mov	r1, r6
 80047b6:	4628      	mov	r0, r5
 80047b8:	47b8      	blx	r7
 80047ba:	3001      	adds	r0, #1
 80047bc:	f43f aeb0 	beq.w	8004520 <_printf_float+0x98>
 80047c0:	f108 0801 	add.w	r8, r8, #1
 80047c4:	e7ec      	b.n	80047a0 <_printf_float+0x318>
 80047c6:	4613      	mov	r3, r2
 80047c8:	4631      	mov	r1, r6
 80047ca:	4642      	mov	r2, r8
 80047cc:	4628      	mov	r0, r5
 80047ce:	47b8      	blx	r7
 80047d0:	3001      	adds	r0, #1
 80047d2:	d1bf      	bne.n	8004754 <_printf_float+0x2cc>
 80047d4:	e6a4      	b.n	8004520 <_printf_float+0x98>
 80047d6:	2301      	movs	r3, #1
 80047d8:	4631      	mov	r1, r6
 80047da:	4628      	mov	r0, r5
 80047dc:	9204      	str	r2, [sp, #16]
 80047de:	47b8      	blx	r7
 80047e0:	3001      	adds	r0, #1
 80047e2:	f43f ae9d 	beq.w	8004520 <_printf_float+0x98>
 80047e6:	9b05      	ldr	r3, [sp, #20]
 80047e8:	9a04      	ldr	r2, [sp, #16]
 80047ea:	3301      	adds	r3, #1
 80047ec:	9305      	str	r3, [sp, #20]
 80047ee:	e7b7      	b.n	8004760 <_printf_float+0x2d8>
 80047f0:	4653      	mov	r3, sl
 80047f2:	465a      	mov	r2, fp
 80047f4:	4631      	mov	r1, r6
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	d1be      	bne.n	800477c <_printf_float+0x2f4>
 80047fe:	e68f      	b.n	8004520 <_printf_float+0x98>
 8004800:	9a04      	ldr	r2, [sp, #16]
 8004802:	464b      	mov	r3, r9
 8004804:	4442      	add	r2, r8
 8004806:	4631      	mov	r1, r6
 8004808:	4628      	mov	r0, r5
 800480a:	47b8      	blx	r7
 800480c:	3001      	adds	r0, #1
 800480e:	d1c1      	bne.n	8004794 <_printf_float+0x30c>
 8004810:	e686      	b.n	8004520 <_printf_float+0x98>
 8004812:	9a08      	ldr	r2, [sp, #32]
 8004814:	2a01      	cmp	r2, #1
 8004816:	dc01      	bgt.n	800481c <_printf_float+0x394>
 8004818:	07db      	lsls	r3, r3, #31
 800481a:	d537      	bpl.n	800488c <_printf_float+0x404>
 800481c:	2301      	movs	r3, #1
 800481e:	4642      	mov	r2, r8
 8004820:	4631      	mov	r1, r6
 8004822:	4628      	mov	r0, r5
 8004824:	47b8      	blx	r7
 8004826:	3001      	adds	r0, #1
 8004828:	f43f ae7a 	beq.w	8004520 <_printf_float+0x98>
 800482c:	4653      	mov	r3, sl
 800482e:	465a      	mov	r2, fp
 8004830:	4631      	mov	r1, r6
 8004832:	4628      	mov	r0, r5
 8004834:	47b8      	blx	r7
 8004836:	3001      	adds	r0, #1
 8004838:	f43f ae72 	beq.w	8004520 <_printf_float+0x98>
 800483c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004840:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004848:	9b08      	ldr	r3, [sp, #32]
 800484a:	d01a      	beq.n	8004882 <_printf_float+0x3fa>
 800484c:	3b01      	subs	r3, #1
 800484e:	f108 0201 	add.w	r2, r8, #1
 8004852:	4631      	mov	r1, r6
 8004854:	4628      	mov	r0, r5
 8004856:	47b8      	blx	r7
 8004858:	3001      	adds	r0, #1
 800485a:	d10e      	bne.n	800487a <_printf_float+0x3f2>
 800485c:	e660      	b.n	8004520 <_printf_float+0x98>
 800485e:	2301      	movs	r3, #1
 8004860:	464a      	mov	r2, r9
 8004862:	4631      	mov	r1, r6
 8004864:	4628      	mov	r0, r5
 8004866:	47b8      	blx	r7
 8004868:	3001      	adds	r0, #1
 800486a:	f43f ae59 	beq.w	8004520 <_printf_float+0x98>
 800486e:	f108 0801 	add.w	r8, r8, #1
 8004872:	9b08      	ldr	r3, [sp, #32]
 8004874:	3b01      	subs	r3, #1
 8004876:	4543      	cmp	r3, r8
 8004878:	dcf1      	bgt.n	800485e <_printf_float+0x3d6>
 800487a:	9b04      	ldr	r3, [sp, #16]
 800487c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004880:	e6dd      	b.n	800463e <_printf_float+0x1b6>
 8004882:	f04f 0800 	mov.w	r8, #0
 8004886:	f104 091a 	add.w	r9, r4, #26
 800488a:	e7f2      	b.n	8004872 <_printf_float+0x3ea>
 800488c:	2301      	movs	r3, #1
 800488e:	4642      	mov	r2, r8
 8004890:	e7df      	b.n	8004852 <_printf_float+0x3ca>
 8004892:	2301      	movs	r3, #1
 8004894:	464a      	mov	r2, r9
 8004896:	4631      	mov	r1, r6
 8004898:	4628      	mov	r0, r5
 800489a:	47b8      	blx	r7
 800489c:	3001      	adds	r0, #1
 800489e:	f43f ae3f 	beq.w	8004520 <_printf_float+0x98>
 80048a2:	f108 0801 	add.w	r8, r8, #1
 80048a6:	68e3      	ldr	r3, [r4, #12]
 80048a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048aa:	1a5b      	subs	r3, r3, r1
 80048ac:	4543      	cmp	r3, r8
 80048ae:	dcf0      	bgt.n	8004892 <_printf_float+0x40a>
 80048b0:	e6f9      	b.n	80046a6 <_printf_float+0x21e>
 80048b2:	f04f 0800 	mov.w	r8, #0
 80048b6:	f104 0919 	add.w	r9, r4, #25
 80048ba:	e7f4      	b.n	80048a6 <_printf_float+0x41e>

080048bc <_printf_common>:
 80048bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	4616      	mov	r6, r2
 80048c2:	4699      	mov	r9, r3
 80048c4:	688a      	ldr	r2, [r1, #8]
 80048c6:	690b      	ldr	r3, [r1, #16]
 80048c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048cc:	4293      	cmp	r3, r2
 80048ce:	bfb8      	it	lt
 80048d0:	4613      	movlt	r3, r2
 80048d2:	6033      	str	r3, [r6, #0]
 80048d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048d8:	4607      	mov	r7, r0
 80048da:	460c      	mov	r4, r1
 80048dc:	b10a      	cbz	r2, 80048e2 <_printf_common+0x26>
 80048de:	3301      	adds	r3, #1
 80048e0:	6033      	str	r3, [r6, #0]
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	0699      	lsls	r1, r3, #26
 80048e6:	bf42      	ittt	mi
 80048e8:	6833      	ldrmi	r3, [r6, #0]
 80048ea:	3302      	addmi	r3, #2
 80048ec:	6033      	strmi	r3, [r6, #0]
 80048ee:	6825      	ldr	r5, [r4, #0]
 80048f0:	f015 0506 	ands.w	r5, r5, #6
 80048f4:	d106      	bne.n	8004904 <_printf_common+0x48>
 80048f6:	f104 0a19 	add.w	sl, r4, #25
 80048fa:	68e3      	ldr	r3, [r4, #12]
 80048fc:	6832      	ldr	r2, [r6, #0]
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	42ab      	cmp	r3, r5
 8004902:	dc26      	bgt.n	8004952 <_printf_common+0x96>
 8004904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004908:	1e13      	subs	r3, r2, #0
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	bf18      	it	ne
 800490e:	2301      	movne	r3, #1
 8004910:	0692      	lsls	r2, r2, #26
 8004912:	d42b      	bmi.n	800496c <_printf_common+0xb0>
 8004914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004918:	4649      	mov	r1, r9
 800491a:	4638      	mov	r0, r7
 800491c:	47c0      	blx	r8
 800491e:	3001      	adds	r0, #1
 8004920:	d01e      	beq.n	8004960 <_printf_common+0xa4>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	6922      	ldr	r2, [r4, #16]
 8004926:	f003 0306 	and.w	r3, r3, #6
 800492a:	2b04      	cmp	r3, #4
 800492c:	bf02      	ittt	eq
 800492e:	68e5      	ldreq	r5, [r4, #12]
 8004930:	6833      	ldreq	r3, [r6, #0]
 8004932:	1aed      	subeq	r5, r5, r3
 8004934:	68a3      	ldr	r3, [r4, #8]
 8004936:	bf0c      	ite	eq
 8004938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800493c:	2500      	movne	r5, #0
 800493e:	4293      	cmp	r3, r2
 8004940:	bfc4      	itt	gt
 8004942:	1a9b      	subgt	r3, r3, r2
 8004944:	18ed      	addgt	r5, r5, r3
 8004946:	2600      	movs	r6, #0
 8004948:	341a      	adds	r4, #26
 800494a:	42b5      	cmp	r5, r6
 800494c:	d11a      	bne.n	8004984 <_printf_common+0xc8>
 800494e:	2000      	movs	r0, #0
 8004950:	e008      	b.n	8004964 <_printf_common+0xa8>
 8004952:	2301      	movs	r3, #1
 8004954:	4652      	mov	r2, sl
 8004956:	4649      	mov	r1, r9
 8004958:	4638      	mov	r0, r7
 800495a:	47c0      	blx	r8
 800495c:	3001      	adds	r0, #1
 800495e:	d103      	bne.n	8004968 <_printf_common+0xac>
 8004960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004968:	3501      	adds	r5, #1
 800496a:	e7c6      	b.n	80048fa <_printf_common+0x3e>
 800496c:	18e1      	adds	r1, r4, r3
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	2030      	movs	r0, #48	; 0x30
 8004972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004976:	4422      	add	r2, r4
 8004978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800497c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004980:	3302      	adds	r3, #2
 8004982:	e7c7      	b.n	8004914 <_printf_common+0x58>
 8004984:	2301      	movs	r3, #1
 8004986:	4622      	mov	r2, r4
 8004988:	4649      	mov	r1, r9
 800498a:	4638      	mov	r0, r7
 800498c:	47c0      	blx	r8
 800498e:	3001      	adds	r0, #1
 8004990:	d0e6      	beq.n	8004960 <_printf_common+0xa4>
 8004992:	3601      	adds	r6, #1
 8004994:	e7d9      	b.n	800494a <_printf_common+0x8e>
	...

08004998 <_printf_i>:
 8004998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800499c:	7e0f      	ldrb	r7, [r1, #24]
 800499e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049a0:	2f78      	cmp	r7, #120	; 0x78
 80049a2:	4691      	mov	r9, r2
 80049a4:	4680      	mov	r8, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	469a      	mov	sl, r3
 80049aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ae:	d807      	bhi.n	80049c0 <_printf_i+0x28>
 80049b0:	2f62      	cmp	r7, #98	; 0x62
 80049b2:	d80a      	bhi.n	80049ca <_printf_i+0x32>
 80049b4:	2f00      	cmp	r7, #0
 80049b6:	f000 80d4 	beq.w	8004b62 <_printf_i+0x1ca>
 80049ba:	2f58      	cmp	r7, #88	; 0x58
 80049bc:	f000 80c0 	beq.w	8004b40 <_printf_i+0x1a8>
 80049c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049c8:	e03a      	b.n	8004a40 <_printf_i+0xa8>
 80049ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ce:	2b15      	cmp	r3, #21
 80049d0:	d8f6      	bhi.n	80049c0 <_printf_i+0x28>
 80049d2:	a101      	add	r1, pc, #4	; (adr r1, 80049d8 <_printf_i+0x40>)
 80049d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049d8:	08004a31 	.word	0x08004a31
 80049dc:	08004a45 	.word	0x08004a45
 80049e0:	080049c1 	.word	0x080049c1
 80049e4:	080049c1 	.word	0x080049c1
 80049e8:	080049c1 	.word	0x080049c1
 80049ec:	080049c1 	.word	0x080049c1
 80049f0:	08004a45 	.word	0x08004a45
 80049f4:	080049c1 	.word	0x080049c1
 80049f8:	080049c1 	.word	0x080049c1
 80049fc:	080049c1 	.word	0x080049c1
 8004a00:	080049c1 	.word	0x080049c1
 8004a04:	08004b49 	.word	0x08004b49
 8004a08:	08004a71 	.word	0x08004a71
 8004a0c:	08004b03 	.word	0x08004b03
 8004a10:	080049c1 	.word	0x080049c1
 8004a14:	080049c1 	.word	0x080049c1
 8004a18:	08004b6b 	.word	0x08004b6b
 8004a1c:	080049c1 	.word	0x080049c1
 8004a20:	08004a71 	.word	0x08004a71
 8004a24:	080049c1 	.word	0x080049c1
 8004a28:	080049c1 	.word	0x080049c1
 8004a2c:	08004b0b 	.word	0x08004b0b
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	1d1a      	adds	r2, r3, #4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	602a      	str	r2, [r5, #0]
 8004a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a40:	2301      	movs	r3, #1
 8004a42:	e09f      	b.n	8004b84 <_printf_i+0x1ec>
 8004a44:	6820      	ldr	r0, [r4, #0]
 8004a46:	682b      	ldr	r3, [r5, #0]
 8004a48:	0607      	lsls	r7, r0, #24
 8004a4a:	f103 0104 	add.w	r1, r3, #4
 8004a4e:	6029      	str	r1, [r5, #0]
 8004a50:	d501      	bpl.n	8004a56 <_printf_i+0xbe>
 8004a52:	681e      	ldr	r6, [r3, #0]
 8004a54:	e003      	b.n	8004a5e <_printf_i+0xc6>
 8004a56:	0646      	lsls	r6, r0, #25
 8004a58:	d5fb      	bpl.n	8004a52 <_printf_i+0xba>
 8004a5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a5e:	2e00      	cmp	r6, #0
 8004a60:	da03      	bge.n	8004a6a <_printf_i+0xd2>
 8004a62:	232d      	movs	r3, #45	; 0x2d
 8004a64:	4276      	negs	r6, r6
 8004a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a6a:	485a      	ldr	r0, [pc, #360]	; (8004bd4 <_printf_i+0x23c>)
 8004a6c:	230a      	movs	r3, #10
 8004a6e:	e012      	b.n	8004a96 <_printf_i+0xfe>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	6820      	ldr	r0, [r4, #0]
 8004a74:	1d19      	adds	r1, r3, #4
 8004a76:	6029      	str	r1, [r5, #0]
 8004a78:	0605      	lsls	r5, r0, #24
 8004a7a:	d501      	bpl.n	8004a80 <_printf_i+0xe8>
 8004a7c:	681e      	ldr	r6, [r3, #0]
 8004a7e:	e002      	b.n	8004a86 <_printf_i+0xee>
 8004a80:	0641      	lsls	r1, r0, #25
 8004a82:	d5fb      	bpl.n	8004a7c <_printf_i+0xe4>
 8004a84:	881e      	ldrh	r6, [r3, #0]
 8004a86:	4853      	ldr	r0, [pc, #332]	; (8004bd4 <_printf_i+0x23c>)
 8004a88:	2f6f      	cmp	r7, #111	; 0x6f
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2308      	moveq	r3, #8
 8004a8e:	230a      	movne	r3, #10
 8004a90:	2100      	movs	r1, #0
 8004a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a96:	6865      	ldr	r5, [r4, #4]
 8004a98:	60a5      	str	r5, [r4, #8]
 8004a9a:	2d00      	cmp	r5, #0
 8004a9c:	bfa2      	ittt	ge
 8004a9e:	6821      	ldrge	r1, [r4, #0]
 8004aa0:	f021 0104 	bicge.w	r1, r1, #4
 8004aa4:	6021      	strge	r1, [r4, #0]
 8004aa6:	b90e      	cbnz	r6, 8004aac <_printf_i+0x114>
 8004aa8:	2d00      	cmp	r5, #0
 8004aaa:	d04b      	beq.n	8004b44 <_printf_i+0x1ac>
 8004aac:	4615      	mov	r5, r2
 8004aae:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ab2:	fb03 6711 	mls	r7, r3, r1, r6
 8004ab6:	5dc7      	ldrb	r7, [r0, r7]
 8004ab8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004abc:	4637      	mov	r7, r6
 8004abe:	42bb      	cmp	r3, r7
 8004ac0:	460e      	mov	r6, r1
 8004ac2:	d9f4      	bls.n	8004aae <_printf_i+0x116>
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d10b      	bne.n	8004ae0 <_printf_i+0x148>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	07de      	lsls	r6, r3, #31
 8004acc:	d508      	bpl.n	8004ae0 <_printf_i+0x148>
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	6861      	ldr	r1, [r4, #4]
 8004ad2:	4299      	cmp	r1, r3
 8004ad4:	bfde      	ittt	le
 8004ad6:	2330      	movle	r3, #48	; 0x30
 8004ad8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004adc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ae0:	1b52      	subs	r2, r2, r5
 8004ae2:	6122      	str	r2, [r4, #16]
 8004ae4:	f8cd a000 	str.w	sl, [sp]
 8004ae8:	464b      	mov	r3, r9
 8004aea:	aa03      	add	r2, sp, #12
 8004aec:	4621      	mov	r1, r4
 8004aee:	4640      	mov	r0, r8
 8004af0:	f7ff fee4 	bl	80048bc <_printf_common>
 8004af4:	3001      	adds	r0, #1
 8004af6:	d14a      	bne.n	8004b8e <_printf_i+0x1f6>
 8004af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004afc:	b004      	add	sp, #16
 8004afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	f043 0320 	orr.w	r3, r3, #32
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	4833      	ldr	r0, [pc, #204]	; (8004bd8 <_printf_i+0x240>)
 8004b0c:	2778      	movs	r7, #120	; 0x78
 8004b0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	6829      	ldr	r1, [r5, #0]
 8004b16:	061f      	lsls	r7, r3, #24
 8004b18:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b1c:	d402      	bmi.n	8004b24 <_printf_i+0x18c>
 8004b1e:	065f      	lsls	r7, r3, #25
 8004b20:	bf48      	it	mi
 8004b22:	b2b6      	uxthmi	r6, r6
 8004b24:	07df      	lsls	r7, r3, #31
 8004b26:	bf48      	it	mi
 8004b28:	f043 0320 	orrmi.w	r3, r3, #32
 8004b2c:	6029      	str	r1, [r5, #0]
 8004b2e:	bf48      	it	mi
 8004b30:	6023      	strmi	r3, [r4, #0]
 8004b32:	b91e      	cbnz	r6, 8004b3c <_printf_i+0x1a4>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	f023 0320 	bic.w	r3, r3, #32
 8004b3a:	6023      	str	r3, [r4, #0]
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	e7a7      	b.n	8004a90 <_printf_i+0xf8>
 8004b40:	4824      	ldr	r0, [pc, #144]	; (8004bd4 <_printf_i+0x23c>)
 8004b42:	e7e4      	b.n	8004b0e <_printf_i+0x176>
 8004b44:	4615      	mov	r5, r2
 8004b46:	e7bd      	b.n	8004ac4 <_printf_i+0x12c>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	6826      	ldr	r6, [r4, #0]
 8004b4c:	6961      	ldr	r1, [r4, #20]
 8004b4e:	1d18      	adds	r0, r3, #4
 8004b50:	6028      	str	r0, [r5, #0]
 8004b52:	0635      	lsls	r5, r6, #24
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	d501      	bpl.n	8004b5c <_printf_i+0x1c4>
 8004b58:	6019      	str	r1, [r3, #0]
 8004b5a:	e002      	b.n	8004b62 <_printf_i+0x1ca>
 8004b5c:	0670      	lsls	r0, r6, #25
 8004b5e:	d5fb      	bpl.n	8004b58 <_printf_i+0x1c0>
 8004b60:	8019      	strh	r1, [r3, #0]
 8004b62:	2300      	movs	r3, #0
 8004b64:	6123      	str	r3, [r4, #16]
 8004b66:	4615      	mov	r5, r2
 8004b68:	e7bc      	b.n	8004ae4 <_printf_i+0x14c>
 8004b6a:	682b      	ldr	r3, [r5, #0]
 8004b6c:	1d1a      	adds	r2, r3, #4
 8004b6e:	602a      	str	r2, [r5, #0]
 8004b70:	681d      	ldr	r5, [r3, #0]
 8004b72:	6862      	ldr	r2, [r4, #4]
 8004b74:	2100      	movs	r1, #0
 8004b76:	4628      	mov	r0, r5
 8004b78:	f7fb fbaa 	bl	80002d0 <memchr>
 8004b7c:	b108      	cbz	r0, 8004b82 <_printf_i+0x1ea>
 8004b7e:	1b40      	subs	r0, r0, r5
 8004b80:	6060      	str	r0, [r4, #4]
 8004b82:	6863      	ldr	r3, [r4, #4]
 8004b84:	6123      	str	r3, [r4, #16]
 8004b86:	2300      	movs	r3, #0
 8004b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b8c:	e7aa      	b.n	8004ae4 <_printf_i+0x14c>
 8004b8e:	6923      	ldr	r3, [r4, #16]
 8004b90:	462a      	mov	r2, r5
 8004b92:	4649      	mov	r1, r9
 8004b94:	4640      	mov	r0, r8
 8004b96:	47d0      	blx	sl
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d0ad      	beq.n	8004af8 <_printf_i+0x160>
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	079b      	lsls	r3, r3, #30
 8004ba0:	d413      	bmi.n	8004bca <_printf_i+0x232>
 8004ba2:	68e0      	ldr	r0, [r4, #12]
 8004ba4:	9b03      	ldr	r3, [sp, #12]
 8004ba6:	4298      	cmp	r0, r3
 8004ba8:	bfb8      	it	lt
 8004baa:	4618      	movlt	r0, r3
 8004bac:	e7a6      	b.n	8004afc <_printf_i+0x164>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	4632      	mov	r2, r6
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	4640      	mov	r0, r8
 8004bb6:	47d0      	blx	sl
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d09d      	beq.n	8004af8 <_printf_i+0x160>
 8004bbc:	3501      	adds	r5, #1
 8004bbe:	68e3      	ldr	r3, [r4, #12]
 8004bc0:	9903      	ldr	r1, [sp, #12]
 8004bc2:	1a5b      	subs	r3, r3, r1
 8004bc4:	42ab      	cmp	r3, r5
 8004bc6:	dcf2      	bgt.n	8004bae <_printf_i+0x216>
 8004bc8:	e7eb      	b.n	8004ba2 <_printf_i+0x20a>
 8004bca:	2500      	movs	r5, #0
 8004bcc:	f104 0619 	add.w	r6, r4, #25
 8004bd0:	e7f5      	b.n	8004bbe <_printf_i+0x226>
 8004bd2:	bf00      	nop
 8004bd4:	0801b3d6 	.word	0x0801b3d6
 8004bd8:	0801b3e7 	.word	0x0801b3e7

08004bdc <siprintf>:
 8004bdc:	b40e      	push	{r1, r2, r3}
 8004bde:	b500      	push	{lr}
 8004be0:	b09c      	sub	sp, #112	; 0x70
 8004be2:	ab1d      	add	r3, sp, #116	; 0x74
 8004be4:	9002      	str	r0, [sp, #8]
 8004be6:	9006      	str	r0, [sp, #24]
 8004be8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bec:	4809      	ldr	r0, [pc, #36]	; (8004c14 <siprintf+0x38>)
 8004bee:	9107      	str	r1, [sp, #28]
 8004bf0:	9104      	str	r1, [sp, #16]
 8004bf2:	4909      	ldr	r1, [pc, #36]	; (8004c18 <siprintf+0x3c>)
 8004bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bf8:	9105      	str	r1, [sp, #20]
 8004bfa:	6800      	ldr	r0, [r0, #0]
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	a902      	add	r1, sp, #8
 8004c00:	f001 fafe 	bl	8006200 <_svfiprintf_r>
 8004c04:	9b02      	ldr	r3, [sp, #8]
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	b01c      	add	sp, #112	; 0x70
 8004c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c10:	b003      	add	sp, #12
 8004c12:	4770      	bx	lr
 8004c14:	20000420 	.word	0x20000420
 8004c18:	ffff0208 	.word	0xffff0208

08004c1c <quorem>:
 8004c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c20:	6903      	ldr	r3, [r0, #16]
 8004c22:	690c      	ldr	r4, [r1, #16]
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	4607      	mov	r7, r0
 8004c28:	db7e      	blt.n	8004d28 <quorem+0x10c>
 8004c2a:	3c01      	subs	r4, #1
 8004c2c:	f101 0814 	add.w	r8, r1, #20
 8004c30:	f100 0514 	add.w	r5, r0, #20
 8004c34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c42:	3301      	adds	r3, #1
 8004c44:	429a      	cmp	r2, r3
 8004c46:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c52:	d331      	bcc.n	8004cb8 <quorem+0x9c>
 8004c54:	f04f 0e00 	mov.w	lr, #0
 8004c58:	4640      	mov	r0, r8
 8004c5a:	46ac      	mov	ip, r5
 8004c5c:	46f2      	mov	sl, lr
 8004c5e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c62:	b293      	uxth	r3, r2
 8004c64:	fb06 e303 	mla	r3, r6, r3, lr
 8004c68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c6c:	0c1a      	lsrs	r2, r3, #16
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	ebaa 0303 	sub.w	r3, sl, r3
 8004c74:	f8dc a000 	ldr.w	sl, [ip]
 8004c78:	fa13 f38a 	uxtah	r3, r3, sl
 8004c7c:	fb06 220e 	mla	r2, r6, lr, r2
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	9b00      	ldr	r3, [sp, #0]
 8004c84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c88:	b292      	uxth	r2, r2
 8004c8a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c92:	f8bd 3000 	ldrh.w	r3, [sp]
 8004c96:	4581      	cmp	r9, r0
 8004c98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c9c:	f84c 3b04 	str.w	r3, [ip], #4
 8004ca0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ca4:	d2db      	bcs.n	8004c5e <quorem+0x42>
 8004ca6:	f855 300b 	ldr.w	r3, [r5, fp]
 8004caa:	b92b      	cbnz	r3, 8004cb8 <quorem+0x9c>
 8004cac:	9b01      	ldr	r3, [sp, #4]
 8004cae:	3b04      	subs	r3, #4
 8004cb0:	429d      	cmp	r5, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	d32c      	bcc.n	8004d10 <quorem+0xf4>
 8004cb6:	613c      	str	r4, [r7, #16]
 8004cb8:	4638      	mov	r0, r7
 8004cba:	f001 f851 	bl	8005d60 <__mcmp>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	db22      	blt.n	8004d08 <quorem+0xec>
 8004cc2:	3601      	adds	r6, #1
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ccc:	f8d1 c000 	ldr.w	ip, [r1]
 8004cd0:	b293      	uxth	r3, r2
 8004cd2:	1ac3      	subs	r3, r0, r3
 8004cd4:	0c12      	lsrs	r2, r2, #16
 8004cd6:	fa13 f38c 	uxtah	r3, r3, ip
 8004cda:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004cde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ce8:	45c1      	cmp	r9, r8
 8004cea:	f841 3b04 	str.w	r3, [r1], #4
 8004cee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004cf2:	d2e9      	bcs.n	8004cc8 <quorem+0xac>
 8004cf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cfc:	b922      	cbnz	r2, 8004d08 <quorem+0xec>
 8004cfe:	3b04      	subs	r3, #4
 8004d00:	429d      	cmp	r5, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	d30a      	bcc.n	8004d1c <quorem+0x100>
 8004d06:	613c      	str	r4, [r7, #16]
 8004d08:	4630      	mov	r0, r6
 8004d0a:	b003      	add	sp, #12
 8004d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	3b04      	subs	r3, #4
 8004d14:	2a00      	cmp	r2, #0
 8004d16:	d1ce      	bne.n	8004cb6 <quorem+0x9a>
 8004d18:	3c01      	subs	r4, #1
 8004d1a:	e7c9      	b.n	8004cb0 <quorem+0x94>
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	3b04      	subs	r3, #4
 8004d20:	2a00      	cmp	r2, #0
 8004d22:	d1f0      	bne.n	8004d06 <quorem+0xea>
 8004d24:	3c01      	subs	r4, #1
 8004d26:	e7eb      	b.n	8004d00 <quorem+0xe4>
 8004d28:	2000      	movs	r0, #0
 8004d2a:	e7ee      	b.n	8004d0a <quorem+0xee>
 8004d2c:	0000      	movs	r0, r0
	...

08004d30 <_dtoa_r>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	ed2d 8b02 	vpush	{d8}
 8004d38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d3a:	b091      	sub	sp, #68	; 0x44
 8004d3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004d40:	ec59 8b10 	vmov	r8, r9, d0
 8004d44:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8004d46:	9106      	str	r1, [sp, #24]
 8004d48:	4606      	mov	r6, r0
 8004d4a:	9208      	str	r2, [sp, #32]
 8004d4c:	930c      	str	r3, [sp, #48]	; 0x30
 8004d4e:	b975      	cbnz	r5, 8004d6e <_dtoa_r+0x3e>
 8004d50:	2010      	movs	r0, #16
 8004d52:	f000 fd61 	bl	8005818 <malloc>
 8004d56:	4602      	mov	r2, r0
 8004d58:	6270      	str	r0, [r6, #36]	; 0x24
 8004d5a:	b920      	cbnz	r0, 8004d66 <_dtoa_r+0x36>
 8004d5c:	4ba6      	ldr	r3, [pc, #664]	; (8004ff8 <_dtoa_r+0x2c8>)
 8004d5e:	21ea      	movs	r1, #234	; 0xea
 8004d60:	48a6      	ldr	r0, [pc, #664]	; (8004ffc <_dtoa_r+0x2cc>)
 8004d62:	f001 fb69 	bl	8006438 <__assert_func>
 8004d66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d6a:	6005      	str	r5, [r0, #0]
 8004d6c:	60c5      	str	r5, [r0, #12]
 8004d6e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004d70:	6819      	ldr	r1, [r3, #0]
 8004d72:	b151      	cbz	r1, 8004d8a <_dtoa_r+0x5a>
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	604a      	str	r2, [r1, #4]
 8004d78:	2301      	movs	r3, #1
 8004d7a:	4093      	lsls	r3, r2
 8004d7c:	608b      	str	r3, [r1, #8]
 8004d7e:	4630      	mov	r0, r6
 8004d80:	f000 fdb2 	bl	80058e8 <_Bfree>
 8004d84:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f1b9 0300 	subs.w	r3, r9, #0
 8004d8e:	bfbb      	ittet	lt
 8004d90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d94:	9303      	strlt	r3, [sp, #12]
 8004d96:	2300      	movge	r3, #0
 8004d98:	2201      	movlt	r2, #1
 8004d9a:	bfac      	ite	ge
 8004d9c:	6023      	strge	r3, [r4, #0]
 8004d9e:	6022      	strlt	r2, [r4, #0]
 8004da0:	4b97      	ldr	r3, [pc, #604]	; (8005000 <_dtoa_r+0x2d0>)
 8004da2:	9c03      	ldr	r4, [sp, #12]
 8004da4:	43a3      	bics	r3, r4
 8004da6:	d11c      	bne.n	8004de2 <_dtoa_r+0xb2>
 8004da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004daa:	f242 730f 	movw	r3, #9999	; 0x270f
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004db4:	ea53 0308 	orrs.w	r3, r3, r8
 8004db8:	f000 84fb 	beq.w	80057b2 <_dtoa_r+0xa82>
 8004dbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004dbe:	b963      	cbnz	r3, 8004dda <_dtoa_r+0xaa>
 8004dc0:	4b90      	ldr	r3, [pc, #576]	; (8005004 <_dtoa_r+0x2d4>)
 8004dc2:	e020      	b.n	8004e06 <_dtoa_r+0xd6>
 8004dc4:	4b90      	ldr	r3, [pc, #576]	; (8005008 <_dtoa_r+0x2d8>)
 8004dc6:	9301      	str	r3, [sp, #4]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	9801      	ldr	r0, [sp, #4]
 8004dd0:	b011      	add	sp, #68	; 0x44
 8004dd2:	ecbd 8b02 	vpop	{d8}
 8004dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dda:	4b8a      	ldr	r3, [pc, #552]	; (8005004 <_dtoa_r+0x2d4>)
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	3303      	adds	r3, #3
 8004de0:	e7f3      	b.n	8004dca <_dtoa_r+0x9a>
 8004de2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8004de6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dee:	d10c      	bne.n	8004e0a <_dtoa_r+0xda>
 8004df0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004df2:	2301      	movs	r3, #1
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 84d7 	beq.w	80057ac <_dtoa_r+0xa7c>
 8004dfe:	4b83      	ldr	r3, [pc, #524]	; (800500c <_dtoa_r+0x2dc>)
 8004e00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	e7e1      	b.n	8004dce <_dtoa_r+0x9e>
 8004e0a:	aa0e      	add	r2, sp, #56	; 0x38
 8004e0c:	a90f      	add	r1, sp, #60	; 0x3c
 8004e0e:	4630      	mov	r0, r6
 8004e10:	eeb0 0b48 	vmov.f64	d0, d8
 8004e14:	f001 f84a 	bl	8005eac <__d2b>
 8004e18:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8004e1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e1e:	4605      	mov	r5, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d046      	beq.n	8004eb2 <_dtoa_r+0x182>
 8004e24:	eeb0 7b48 	vmov.f64	d7, d8
 8004e28:	ee18 1a90 	vmov	r1, s17
 8004e2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004e30:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8004e34:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004e38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	ee07 1a90 	vmov	s15, r1
 8004e42:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8004e46:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8004fe0 <_dtoa_r+0x2b0>
 8004e4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e4e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8004fe8 <_dtoa_r+0x2b8>
 8004e52:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004e56:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8004ff0 <_dtoa_r+0x2c0>
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004e62:	eeb0 7b46 	vmov.f64	d7, d6
 8004e66:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004e6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004e6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e76:	ee16 ba90 	vmov	fp, s13
 8004e7a:	9009      	str	r0, [sp, #36]	; 0x24
 8004e7c:	d508      	bpl.n	8004e90 <_dtoa_r+0x160>
 8004e7e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004e82:	eeb4 6b47 	vcmp.f64	d6, d7
 8004e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8a:	bf18      	it	ne
 8004e8c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8004e90:	f1bb 0f16 	cmp.w	fp, #22
 8004e94:	d82b      	bhi.n	8004eee <_dtoa_r+0x1be>
 8004e96:	495e      	ldr	r1, [pc, #376]	; (8005010 <_dtoa_r+0x2e0>)
 8004e98:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004e9c:	ed91 7b00 	vldr	d7, [r1]
 8004ea0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea8:	d501      	bpl.n	8004eae <_dtoa_r+0x17e>
 8004eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004eae:	2100      	movs	r1, #0
 8004eb0:	e01e      	b.n	8004ef0 <_dtoa_r+0x1c0>
 8004eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8004eba:	2920      	cmp	r1, #32
 8004ebc:	bfc1      	itttt	gt
 8004ebe:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8004ec2:	408c      	lslgt	r4, r1
 8004ec4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8004ec8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8004ecc:	bfd6      	itet	le
 8004ece:	f1c1 0120 	rsble	r1, r1, #32
 8004ed2:	4321      	orrgt	r1, r4
 8004ed4:	fa08 f101 	lslle.w	r1, r8, r1
 8004ed8:	ee07 1a90 	vmov	s15, r1
 8004edc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	ee17 1a90 	vmov	r1, s15
 8004ee6:	2001      	movs	r0, #1
 8004ee8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004eec:	e7a7      	b.n	8004e3e <_dtoa_r+0x10e>
 8004eee:	2101      	movs	r1, #1
 8004ef0:	1ad2      	subs	r2, r2, r3
 8004ef2:	1e53      	subs	r3, r2, #1
 8004ef4:	9305      	str	r3, [sp, #20]
 8004ef6:	bf45      	ittet	mi
 8004ef8:	f1c2 0301 	rsbmi	r3, r2, #1
 8004efc:	9304      	strmi	r3, [sp, #16]
 8004efe:	2300      	movpl	r3, #0
 8004f00:	2300      	movmi	r3, #0
 8004f02:	bf4c      	ite	mi
 8004f04:	9305      	strmi	r3, [sp, #20]
 8004f06:	9304      	strpl	r3, [sp, #16]
 8004f08:	f1bb 0f00 	cmp.w	fp, #0
 8004f0c:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f0e:	db18      	blt.n	8004f42 <_dtoa_r+0x212>
 8004f10:	9b05      	ldr	r3, [sp, #20]
 8004f12:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004f16:	445b      	add	r3, fp
 8004f18:	9305      	str	r3, [sp, #20]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9a06      	ldr	r2, [sp, #24]
 8004f1e:	2a09      	cmp	r2, #9
 8004f20:	d848      	bhi.n	8004fb4 <_dtoa_r+0x284>
 8004f22:	2a05      	cmp	r2, #5
 8004f24:	bfc4      	itt	gt
 8004f26:	3a04      	subgt	r2, #4
 8004f28:	9206      	strgt	r2, [sp, #24]
 8004f2a:	9a06      	ldr	r2, [sp, #24]
 8004f2c:	f1a2 0202 	sub.w	r2, r2, #2
 8004f30:	bfcc      	ite	gt
 8004f32:	2400      	movgt	r4, #0
 8004f34:	2401      	movle	r4, #1
 8004f36:	2a03      	cmp	r2, #3
 8004f38:	d847      	bhi.n	8004fca <_dtoa_r+0x29a>
 8004f3a:	e8df f002 	tbb	[pc, r2]
 8004f3e:	2d0b      	.short	0x2d0b
 8004f40:	392b      	.short	0x392b
 8004f42:	9b04      	ldr	r3, [sp, #16]
 8004f44:	2200      	movs	r2, #0
 8004f46:	eba3 030b 	sub.w	r3, r3, fp
 8004f4a:	9304      	str	r3, [sp, #16]
 8004f4c:	920a      	str	r2, [sp, #40]	; 0x28
 8004f4e:	f1cb 0300 	rsb	r3, fp, #0
 8004f52:	e7e3      	b.n	8004f1c <_dtoa_r+0x1ec>
 8004f54:	2200      	movs	r2, #0
 8004f56:	9207      	str	r2, [sp, #28]
 8004f58:	9a08      	ldr	r2, [sp, #32]
 8004f5a:	2a00      	cmp	r2, #0
 8004f5c:	dc38      	bgt.n	8004fd0 <_dtoa_r+0x2a0>
 8004f5e:	f04f 0a01 	mov.w	sl, #1
 8004f62:	46d1      	mov	r9, sl
 8004f64:	4652      	mov	r2, sl
 8004f66:	f8cd a020 	str.w	sl, [sp, #32]
 8004f6a:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	2004      	movs	r0, #4
 8004f70:	f100 0c14 	add.w	ip, r0, #20
 8004f74:	4594      	cmp	ip, r2
 8004f76:	d930      	bls.n	8004fda <_dtoa_r+0x2aa>
 8004f78:	6079      	str	r1, [r7, #4]
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	930d      	str	r3, [sp, #52]	; 0x34
 8004f7e:	f000 fc73 	bl	8005868 <_Balloc>
 8004f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f84:	9001      	str	r0, [sp, #4]
 8004f86:	4602      	mov	r2, r0
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d145      	bne.n	8005018 <_dtoa_r+0x2e8>
 8004f8c:	4b21      	ldr	r3, [pc, #132]	; (8005014 <_dtoa_r+0x2e4>)
 8004f8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f92:	e6e5      	b.n	8004d60 <_dtoa_r+0x30>
 8004f94:	2201      	movs	r2, #1
 8004f96:	e7de      	b.n	8004f56 <_dtoa_r+0x226>
 8004f98:	2200      	movs	r2, #0
 8004f9a:	9207      	str	r2, [sp, #28]
 8004f9c:	9a08      	ldr	r2, [sp, #32]
 8004f9e:	eb0b 0a02 	add.w	sl, fp, r2
 8004fa2:	f10a 0901 	add.w	r9, sl, #1
 8004fa6:	464a      	mov	r2, r9
 8004fa8:	2a01      	cmp	r2, #1
 8004faa:	bfb8      	it	lt
 8004fac:	2201      	movlt	r2, #1
 8004fae:	e7dc      	b.n	8004f6a <_dtoa_r+0x23a>
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	e7f2      	b.n	8004f9a <_dtoa_r+0x26a>
 8004fb4:	2401      	movs	r4, #1
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8004fbc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	46d1      	mov	r9, sl
 8004fc4:	2212      	movs	r2, #18
 8004fc6:	9108      	str	r1, [sp, #32]
 8004fc8:	e7cf      	b.n	8004f6a <_dtoa_r+0x23a>
 8004fca:	2201      	movs	r2, #1
 8004fcc:	9207      	str	r2, [sp, #28]
 8004fce:	e7f5      	b.n	8004fbc <_dtoa_r+0x28c>
 8004fd0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004fd4:	46d1      	mov	r9, sl
 8004fd6:	4652      	mov	r2, sl
 8004fd8:	e7c7      	b.n	8004f6a <_dtoa_r+0x23a>
 8004fda:	3101      	adds	r1, #1
 8004fdc:	0040      	lsls	r0, r0, #1
 8004fde:	e7c7      	b.n	8004f70 <_dtoa_r+0x240>
 8004fe0:	636f4361 	.word	0x636f4361
 8004fe4:	3fd287a7 	.word	0x3fd287a7
 8004fe8:	8b60c8b3 	.word	0x8b60c8b3
 8004fec:	3fc68a28 	.word	0x3fc68a28
 8004ff0:	509f79fb 	.word	0x509f79fb
 8004ff4:	3fd34413 	.word	0x3fd34413
 8004ff8:	0801b405 	.word	0x0801b405
 8004ffc:	0801b41c 	.word	0x0801b41c
 8005000:	7ff00000 	.word	0x7ff00000
 8005004:	0801b401 	.word	0x0801b401
 8005008:	0801b3f8 	.word	0x0801b3f8
 800500c:	0801b3d5 	.word	0x0801b3d5
 8005010:	0801b4f0 	.word	0x0801b4f0
 8005014:	0801b464 	.word	0x0801b464
 8005018:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800501a:	9901      	ldr	r1, [sp, #4]
 800501c:	6011      	str	r1, [r2, #0]
 800501e:	f1b9 0f0e 	cmp.w	r9, #14
 8005022:	d86c      	bhi.n	80050fe <_dtoa_r+0x3ce>
 8005024:	2c00      	cmp	r4, #0
 8005026:	d06a      	beq.n	80050fe <_dtoa_r+0x3ce>
 8005028:	f1bb 0f00 	cmp.w	fp, #0
 800502c:	f340 80a0 	ble.w	8005170 <_dtoa_r+0x440>
 8005030:	4ac1      	ldr	r2, [pc, #772]	; (8005338 <_dtoa_r+0x608>)
 8005032:	f00b 010f 	and.w	r1, fp, #15
 8005036:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800503a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800503e:	ed92 7b00 	vldr	d7, [r2]
 8005042:	ea4f 122b 	mov.w	r2, fp, asr #4
 8005046:	f000 8087 	beq.w	8005158 <_dtoa_r+0x428>
 800504a:	49bc      	ldr	r1, [pc, #752]	; (800533c <_dtoa_r+0x60c>)
 800504c:	ed91 6b08 	vldr	d6, [r1, #32]
 8005050:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005054:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005058:	f002 020f 	and.w	r2, r2, #15
 800505c:	2103      	movs	r1, #3
 800505e:	48b7      	ldr	r0, [pc, #732]	; (800533c <_dtoa_r+0x60c>)
 8005060:	2a00      	cmp	r2, #0
 8005062:	d17b      	bne.n	800515c <_dtoa_r+0x42c>
 8005064:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005068:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800506c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005072:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005076:	2a00      	cmp	r2, #0
 8005078:	f000 80a0 	beq.w	80051bc <_dtoa_r+0x48c>
 800507c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005080:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005088:	f140 8098 	bpl.w	80051bc <_dtoa_r+0x48c>
 800508c:	f1b9 0f00 	cmp.w	r9, #0
 8005090:	f000 8094 	beq.w	80051bc <_dtoa_r+0x48c>
 8005094:	f1ba 0f00 	cmp.w	sl, #0
 8005098:	dd2f      	ble.n	80050fa <_dtoa_r+0x3ca>
 800509a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800509e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80050a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80050a6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80050aa:	3101      	adds	r1, #1
 80050ac:	4654      	mov	r4, sl
 80050ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80050b2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80050b6:	ee07 1a90 	vmov	s15, r1
 80050ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80050be:	eea7 5b06 	vfma.f64	d5, d7, d6
 80050c2:	ee15 7a90 	vmov	r7, s11
 80050c6:	ec51 0b15 	vmov	r0, r1, d5
 80050ca:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80050ce:	2c00      	cmp	r4, #0
 80050d0:	d177      	bne.n	80051c2 <_dtoa_r+0x492>
 80050d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80050d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80050da:	ec41 0b17 	vmov	d7, r0, r1
 80050de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e6:	f300 826a 	bgt.w	80055be <_dtoa_r+0x88e>
 80050ea:	eeb1 7b47 	vneg.f64	d7, d7
 80050ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f6:	f100 8260 	bmi.w	80055ba <_dtoa_r+0x88a>
 80050fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80050fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005100:	2a00      	cmp	r2, #0
 8005102:	f2c0 811d 	blt.w	8005340 <_dtoa_r+0x610>
 8005106:	f1bb 0f0e 	cmp.w	fp, #14
 800510a:	f300 8119 	bgt.w	8005340 <_dtoa_r+0x610>
 800510e:	4b8a      	ldr	r3, [pc, #552]	; (8005338 <_dtoa_r+0x608>)
 8005110:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005114:	ed93 6b00 	vldr	d6, [r3]
 8005118:	9b08      	ldr	r3, [sp, #32]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f280 80b7 	bge.w	800528e <_dtoa_r+0x55e>
 8005120:	f1b9 0f00 	cmp.w	r9, #0
 8005124:	f300 80b3 	bgt.w	800528e <_dtoa_r+0x55e>
 8005128:	f040 8246 	bne.w	80055b8 <_dtoa_r+0x888>
 800512c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005130:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005134:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005138:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800513c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005140:	464c      	mov	r4, r9
 8005142:	464f      	mov	r7, r9
 8005144:	f280 821c 	bge.w	8005580 <_dtoa_r+0x850>
 8005148:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800514c:	2331      	movs	r3, #49	; 0x31
 800514e:	f808 3b01 	strb.w	r3, [r8], #1
 8005152:	f10b 0b01 	add.w	fp, fp, #1
 8005156:	e218      	b.n	800558a <_dtoa_r+0x85a>
 8005158:	2102      	movs	r1, #2
 800515a:	e780      	b.n	800505e <_dtoa_r+0x32e>
 800515c:	07d4      	lsls	r4, r2, #31
 800515e:	d504      	bpl.n	800516a <_dtoa_r+0x43a>
 8005160:	ed90 6b00 	vldr	d6, [r0]
 8005164:	3101      	adds	r1, #1
 8005166:	ee27 7b06 	vmul.f64	d7, d7, d6
 800516a:	1052      	asrs	r2, r2, #1
 800516c:	3008      	adds	r0, #8
 800516e:	e777      	b.n	8005060 <_dtoa_r+0x330>
 8005170:	d022      	beq.n	80051b8 <_dtoa_r+0x488>
 8005172:	f1cb 0200 	rsb	r2, fp, #0
 8005176:	4970      	ldr	r1, [pc, #448]	; (8005338 <_dtoa_r+0x608>)
 8005178:	f002 000f 	and.w	r0, r2, #15
 800517c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005180:	ed91 7b00 	vldr	d7, [r1]
 8005184:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005188:	ed8d 7b02 	vstr	d7, [sp, #8]
 800518c:	486b      	ldr	r0, [pc, #428]	; (800533c <_dtoa_r+0x60c>)
 800518e:	1112      	asrs	r2, r2, #4
 8005190:	2400      	movs	r4, #0
 8005192:	2102      	movs	r1, #2
 8005194:	b92a      	cbnz	r2, 80051a2 <_dtoa_r+0x472>
 8005196:	2c00      	cmp	r4, #0
 8005198:	f43f af6a 	beq.w	8005070 <_dtoa_r+0x340>
 800519c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80051a0:	e766      	b.n	8005070 <_dtoa_r+0x340>
 80051a2:	07d7      	lsls	r7, r2, #31
 80051a4:	d505      	bpl.n	80051b2 <_dtoa_r+0x482>
 80051a6:	ed90 6b00 	vldr	d6, [r0]
 80051aa:	3101      	adds	r1, #1
 80051ac:	2401      	movs	r4, #1
 80051ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80051b2:	1052      	asrs	r2, r2, #1
 80051b4:	3008      	adds	r0, #8
 80051b6:	e7ed      	b.n	8005194 <_dtoa_r+0x464>
 80051b8:	2102      	movs	r1, #2
 80051ba:	e759      	b.n	8005070 <_dtoa_r+0x340>
 80051bc:	465a      	mov	r2, fp
 80051be:	464c      	mov	r4, r9
 80051c0:	e775      	b.n	80050ae <_dtoa_r+0x37e>
 80051c2:	ec41 0b17 	vmov	d7, r0, r1
 80051c6:	495c      	ldr	r1, [pc, #368]	; (8005338 <_dtoa_r+0x608>)
 80051c8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80051cc:	ed11 4b02 	vldr	d4, [r1, #-8]
 80051d0:	9901      	ldr	r1, [sp, #4]
 80051d2:	440c      	add	r4, r1
 80051d4:	9907      	ldr	r1, [sp, #28]
 80051d6:	b351      	cbz	r1, 800522e <_dtoa_r+0x4fe>
 80051d8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80051dc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80051e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80051e4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80051e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80051ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 80051f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80051f4:	ee14 1a90 	vmov	r1, s9
 80051f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80051fc:	3130      	adds	r1, #48	; 0x30
 80051fe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005202:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	f808 1b01 	strb.w	r1, [r8], #1
 800520e:	d439      	bmi.n	8005284 <_dtoa_r+0x554>
 8005210:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005214:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521c:	d472      	bmi.n	8005304 <_dtoa_r+0x5d4>
 800521e:	45a0      	cmp	r8, r4
 8005220:	f43f af6b 	beq.w	80050fa <_dtoa_r+0x3ca>
 8005224:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005228:	ee26 6b03 	vmul.f64	d6, d6, d3
 800522c:	e7e0      	b.n	80051f0 <_dtoa_r+0x4c0>
 800522e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005232:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005236:	4620      	mov	r0, r4
 8005238:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800523c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005240:	ee14 1a90 	vmov	r1, s9
 8005244:	3130      	adds	r1, #48	; 0x30
 8005246:	f808 1b01 	strb.w	r1, [r8], #1
 800524a:	45a0      	cmp	r8, r4
 800524c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005250:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005254:	d118      	bne.n	8005288 <_dtoa_r+0x558>
 8005256:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800525a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800525e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005266:	dc4d      	bgt.n	8005304 <_dtoa_r+0x5d4>
 8005268:	ee35 5b47 	vsub.f64	d5, d5, d7
 800526c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005274:	f57f af41 	bpl.w	80050fa <_dtoa_r+0x3ca>
 8005278:	4680      	mov	r8, r0
 800527a:	3801      	subs	r0, #1
 800527c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005280:	2b30      	cmp	r3, #48	; 0x30
 8005282:	d0f9      	beq.n	8005278 <_dtoa_r+0x548>
 8005284:	4693      	mov	fp, r2
 8005286:	e02a      	b.n	80052de <_dtoa_r+0x5ae>
 8005288:	ee26 6b03 	vmul.f64	d6, d6, d3
 800528c:	e7d6      	b.n	800523c <_dtoa_r+0x50c>
 800528e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005292:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005296:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800529a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800529e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80052a2:	ee15 3a10 	vmov	r3, s10
 80052a6:	3330      	adds	r3, #48	; 0x30
 80052a8:	f808 3b01 	strb.w	r3, [r8], #1
 80052ac:	9b01      	ldr	r3, [sp, #4]
 80052ae:	eba8 0303 	sub.w	r3, r8, r3
 80052b2:	4599      	cmp	r9, r3
 80052b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80052b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80052bc:	d133      	bne.n	8005326 <_dtoa_r+0x5f6>
 80052be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80052c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80052c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ca:	dc1a      	bgt.n	8005302 <_dtoa_r+0x5d2>
 80052cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80052d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d4:	d103      	bne.n	80052de <_dtoa_r+0x5ae>
 80052d6:	ee15 3a10 	vmov	r3, s10
 80052da:	07d9      	lsls	r1, r3, #31
 80052dc:	d411      	bmi.n	8005302 <_dtoa_r+0x5d2>
 80052de:	4629      	mov	r1, r5
 80052e0:	4630      	mov	r0, r6
 80052e2:	f000 fb01 	bl	80058e8 <_Bfree>
 80052e6:	2300      	movs	r3, #0
 80052e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052ea:	f888 3000 	strb.w	r3, [r8]
 80052ee:	f10b 0301 	add.w	r3, fp, #1
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f43f ad69 	beq.w	8004dce <_dtoa_r+0x9e>
 80052fc:	f8c3 8000 	str.w	r8, [r3]
 8005300:	e565      	b.n	8004dce <_dtoa_r+0x9e>
 8005302:	465a      	mov	r2, fp
 8005304:	4643      	mov	r3, r8
 8005306:	4698      	mov	r8, r3
 8005308:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800530c:	2939      	cmp	r1, #57	; 0x39
 800530e:	d106      	bne.n	800531e <_dtoa_r+0x5ee>
 8005310:	9901      	ldr	r1, [sp, #4]
 8005312:	4299      	cmp	r1, r3
 8005314:	d1f7      	bne.n	8005306 <_dtoa_r+0x5d6>
 8005316:	9801      	ldr	r0, [sp, #4]
 8005318:	2130      	movs	r1, #48	; 0x30
 800531a:	3201      	adds	r2, #1
 800531c:	7001      	strb	r1, [r0, #0]
 800531e:	7819      	ldrb	r1, [r3, #0]
 8005320:	3101      	adds	r1, #1
 8005322:	7019      	strb	r1, [r3, #0]
 8005324:	e7ae      	b.n	8005284 <_dtoa_r+0x554>
 8005326:	ee27 7b04 	vmul.f64	d7, d7, d4
 800532a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800532e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005332:	d1b2      	bne.n	800529a <_dtoa_r+0x56a>
 8005334:	e7d3      	b.n	80052de <_dtoa_r+0x5ae>
 8005336:	bf00      	nop
 8005338:	0801b4f0 	.word	0x0801b4f0
 800533c:	0801b4c8 	.word	0x0801b4c8
 8005340:	9907      	ldr	r1, [sp, #28]
 8005342:	2900      	cmp	r1, #0
 8005344:	f000 80d0 	beq.w	80054e8 <_dtoa_r+0x7b8>
 8005348:	9906      	ldr	r1, [sp, #24]
 800534a:	2901      	cmp	r1, #1
 800534c:	f300 80b4 	bgt.w	80054b8 <_dtoa_r+0x788>
 8005350:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005352:	2900      	cmp	r1, #0
 8005354:	f000 80ac 	beq.w	80054b0 <_dtoa_r+0x780>
 8005358:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800535c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005360:	461c      	mov	r4, r3
 8005362:	9309      	str	r3, [sp, #36]	; 0x24
 8005364:	9b04      	ldr	r3, [sp, #16]
 8005366:	4413      	add	r3, r2
 8005368:	9304      	str	r3, [sp, #16]
 800536a:	9b05      	ldr	r3, [sp, #20]
 800536c:	2101      	movs	r1, #1
 800536e:	4413      	add	r3, r2
 8005370:	4630      	mov	r0, r6
 8005372:	9305      	str	r3, [sp, #20]
 8005374:	f000 fb6e 	bl	8005a54 <__i2b>
 8005378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537a:	4607      	mov	r7, r0
 800537c:	f1b8 0f00 	cmp.w	r8, #0
 8005380:	d00d      	beq.n	800539e <_dtoa_r+0x66e>
 8005382:	9a05      	ldr	r2, [sp, #20]
 8005384:	2a00      	cmp	r2, #0
 8005386:	dd0a      	ble.n	800539e <_dtoa_r+0x66e>
 8005388:	4542      	cmp	r2, r8
 800538a:	9904      	ldr	r1, [sp, #16]
 800538c:	bfa8      	it	ge
 800538e:	4642      	movge	r2, r8
 8005390:	1a89      	subs	r1, r1, r2
 8005392:	9104      	str	r1, [sp, #16]
 8005394:	9905      	ldr	r1, [sp, #20]
 8005396:	eba8 0802 	sub.w	r8, r8, r2
 800539a:	1a8a      	subs	r2, r1, r2
 800539c:	9205      	str	r2, [sp, #20]
 800539e:	b303      	cbz	r3, 80053e2 <_dtoa_r+0x6b2>
 80053a0:	9a07      	ldr	r2, [sp, #28]
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	f000 80a5 	beq.w	80054f2 <_dtoa_r+0x7c2>
 80053a8:	2c00      	cmp	r4, #0
 80053aa:	dd13      	ble.n	80053d4 <_dtoa_r+0x6a4>
 80053ac:	4639      	mov	r1, r7
 80053ae:	4622      	mov	r2, r4
 80053b0:	4630      	mov	r0, r6
 80053b2:	930d      	str	r3, [sp, #52]	; 0x34
 80053b4:	f000 fc0e 	bl	8005bd4 <__pow5mult>
 80053b8:	462a      	mov	r2, r5
 80053ba:	4601      	mov	r1, r0
 80053bc:	4607      	mov	r7, r0
 80053be:	4630      	mov	r0, r6
 80053c0:	f000 fb5e 	bl	8005a80 <__multiply>
 80053c4:	4629      	mov	r1, r5
 80053c6:	9009      	str	r0, [sp, #36]	; 0x24
 80053c8:	4630      	mov	r0, r6
 80053ca:	f000 fa8d 	bl	80058e8 <_Bfree>
 80053ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053d2:	4615      	mov	r5, r2
 80053d4:	1b1a      	subs	r2, r3, r4
 80053d6:	d004      	beq.n	80053e2 <_dtoa_r+0x6b2>
 80053d8:	4629      	mov	r1, r5
 80053da:	4630      	mov	r0, r6
 80053dc:	f000 fbfa 	bl	8005bd4 <__pow5mult>
 80053e0:	4605      	mov	r5, r0
 80053e2:	2101      	movs	r1, #1
 80053e4:	4630      	mov	r0, r6
 80053e6:	f000 fb35 	bl	8005a54 <__i2b>
 80053ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	4604      	mov	r4, r0
 80053f0:	f340 8081 	ble.w	80054f6 <_dtoa_r+0x7c6>
 80053f4:	461a      	mov	r2, r3
 80053f6:	4601      	mov	r1, r0
 80053f8:	4630      	mov	r0, r6
 80053fa:	f000 fbeb 	bl	8005bd4 <__pow5mult>
 80053fe:	9b06      	ldr	r3, [sp, #24]
 8005400:	2b01      	cmp	r3, #1
 8005402:	4604      	mov	r4, r0
 8005404:	dd7a      	ble.n	80054fc <_dtoa_r+0x7cc>
 8005406:	2300      	movs	r3, #0
 8005408:	9309      	str	r3, [sp, #36]	; 0x24
 800540a:	6922      	ldr	r2, [r4, #16]
 800540c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005410:	6910      	ldr	r0, [r2, #16]
 8005412:	f000 fad1 	bl	80059b8 <__hi0bits>
 8005416:	f1c0 0020 	rsb	r0, r0, #32
 800541a:	9b05      	ldr	r3, [sp, #20]
 800541c:	4418      	add	r0, r3
 800541e:	f010 001f 	ands.w	r0, r0, #31
 8005422:	f000 8093 	beq.w	800554c <_dtoa_r+0x81c>
 8005426:	f1c0 0220 	rsb	r2, r0, #32
 800542a:	2a04      	cmp	r2, #4
 800542c:	f340 8085 	ble.w	800553a <_dtoa_r+0x80a>
 8005430:	9b04      	ldr	r3, [sp, #16]
 8005432:	f1c0 001c 	rsb	r0, r0, #28
 8005436:	4403      	add	r3, r0
 8005438:	9304      	str	r3, [sp, #16]
 800543a:	9b05      	ldr	r3, [sp, #20]
 800543c:	4480      	add	r8, r0
 800543e:	4403      	add	r3, r0
 8005440:	9305      	str	r3, [sp, #20]
 8005442:	9b04      	ldr	r3, [sp, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	dd05      	ble.n	8005454 <_dtoa_r+0x724>
 8005448:	4629      	mov	r1, r5
 800544a:	461a      	mov	r2, r3
 800544c:	4630      	mov	r0, r6
 800544e:	f000 fc1b 	bl	8005c88 <__lshift>
 8005452:	4605      	mov	r5, r0
 8005454:	9b05      	ldr	r3, [sp, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	dd05      	ble.n	8005466 <_dtoa_r+0x736>
 800545a:	4621      	mov	r1, r4
 800545c:	461a      	mov	r2, r3
 800545e:	4630      	mov	r0, r6
 8005460:	f000 fc12 	bl	8005c88 <__lshift>
 8005464:	4604      	mov	r4, r0
 8005466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d071      	beq.n	8005550 <_dtoa_r+0x820>
 800546c:	4621      	mov	r1, r4
 800546e:	4628      	mov	r0, r5
 8005470:	f000 fc76 	bl	8005d60 <__mcmp>
 8005474:	2800      	cmp	r0, #0
 8005476:	da6b      	bge.n	8005550 <_dtoa_r+0x820>
 8005478:	2300      	movs	r3, #0
 800547a:	4629      	mov	r1, r5
 800547c:	220a      	movs	r2, #10
 800547e:	4630      	mov	r0, r6
 8005480:	f000 fa54 	bl	800592c <__multadd>
 8005484:	9b07      	ldr	r3, [sp, #28]
 8005486:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800548a:	4605      	mov	r5, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8197 	beq.w	80057c0 <_dtoa_r+0xa90>
 8005492:	4639      	mov	r1, r7
 8005494:	2300      	movs	r3, #0
 8005496:	220a      	movs	r2, #10
 8005498:	4630      	mov	r0, r6
 800549a:	f000 fa47 	bl	800592c <__multadd>
 800549e:	f1ba 0f00 	cmp.w	sl, #0
 80054a2:	4607      	mov	r7, r0
 80054a4:	f300 8093 	bgt.w	80055ce <_dtoa_r+0x89e>
 80054a8:	9b06      	ldr	r3, [sp, #24]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	dc57      	bgt.n	800555e <_dtoa_r+0x82e>
 80054ae:	e08e      	b.n	80055ce <_dtoa_r+0x89e>
 80054b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80054b6:	e751      	b.n	800535c <_dtoa_r+0x62c>
 80054b8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80054bc:	42a3      	cmp	r3, r4
 80054be:	bfbf      	itttt	lt
 80054c0:	1ae2      	sublt	r2, r4, r3
 80054c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80054c4:	189b      	addlt	r3, r3, r2
 80054c6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80054c8:	bfae      	itee	ge
 80054ca:	1b1c      	subge	r4, r3, r4
 80054cc:	4623      	movlt	r3, r4
 80054ce:	2400      	movlt	r4, #0
 80054d0:	f1b9 0f00 	cmp.w	r9, #0
 80054d4:	bfb5      	itete	lt
 80054d6:	9a04      	ldrlt	r2, [sp, #16]
 80054d8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80054dc:	eba2 0809 	sublt.w	r8, r2, r9
 80054e0:	464a      	movge	r2, r9
 80054e2:	bfb8      	it	lt
 80054e4:	2200      	movlt	r2, #0
 80054e6:	e73c      	b.n	8005362 <_dtoa_r+0x632>
 80054e8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80054ec:	9f07      	ldr	r7, [sp, #28]
 80054ee:	461c      	mov	r4, r3
 80054f0:	e744      	b.n	800537c <_dtoa_r+0x64c>
 80054f2:	461a      	mov	r2, r3
 80054f4:	e770      	b.n	80053d8 <_dtoa_r+0x6a8>
 80054f6:	9b06      	ldr	r3, [sp, #24]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	dc18      	bgt.n	800552e <_dtoa_r+0x7fe>
 80054fc:	9b02      	ldr	r3, [sp, #8]
 80054fe:	b9b3      	cbnz	r3, 800552e <_dtoa_r+0x7fe>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005506:	b9a2      	cbnz	r2, 8005532 <_dtoa_r+0x802>
 8005508:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800550c:	0d12      	lsrs	r2, r2, #20
 800550e:	0512      	lsls	r2, r2, #20
 8005510:	b18a      	cbz	r2, 8005536 <_dtoa_r+0x806>
 8005512:	9b04      	ldr	r3, [sp, #16]
 8005514:	3301      	adds	r3, #1
 8005516:	9304      	str	r3, [sp, #16]
 8005518:	9b05      	ldr	r3, [sp, #20]
 800551a:	3301      	adds	r3, #1
 800551c:	9305      	str	r3, [sp, #20]
 800551e:	2301      	movs	r3, #1
 8005520:	9309      	str	r3, [sp, #36]	; 0x24
 8005522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005524:	2b00      	cmp	r3, #0
 8005526:	f47f af70 	bne.w	800540a <_dtoa_r+0x6da>
 800552a:	2001      	movs	r0, #1
 800552c:	e775      	b.n	800541a <_dtoa_r+0x6ea>
 800552e:	2300      	movs	r3, #0
 8005530:	e7f6      	b.n	8005520 <_dtoa_r+0x7f0>
 8005532:	9b02      	ldr	r3, [sp, #8]
 8005534:	e7f4      	b.n	8005520 <_dtoa_r+0x7f0>
 8005536:	9209      	str	r2, [sp, #36]	; 0x24
 8005538:	e7f3      	b.n	8005522 <_dtoa_r+0x7f2>
 800553a:	d082      	beq.n	8005442 <_dtoa_r+0x712>
 800553c:	9b04      	ldr	r3, [sp, #16]
 800553e:	321c      	adds	r2, #28
 8005540:	4413      	add	r3, r2
 8005542:	9304      	str	r3, [sp, #16]
 8005544:	9b05      	ldr	r3, [sp, #20]
 8005546:	4490      	add	r8, r2
 8005548:	4413      	add	r3, r2
 800554a:	e779      	b.n	8005440 <_dtoa_r+0x710>
 800554c:	4602      	mov	r2, r0
 800554e:	e7f5      	b.n	800553c <_dtoa_r+0x80c>
 8005550:	f1b9 0f00 	cmp.w	r9, #0
 8005554:	dc36      	bgt.n	80055c4 <_dtoa_r+0x894>
 8005556:	9b06      	ldr	r3, [sp, #24]
 8005558:	2b02      	cmp	r3, #2
 800555a:	dd33      	ble.n	80055c4 <_dtoa_r+0x894>
 800555c:	46ca      	mov	sl, r9
 800555e:	f1ba 0f00 	cmp.w	sl, #0
 8005562:	d10d      	bne.n	8005580 <_dtoa_r+0x850>
 8005564:	4621      	mov	r1, r4
 8005566:	4653      	mov	r3, sl
 8005568:	2205      	movs	r2, #5
 800556a:	4630      	mov	r0, r6
 800556c:	f000 f9de 	bl	800592c <__multadd>
 8005570:	4601      	mov	r1, r0
 8005572:	4604      	mov	r4, r0
 8005574:	4628      	mov	r0, r5
 8005576:	f000 fbf3 	bl	8005d60 <__mcmp>
 800557a:	2800      	cmp	r0, #0
 800557c:	f73f ade4 	bgt.w	8005148 <_dtoa_r+0x418>
 8005580:	9b08      	ldr	r3, [sp, #32]
 8005582:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005586:	ea6f 0b03 	mvn.w	fp, r3
 800558a:	f04f 0900 	mov.w	r9, #0
 800558e:	4621      	mov	r1, r4
 8005590:	4630      	mov	r0, r6
 8005592:	f000 f9a9 	bl	80058e8 <_Bfree>
 8005596:	2f00      	cmp	r7, #0
 8005598:	f43f aea1 	beq.w	80052de <_dtoa_r+0x5ae>
 800559c:	f1b9 0f00 	cmp.w	r9, #0
 80055a0:	d005      	beq.n	80055ae <_dtoa_r+0x87e>
 80055a2:	45b9      	cmp	r9, r7
 80055a4:	d003      	beq.n	80055ae <_dtoa_r+0x87e>
 80055a6:	4649      	mov	r1, r9
 80055a8:	4630      	mov	r0, r6
 80055aa:	f000 f99d 	bl	80058e8 <_Bfree>
 80055ae:	4639      	mov	r1, r7
 80055b0:	4630      	mov	r0, r6
 80055b2:	f000 f999 	bl	80058e8 <_Bfree>
 80055b6:	e692      	b.n	80052de <_dtoa_r+0x5ae>
 80055b8:	2400      	movs	r4, #0
 80055ba:	4627      	mov	r7, r4
 80055bc:	e7e0      	b.n	8005580 <_dtoa_r+0x850>
 80055be:	4693      	mov	fp, r2
 80055c0:	4627      	mov	r7, r4
 80055c2:	e5c1      	b.n	8005148 <_dtoa_r+0x418>
 80055c4:	9b07      	ldr	r3, [sp, #28]
 80055c6:	46ca      	mov	sl, r9
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8100 	beq.w	80057ce <_dtoa_r+0xa9e>
 80055ce:	f1b8 0f00 	cmp.w	r8, #0
 80055d2:	dd05      	ble.n	80055e0 <_dtoa_r+0x8b0>
 80055d4:	4639      	mov	r1, r7
 80055d6:	4642      	mov	r2, r8
 80055d8:	4630      	mov	r0, r6
 80055da:	f000 fb55 	bl	8005c88 <__lshift>
 80055de:	4607      	mov	r7, r0
 80055e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d05d      	beq.n	80056a2 <_dtoa_r+0x972>
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	4630      	mov	r0, r6
 80055ea:	f000 f93d 	bl	8005868 <_Balloc>
 80055ee:	4680      	mov	r8, r0
 80055f0:	b928      	cbnz	r0, 80055fe <_dtoa_r+0x8ce>
 80055f2:	4b82      	ldr	r3, [pc, #520]	; (80057fc <_dtoa_r+0xacc>)
 80055f4:	4602      	mov	r2, r0
 80055f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80055fa:	f7ff bbb1 	b.w	8004d60 <_dtoa_r+0x30>
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	3202      	adds	r2, #2
 8005602:	0092      	lsls	r2, r2, #2
 8005604:	f107 010c 	add.w	r1, r7, #12
 8005608:	300c      	adds	r0, #12
 800560a:	f000 f91f 	bl	800584c <memcpy>
 800560e:	2201      	movs	r2, #1
 8005610:	4641      	mov	r1, r8
 8005612:	4630      	mov	r0, r6
 8005614:	f000 fb38 	bl	8005c88 <__lshift>
 8005618:	9b01      	ldr	r3, [sp, #4]
 800561a:	3301      	adds	r3, #1
 800561c:	9304      	str	r3, [sp, #16]
 800561e:	9b01      	ldr	r3, [sp, #4]
 8005620:	4453      	add	r3, sl
 8005622:	9308      	str	r3, [sp, #32]
 8005624:	9b02      	ldr	r3, [sp, #8]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	46b9      	mov	r9, r7
 800562c:	9307      	str	r3, [sp, #28]
 800562e:	4607      	mov	r7, r0
 8005630:	9b04      	ldr	r3, [sp, #16]
 8005632:	4621      	mov	r1, r4
 8005634:	3b01      	subs	r3, #1
 8005636:	4628      	mov	r0, r5
 8005638:	9302      	str	r3, [sp, #8]
 800563a:	f7ff faef 	bl	8004c1c <quorem>
 800563e:	4603      	mov	r3, r0
 8005640:	3330      	adds	r3, #48	; 0x30
 8005642:	9005      	str	r0, [sp, #20]
 8005644:	4649      	mov	r1, r9
 8005646:	4628      	mov	r0, r5
 8005648:	9309      	str	r3, [sp, #36]	; 0x24
 800564a:	f000 fb89 	bl	8005d60 <__mcmp>
 800564e:	463a      	mov	r2, r7
 8005650:	4682      	mov	sl, r0
 8005652:	4621      	mov	r1, r4
 8005654:	4630      	mov	r0, r6
 8005656:	f000 fb9f 	bl	8005d98 <__mdiff>
 800565a:	68c2      	ldr	r2, [r0, #12]
 800565c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800565e:	4680      	mov	r8, r0
 8005660:	bb0a      	cbnz	r2, 80056a6 <_dtoa_r+0x976>
 8005662:	4601      	mov	r1, r0
 8005664:	4628      	mov	r0, r5
 8005666:	f000 fb7b 	bl	8005d60 <__mcmp>
 800566a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566c:	4602      	mov	r2, r0
 800566e:	4641      	mov	r1, r8
 8005670:	4630      	mov	r0, r6
 8005672:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8005676:	f000 f937 	bl	80058e8 <_Bfree>
 800567a:	9b06      	ldr	r3, [sp, #24]
 800567c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800567e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005682:	ea43 0102 	orr.w	r1, r3, r2
 8005686:	9b07      	ldr	r3, [sp, #28]
 8005688:	4319      	orrs	r1, r3
 800568a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800568c:	d10d      	bne.n	80056aa <_dtoa_r+0x97a>
 800568e:	2b39      	cmp	r3, #57	; 0x39
 8005690:	d029      	beq.n	80056e6 <_dtoa_r+0x9b6>
 8005692:	f1ba 0f00 	cmp.w	sl, #0
 8005696:	dd01      	ble.n	800569c <_dtoa_r+0x96c>
 8005698:	9b05      	ldr	r3, [sp, #20]
 800569a:	3331      	adds	r3, #49	; 0x31
 800569c:	9a02      	ldr	r2, [sp, #8]
 800569e:	7013      	strb	r3, [r2, #0]
 80056a0:	e775      	b.n	800558e <_dtoa_r+0x85e>
 80056a2:	4638      	mov	r0, r7
 80056a4:	e7b8      	b.n	8005618 <_dtoa_r+0x8e8>
 80056a6:	2201      	movs	r2, #1
 80056a8:	e7e1      	b.n	800566e <_dtoa_r+0x93e>
 80056aa:	f1ba 0f00 	cmp.w	sl, #0
 80056ae:	db06      	blt.n	80056be <_dtoa_r+0x98e>
 80056b0:	9906      	ldr	r1, [sp, #24]
 80056b2:	ea41 0a0a 	orr.w	sl, r1, sl
 80056b6:	9907      	ldr	r1, [sp, #28]
 80056b8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80056bc:	d120      	bne.n	8005700 <_dtoa_r+0x9d0>
 80056be:	2a00      	cmp	r2, #0
 80056c0:	ddec      	ble.n	800569c <_dtoa_r+0x96c>
 80056c2:	4629      	mov	r1, r5
 80056c4:	2201      	movs	r2, #1
 80056c6:	4630      	mov	r0, r6
 80056c8:	9304      	str	r3, [sp, #16]
 80056ca:	f000 fadd 	bl	8005c88 <__lshift>
 80056ce:	4621      	mov	r1, r4
 80056d0:	4605      	mov	r5, r0
 80056d2:	f000 fb45 	bl	8005d60 <__mcmp>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	9b04      	ldr	r3, [sp, #16]
 80056da:	dc02      	bgt.n	80056e2 <_dtoa_r+0x9b2>
 80056dc:	d1de      	bne.n	800569c <_dtoa_r+0x96c>
 80056de:	07da      	lsls	r2, r3, #31
 80056e0:	d5dc      	bpl.n	800569c <_dtoa_r+0x96c>
 80056e2:	2b39      	cmp	r3, #57	; 0x39
 80056e4:	d1d8      	bne.n	8005698 <_dtoa_r+0x968>
 80056e6:	9a02      	ldr	r2, [sp, #8]
 80056e8:	2339      	movs	r3, #57	; 0x39
 80056ea:	7013      	strb	r3, [r2, #0]
 80056ec:	4643      	mov	r3, r8
 80056ee:	4698      	mov	r8, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80056f6:	2a39      	cmp	r2, #57	; 0x39
 80056f8:	d051      	beq.n	800579e <_dtoa_r+0xa6e>
 80056fa:	3201      	adds	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	e746      	b.n	800558e <_dtoa_r+0x85e>
 8005700:	2a00      	cmp	r2, #0
 8005702:	dd03      	ble.n	800570c <_dtoa_r+0x9dc>
 8005704:	2b39      	cmp	r3, #57	; 0x39
 8005706:	d0ee      	beq.n	80056e6 <_dtoa_r+0x9b6>
 8005708:	3301      	adds	r3, #1
 800570a:	e7c7      	b.n	800569c <_dtoa_r+0x96c>
 800570c:	9a04      	ldr	r2, [sp, #16]
 800570e:	9908      	ldr	r1, [sp, #32]
 8005710:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005714:	428a      	cmp	r2, r1
 8005716:	d02b      	beq.n	8005770 <_dtoa_r+0xa40>
 8005718:	4629      	mov	r1, r5
 800571a:	2300      	movs	r3, #0
 800571c:	220a      	movs	r2, #10
 800571e:	4630      	mov	r0, r6
 8005720:	f000 f904 	bl	800592c <__multadd>
 8005724:	45b9      	cmp	r9, r7
 8005726:	4605      	mov	r5, r0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	f04f 020a 	mov.w	r2, #10
 8005730:	4649      	mov	r1, r9
 8005732:	4630      	mov	r0, r6
 8005734:	d107      	bne.n	8005746 <_dtoa_r+0xa16>
 8005736:	f000 f8f9 	bl	800592c <__multadd>
 800573a:	4681      	mov	r9, r0
 800573c:	4607      	mov	r7, r0
 800573e:	9b04      	ldr	r3, [sp, #16]
 8005740:	3301      	adds	r3, #1
 8005742:	9304      	str	r3, [sp, #16]
 8005744:	e774      	b.n	8005630 <_dtoa_r+0x900>
 8005746:	f000 f8f1 	bl	800592c <__multadd>
 800574a:	4639      	mov	r1, r7
 800574c:	4681      	mov	r9, r0
 800574e:	2300      	movs	r3, #0
 8005750:	220a      	movs	r2, #10
 8005752:	4630      	mov	r0, r6
 8005754:	f000 f8ea 	bl	800592c <__multadd>
 8005758:	4607      	mov	r7, r0
 800575a:	e7f0      	b.n	800573e <_dtoa_r+0xa0e>
 800575c:	f1ba 0f00 	cmp.w	sl, #0
 8005760:	9a01      	ldr	r2, [sp, #4]
 8005762:	bfcc      	ite	gt
 8005764:	46d0      	movgt	r8, sl
 8005766:	f04f 0801 	movle.w	r8, #1
 800576a:	4490      	add	r8, r2
 800576c:	f04f 0900 	mov.w	r9, #0
 8005770:	4629      	mov	r1, r5
 8005772:	2201      	movs	r2, #1
 8005774:	4630      	mov	r0, r6
 8005776:	9302      	str	r3, [sp, #8]
 8005778:	f000 fa86 	bl	8005c88 <__lshift>
 800577c:	4621      	mov	r1, r4
 800577e:	4605      	mov	r5, r0
 8005780:	f000 faee 	bl	8005d60 <__mcmp>
 8005784:	2800      	cmp	r0, #0
 8005786:	dcb1      	bgt.n	80056ec <_dtoa_r+0x9bc>
 8005788:	d102      	bne.n	8005790 <_dtoa_r+0xa60>
 800578a:	9b02      	ldr	r3, [sp, #8]
 800578c:	07db      	lsls	r3, r3, #31
 800578e:	d4ad      	bmi.n	80056ec <_dtoa_r+0x9bc>
 8005790:	4643      	mov	r3, r8
 8005792:	4698      	mov	r8, r3
 8005794:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005798:	2a30      	cmp	r2, #48	; 0x30
 800579a:	d0fa      	beq.n	8005792 <_dtoa_r+0xa62>
 800579c:	e6f7      	b.n	800558e <_dtoa_r+0x85e>
 800579e:	9a01      	ldr	r2, [sp, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d1a4      	bne.n	80056ee <_dtoa_r+0x9be>
 80057a4:	f10b 0b01 	add.w	fp, fp, #1
 80057a8:	2331      	movs	r3, #49	; 0x31
 80057aa:	e778      	b.n	800569e <_dtoa_r+0x96e>
 80057ac:	4b14      	ldr	r3, [pc, #80]	; (8005800 <_dtoa_r+0xad0>)
 80057ae:	f7ff bb2a 	b.w	8004e06 <_dtoa_r+0xd6>
 80057b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f47f ab05 	bne.w	8004dc4 <_dtoa_r+0x94>
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <_dtoa_r+0xad4>)
 80057bc:	f7ff bb23 	b.w	8004e06 <_dtoa_r+0xd6>
 80057c0:	f1ba 0f00 	cmp.w	sl, #0
 80057c4:	dc03      	bgt.n	80057ce <_dtoa_r+0xa9e>
 80057c6:	9b06      	ldr	r3, [sp, #24]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	f73f aec8 	bgt.w	800555e <_dtoa_r+0x82e>
 80057ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80057d2:	4621      	mov	r1, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	f7ff fa21 	bl	8004c1c <quorem>
 80057da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80057de:	f808 3b01 	strb.w	r3, [r8], #1
 80057e2:	9a01      	ldr	r2, [sp, #4]
 80057e4:	eba8 0202 	sub.w	r2, r8, r2
 80057e8:	4592      	cmp	sl, r2
 80057ea:	ddb7      	ble.n	800575c <_dtoa_r+0xa2c>
 80057ec:	4629      	mov	r1, r5
 80057ee:	2300      	movs	r3, #0
 80057f0:	220a      	movs	r2, #10
 80057f2:	4630      	mov	r0, r6
 80057f4:	f000 f89a 	bl	800592c <__multadd>
 80057f8:	4605      	mov	r5, r0
 80057fa:	e7ea      	b.n	80057d2 <_dtoa_r+0xaa2>
 80057fc:	0801b464 	.word	0x0801b464
 8005800:	0801b3d4 	.word	0x0801b3d4
 8005804:	0801b3f8 	.word	0x0801b3f8

08005808 <_localeconv_r>:
 8005808:	4800      	ldr	r0, [pc, #0]	; (800580c <_localeconv_r+0x4>)
 800580a:	4770      	bx	lr
 800580c:	20000574 	.word	0x20000574

08005810 <__retarget_lock_init_recursive>:
 8005810:	4770      	bx	lr

08005812 <__retarget_lock_acquire_recursive>:
 8005812:	4770      	bx	lr

08005814 <__retarget_lock_release_recursive>:
 8005814:	4770      	bx	lr
	...

08005818 <malloc>:
 8005818:	4b02      	ldr	r3, [pc, #8]	; (8005824 <malloc+0xc>)
 800581a:	4601      	mov	r1, r0
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	f000 bc21 	b.w	8006064 <_malloc_r>
 8005822:	bf00      	nop
 8005824:	20000420 	.word	0x20000420

08005828 <__ascii_mbtowc>:
 8005828:	b082      	sub	sp, #8
 800582a:	b901      	cbnz	r1, 800582e <__ascii_mbtowc+0x6>
 800582c:	a901      	add	r1, sp, #4
 800582e:	b142      	cbz	r2, 8005842 <__ascii_mbtowc+0x1a>
 8005830:	b14b      	cbz	r3, 8005846 <__ascii_mbtowc+0x1e>
 8005832:	7813      	ldrb	r3, [r2, #0]
 8005834:	600b      	str	r3, [r1, #0]
 8005836:	7812      	ldrb	r2, [r2, #0]
 8005838:	1e10      	subs	r0, r2, #0
 800583a:	bf18      	it	ne
 800583c:	2001      	movne	r0, #1
 800583e:	b002      	add	sp, #8
 8005840:	4770      	bx	lr
 8005842:	4610      	mov	r0, r2
 8005844:	e7fb      	b.n	800583e <__ascii_mbtowc+0x16>
 8005846:	f06f 0001 	mvn.w	r0, #1
 800584a:	e7f8      	b.n	800583e <__ascii_mbtowc+0x16>

0800584c <memcpy>:
 800584c:	440a      	add	r2, r1
 800584e:	4291      	cmp	r1, r2
 8005850:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005854:	d100      	bne.n	8005858 <memcpy+0xc>
 8005856:	4770      	bx	lr
 8005858:	b510      	push	{r4, lr}
 800585a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800585e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005862:	4291      	cmp	r1, r2
 8005864:	d1f9      	bne.n	800585a <memcpy+0xe>
 8005866:	bd10      	pop	{r4, pc}

08005868 <_Balloc>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800586c:	4604      	mov	r4, r0
 800586e:	460d      	mov	r5, r1
 8005870:	b976      	cbnz	r6, 8005890 <_Balloc+0x28>
 8005872:	2010      	movs	r0, #16
 8005874:	f7ff ffd0 	bl	8005818 <malloc>
 8005878:	4602      	mov	r2, r0
 800587a:	6260      	str	r0, [r4, #36]	; 0x24
 800587c:	b920      	cbnz	r0, 8005888 <_Balloc+0x20>
 800587e:	4b18      	ldr	r3, [pc, #96]	; (80058e0 <_Balloc+0x78>)
 8005880:	4818      	ldr	r0, [pc, #96]	; (80058e4 <_Balloc+0x7c>)
 8005882:	2166      	movs	r1, #102	; 0x66
 8005884:	f000 fdd8 	bl	8006438 <__assert_func>
 8005888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800588c:	6006      	str	r6, [r0, #0]
 800588e:	60c6      	str	r6, [r0, #12]
 8005890:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005892:	68f3      	ldr	r3, [r6, #12]
 8005894:	b183      	cbz	r3, 80058b8 <_Balloc+0x50>
 8005896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800589e:	b9b8      	cbnz	r0, 80058d0 <_Balloc+0x68>
 80058a0:	2101      	movs	r1, #1
 80058a2:	fa01 f605 	lsl.w	r6, r1, r5
 80058a6:	1d72      	adds	r2, r6, #5
 80058a8:	0092      	lsls	r2, r2, #2
 80058aa:	4620      	mov	r0, r4
 80058ac:	f000 fb58 	bl	8005f60 <_calloc_r>
 80058b0:	b160      	cbz	r0, 80058cc <_Balloc+0x64>
 80058b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058b6:	e00e      	b.n	80058d6 <_Balloc+0x6e>
 80058b8:	2221      	movs	r2, #33	; 0x21
 80058ba:	2104      	movs	r1, #4
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 fb4f 	bl	8005f60 <_calloc_r>
 80058c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c4:	60f0      	str	r0, [r6, #12]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e4      	bne.n	8005896 <_Balloc+0x2e>
 80058cc:	2000      	movs	r0, #0
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
 80058d0:	6802      	ldr	r2, [r0, #0]
 80058d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058d6:	2300      	movs	r3, #0
 80058d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058dc:	e7f7      	b.n	80058ce <_Balloc+0x66>
 80058de:	bf00      	nop
 80058e0:	0801b405 	.word	0x0801b405
 80058e4:	0801b47f 	.word	0x0801b47f

080058e8 <_Bfree>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058ec:	4605      	mov	r5, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	b976      	cbnz	r6, 8005910 <_Bfree+0x28>
 80058f2:	2010      	movs	r0, #16
 80058f4:	f7ff ff90 	bl	8005818 <malloc>
 80058f8:	4602      	mov	r2, r0
 80058fa:	6268      	str	r0, [r5, #36]	; 0x24
 80058fc:	b920      	cbnz	r0, 8005908 <_Bfree+0x20>
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <_Bfree+0x3c>)
 8005900:	4809      	ldr	r0, [pc, #36]	; (8005928 <_Bfree+0x40>)
 8005902:	218a      	movs	r1, #138	; 0x8a
 8005904:	f000 fd98 	bl	8006438 <__assert_func>
 8005908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800590c:	6006      	str	r6, [r0, #0]
 800590e:	60c6      	str	r6, [r0, #12]
 8005910:	b13c      	cbz	r4, 8005922 <_Bfree+0x3a>
 8005912:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005914:	6862      	ldr	r2, [r4, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800591c:	6021      	str	r1, [r4, #0]
 800591e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	0801b405 	.word	0x0801b405
 8005928:	0801b47f 	.word	0x0801b47f

0800592c <__multadd>:
 800592c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005930:	690d      	ldr	r5, [r1, #16]
 8005932:	4607      	mov	r7, r0
 8005934:	460c      	mov	r4, r1
 8005936:	461e      	mov	r6, r3
 8005938:	f101 0c14 	add.w	ip, r1, #20
 800593c:	2000      	movs	r0, #0
 800593e:	f8dc 3000 	ldr.w	r3, [ip]
 8005942:	b299      	uxth	r1, r3
 8005944:	fb02 6101 	mla	r1, r2, r1, r6
 8005948:	0c1e      	lsrs	r6, r3, #16
 800594a:	0c0b      	lsrs	r3, r1, #16
 800594c:	fb02 3306 	mla	r3, r2, r6, r3
 8005950:	b289      	uxth	r1, r1
 8005952:	3001      	adds	r0, #1
 8005954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005958:	4285      	cmp	r5, r0
 800595a:	f84c 1b04 	str.w	r1, [ip], #4
 800595e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005962:	dcec      	bgt.n	800593e <__multadd+0x12>
 8005964:	b30e      	cbz	r6, 80059aa <__multadd+0x7e>
 8005966:	68a3      	ldr	r3, [r4, #8]
 8005968:	42ab      	cmp	r3, r5
 800596a:	dc19      	bgt.n	80059a0 <__multadd+0x74>
 800596c:	6861      	ldr	r1, [r4, #4]
 800596e:	4638      	mov	r0, r7
 8005970:	3101      	adds	r1, #1
 8005972:	f7ff ff79 	bl	8005868 <_Balloc>
 8005976:	4680      	mov	r8, r0
 8005978:	b928      	cbnz	r0, 8005986 <__multadd+0x5a>
 800597a:	4602      	mov	r2, r0
 800597c:	4b0c      	ldr	r3, [pc, #48]	; (80059b0 <__multadd+0x84>)
 800597e:	480d      	ldr	r0, [pc, #52]	; (80059b4 <__multadd+0x88>)
 8005980:	21b5      	movs	r1, #181	; 0xb5
 8005982:	f000 fd59 	bl	8006438 <__assert_func>
 8005986:	6922      	ldr	r2, [r4, #16]
 8005988:	3202      	adds	r2, #2
 800598a:	f104 010c 	add.w	r1, r4, #12
 800598e:	0092      	lsls	r2, r2, #2
 8005990:	300c      	adds	r0, #12
 8005992:	f7ff ff5b 	bl	800584c <memcpy>
 8005996:	4621      	mov	r1, r4
 8005998:	4638      	mov	r0, r7
 800599a:	f7ff ffa5 	bl	80058e8 <_Bfree>
 800599e:	4644      	mov	r4, r8
 80059a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059a4:	3501      	adds	r5, #1
 80059a6:	615e      	str	r6, [r3, #20]
 80059a8:	6125      	str	r5, [r4, #16]
 80059aa:	4620      	mov	r0, r4
 80059ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b0:	0801b464 	.word	0x0801b464
 80059b4:	0801b47f 	.word	0x0801b47f

080059b8 <__hi0bits>:
 80059b8:	0c03      	lsrs	r3, r0, #16
 80059ba:	041b      	lsls	r3, r3, #16
 80059bc:	b9d3      	cbnz	r3, 80059f4 <__hi0bits+0x3c>
 80059be:	0400      	lsls	r0, r0, #16
 80059c0:	2310      	movs	r3, #16
 80059c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80059c6:	bf04      	itt	eq
 80059c8:	0200      	lsleq	r0, r0, #8
 80059ca:	3308      	addeq	r3, #8
 80059cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80059d0:	bf04      	itt	eq
 80059d2:	0100      	lsleq	r0, r0, #4
 80059d4:	3304      	addeq	r3, #4
 80059d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80059da:	bf04      	itt	eq
 80059dc:	0080      	lsleq	r0, r0, #2
 80059de:	3302      	addeq	r3, #2
 80059e0:	2800      	cmp	r0, #0
 80059e2:	db05      	blt.n	80059f0 <__hi0bits+0x38>
 80059e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80059e8:	f103 0301 	add.w	r3, r3, #1
 80059ec:	bf08      	it	eq
 80059ee:	2320      	moveq	r3, #32
 80059f0:	4618      	mov	r0, r3
 80059f2:	4770      	bx	lr
 80059f4:	2300      	movs	r3, #0
 80059f6:	e7e4      	b.n	80059c2 <__hi0bits+0xa>

080059f8 <__lo0bits>:
 80059f8:	6803      	ldr	r3, [r0, #0]
 80059fa:	f013 0207 	ands.w	r2, r3, #7
 80059fe:	d00c      	beq.n	8005a1a <__lo0bits+0x22>
 8005a00:	07d9      	lsls	r1, r3, #31
 8005a02:	d422      	bmi.n	8005a4a <__lo0bits+0x52>
 8005a04:	079a      	lsls	r2, r3, #30
 8005a06:	bf49      	itett	mi
 8005a08:	085b      	lsrmi	r3, r3, #1
 8005a0a:	089b      	lsrpl	r3, r3, #2
 8005a0c:	6003      	strmi	r3, [r0, #0]
 8005a0e:	2201      	movmi	r2, #1
 8005a10:	bf5c      	itt	pl
 8005a12:	6003      	strpl	r3, [r0, #0]
 8005a14:	2202      	movpl	r2, #2
 8005a16:	4610      	mov	r0, r2
 8005a18:	4770      	bx	lr
 8005a1a:	b299      	uxth	r1, r3
 8005a1c:	b909      	cbnz	r1, 8005a22 <__lo0bits+0x2a>
 8005a1e:	0c1b      	lsrs	r3, r3, #16
 8005a20:	2210      	movs	r2, #16
 8005a22:	b2d9      	uxtb	r1, r3
 8005a24:	b909      	cbnz	r1, 8005a2a <__lo0bits+0x32>
 8005a26:	3208      	adds	r2, #8
 8005a28:	0a1b      	lsrs	r3, r3, #8
 8005a2a:	0719      	lsls	r1, r3, #28
 8005a2c:	bf04      	itt	eq
 8005a2e:	091b      	lsreq	r3, r3, #4
 8005a30:	3204      	addeq	r2, #4
 8005a32:	0799      	lsls	r1, r3, #30
 8005a34:	bf04      	itt	eq
 8005a36:	089b      	lsreq	r3, r3, #2
 8005a38:	3202      	addeq	r2, #2
 8005a3a:	07d9      	lsls	r1, r3, #31
 8005a3c:	d403      	bmi.n	8005a46 <__lo0bits+0x4e>
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	f102 0201 	add.w	r2, r2, #1
 8005a44:	d003      	beq.n	8005a4e <__lo0bits+0x56>
 8005a46:	6003      	str	r3, [r0, #0]
 8005a48:	e7e5      	b.n	8005a16 <__lo0bits+0x1e>
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	e7e3      	b.n	8005a16 <__lo0bits+0x1e>
 8005a4e:	2220      	movs	r2, #32
 8005a50:	e7e1      	b.n	8005a16 <__lo0bits+0x1e>
	...

08005a54 <__i2b>:
 8005a54:	b510      	push	{r4, lr}
 8005a56:	460c      	mov	r4, r1
 8005a58:	2101      	movs	r1, #1
 8005a5a:	f7ff ff05 	bl	8005868 <_Balloc>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	b928      	cbnz	r0, 8005a6e <__i2b+0x1a>
 8005a62:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <__i2b+0x24>)
 8005a64:	4805      	ldr	r0, [pc, #20]	; (8005a7c <__i2b+0x28>)
 8005a66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a6a:	f000 fce5 	bl	8006438 <__assert_func>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	6144      	str	r4, [r0, #20]
 8005a72:	6103      	str	r3, [r0, #16]
 8005a74:	bd10      	pop	{r4, pc}
 8005a76:	bf00      	nop
 8005a78:	0801b464 	.word	0x0801b464
 8005a7c:	0801b47f 	.word	0x0801b47f

08005a80 <__multiply>:
 8005a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	4691      	mov	r9, r2
 8005a86:	690a      	ldr	r2, [r1, #16]
 8005a88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	bfb8      	it	lt
 8005a90:	460b      	movlt	r3, r1
 8005a92:	460c      	mov	r4, r1
 8005a94:	bfbc      	itt	lt
 8005a96:	464c      	movlt	r4, r9
 8005a98:	4699      	movlt	r9, r3
 8005a9a:	6927      	ldr	r7, [r4, #16]
 8005a9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005aa0:	68a3      	ldr	r3, [r4, #8]
 8005aa2:	6861      	ldr	r1, [r4, #4]
 8005aa4:	eb07 060a 	add.w	r6, r7, sl
 8005aa8:	42b3      	cmp	r3, r6
 8005aaa:	b085      	sub	sp, #20
 8005aac:	bfb8      	it	lt
 8005aae:	3101      	addlt	r1, #1
 8005ab0:	f7ff feda 	bl	8005868 <_Balloc>
 8005ab4:	b930      	cbnz	r0, 8005ac4 <__multiply+0x44>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	4b44      	ldr	r3, [pc, #272]	; (8005bcc <__multiply+0x14c>)
 8005aba:	4845      	ldr	r0, [pc, #276]	; (8005bd0 <__multiply+0x150>)
 8005abc:	f240 115d 	movw	r1, #349	; 0x15d
 8005ac0:	f000 fcba 	bl	8006438 <__assert_func>
 8005ac4:	f100 0514 	add.w	r5, r0, #20
 8005ac8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005acc:	462b      	mov	r3, r5
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4543      	cmp	r3, r8
 8005ad2:	d321      	bcc.n	8005b18 <__multiply+0x98>
 8005ad4:	f104 0314 	add.w	r3, r4, #20
 8005ad8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005adc:	f109 0314 	add.w	r3, r9, #20
 8005ae0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ae4:	9202      	str	r2, [sp, #8]
 8005ae6:	1b3a      	subs	r2, r7, r4
 8005ae8:	3a15      	subs	r2, #21
 8005aea:	f022 0203 	bic.w	r2, r2, #3
 8005aee:	3204      	adds	r2, #4
 8005af0:	f104 0115 	add.w	r1, r4, #21
 8005af4:	428f      	cmp	r7, r1
 8005af6:	bf38      	it	cc
 8005af8:	2204      	movcc	r2, #4
 8005afa:	9201      	str	r2, [sp, #4]
 8005afc:	9a02      	ldr	r2, [sp, #8]
 8005afe:	9303      	str	r3, [sp, #12]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d80c      	bhi.n	8005b1e <__multiply+0x9e>
 8005b04:	2e00      	cmp	r6, #0
 8005b06:	dd03      	ble.n	8005b10 <__multiply+0x90>
 8005b08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d05b      	beq.n	8005bc8 <__multiply+0x148>
 8005b10:	6106      	str	r6, [r0, #16]
 8005b12:	b005      	add	sp, #20
 8005b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b18:	f843 2b04 	str.w	r2, [r3], #4
 8005b1c:	e7d8      	b.n	8005ad0 <__multiply+0x50>
 8005b1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b22:	f1ba 0f00 	cmp.w	sl, #0
 8005b26:	d024      	beq.n	8005b72 <__multiply+0xf2>
 8005b28:	f104 0e14 	add.w	lr, r4, #20
 8005b2c:	46a9      	mov	r9, r5
 8005b2e:	f04f 0c00 	mov.w	ip, #0
 8005b32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b36:	f8d9 1000 	ldr.w	r1, [r9]
 8005b3a:	fa1f fb82 	uxth.w	fp, r2
 8005b3e:	b289      	uxth	r1, r1
 8005b40:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b48:	f8d9 2000 	ldr.w	r2, [r9]
 8005b4c:	4461      	add	r1, ip
 8005b4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b52:	fb0a c20b 	mla	r2, sl, fp, ip
 8005b56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b5a:	b289      	uxth	r1, r1
 8005b5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b60:	4577      	cmp	r7, lr
 8005b62:	f849 1b04 	str.w	r1, [r9], #4
 8005b66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b6a:	d8e2      	bhi.n	8005b32 <__multiply+0xb2>
 8005b6c:	9a01      	ldr	r2, [sp, #4]
 8005b6e:	f845 c002 	str.w	ip, [r5, r2]
 8005b72:	9a03      	ldr	r2, [sp, #12]
 8005b74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	f1b9 0f00 	cmp.w	r9, #0
 8005b7e:	d021      	beq.n	8005bc4 <__multiply+0x144>
 8005b80:	6829      	ldr	r1, [r5, #0]
 8005b82:	f104 0c14 	add.w	ip, r4, #20
 8005b86:	46ae      	mov	lr, r5
 8005b88:	f04f 0a00 	mov.w	sl, #0
 8005b8c:	f8bc b000 	ldrh.w	fp, [ip]
 8005b90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005b94:	fb09 220b 	mla	r2, r9, fp, r2
 8005b98:	4452      	add	r2, sl
 8005b9a:	b289      	uxth	r1, r1
 8005b9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ba0:	f84e 1b04 	str.w	r1, [lr], #4
 8005ba4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005ba8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bac:	f8be 1000 	ldrh.w	r1, [lr]
 8005bb0:	fb09 110a 	mla	r1, r9, sl, r1
 8005bb4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005bb8:	4567      	cmp	r7, ip
 8005bba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bbe:	d8e5      	bhi.n	8005b8c <__multiply+0x10c>
 8005bc0:	9a01      	ldr	r2, [sp, #4]
 8005bc2:	50a9      	str	r1, [r5, r2]
 8005bc4:	3504      	adds	r5, #4
 8005bc6:	e799      	b.n	8005afc <__multiply+0x7c>
 8005bc8:	3e01      	subs	r6, #1
 8005bca:	e79b      	b.n	8005b04 <__multiply+0x84>
 8005bcc:	0801b464 	.word	0x0801b464
 8005bd0:	0801b47f 	.word	0x0801b47f

08005bd4 <__pow5mult>:
 8005bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd8:	4615      	mov	r5, r2
 8005bda:	f012 0203 	ands.w	r2, r2, #3
 8005bde:	4606      	mov	r6, r0
 8005be0:	460f      	mov	r7, r1
 8005be2:	d007      	beq.n	8005bf4 <__pow5mult+0x20>
 8005be4:	4c25      	ldr	r4, [pc, #148]	; (8005c7c <__pow5mult+0xa8>)
 8005be6:	3a01      	subs	r2, #1
 8005be8:	2300      	movs	r3, #0
 8005bea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bee:	f7ff fe9d 	bl	800592c <__multadd>
 8005bf2:	4607      	mov	r7, r0
 8005bf4:	10ad      	asrs	r5, r5, #2
 8005bf6:	d03d      	beq.n	8005c74 <__pow5mult+0xa0>
 8005bf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005bfa:	b97c      	cbnz	r4, 8005c1c <__pow5mult+0x48>
 8005bfc:	2010      	movs	r0, #16
 8005bfe:	f7ff fe0b 	bl	8005818 <malloc>
 8005c02:	4602      	mov	r2, r0
 8005c04:	6270      	str	r0, [r6, #36]	; 0x24
 8005c06:	b928      	cbnz	r0, 8005c14 <__pow5mult+0x40>
 8005c08:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <__pow5mult+0xac>)
 8005c0a:	481e      	ldr	r0, [pc, #120]	; (8005c84 <__pow5mult+0xb0>)
 8005c0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c10:	f000 fc12 	bl	8006438 <__assert_func>
 8005c14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c18:	6004      	str	r4, [r0, #0]
 8005c1a:	60c4      	str	r4, [r0, #12]
 8005c1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c24:	b94c      	cbnz	r4, 8005c3a <__pow5mult+0x66>
 8005c26:	f240 2171 	movw	r1, #625	; 0x271
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f7ff ff12 	bl	8005a54 <__i2b>
 8005c30:	2300      	movs	r3, #0
 8005c32:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c36:	4604      	mov	r4, r0
 8005c38:	6003      	str	r3, [r0, #0]
 8005c3a:	f04f 0900 	mov.w	r9, #0
 8005c3e:	07eb      	lsls	r3, r5, #31
 8005c40:	d50a      	bpl.n	8005c58 <__pow5mult+0x84>
 8005c42:	4639      	mov	r1, r7
 8005c44:	4622      	mov	r2, r4
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7ff ff1a 	bl	8005a80 <__multiply>
 8005c4c:	4639      	mov	r1, r7
 8005c4e:	4680      	mov	r8, r0
 8005c50:	4630      	mov	r0, r6
 8005c52:	f7ff fe49 	bl	80058e8 <_Bfree>
 8005c56:	4647      	mov	r7, r8
 8005c58:	106d      	asrs	r5, r5, #1
 8005c5a:	d00b      	beq.n	8005c74 <__pow5mult+0xa0>
 8005c5c:	6820      	ldr	r0, [r4, #0]
 8005c5e:	b938      	cbnz	r0, 8005c70 <__pow5mult+0x9c>
 8005c60:	4622      	mov	r2, r4
 8005c62:	4621      	mov	r1, r4
 8005c64:	4630      	mov	r0, r6
 8005c66:	f7ff ff0b 	bl	8005a80 <__multiply>
 8005c6a:	6020      	str	r0, [r4, #0]
 8005c6c:	f8c0 9000 	str.w	r9, [r0]
 8005c70:	4604      	mov	r4, r0
 8005c72:	e7e4      	b.n	8005c3e <__pow5mult+0x6a>
 8005c74:	4638      	mov	r0, r7
 8005c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7a:	bf00      	nop
 8005c7c:	0801b5b8 	.word	0x0801b5b8
 8005c80:	0801b405 	.word	0x0801b405
 8005c84:	0801b47f 	.word	0x0801b47f

08005c88 <__lshift>:
 8005c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	6849      	ldr	r1, [r1, #4]
 8005c90:	6923      	ldr	r3, [r4, #16]
 8005c92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c96:	68a3      	ldr	r3, [r4, #8]
 8005c98:	4607      	mov	r7, r0
 8005c9a:	4691      	mov	r9, r2
 8005c9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ca0:	f108 0601 	add.w	r6, r8, #1
 8005ca4:	42b3      	cmp	r3, r6
 8005ca6:	db0b      	blt.n	8005cc0 <__lshift+0x38>
 8005ca8:	4638      	mov	r0, r7
 8005caa:	f7ff fddd 	bl	8005868 <_Balloc>
 8005cae:	4605      	mov	r5, r0
 8005cb0:	b948      	cbnz	r0, 8005cc6 <__lshift+0x3e>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	4b28      	ldr	r3, [pc, #160]	; (8005d58 <__lshift+0xd0>)
 8005cb6:	4829      	ldr	r0, [pc, #164]	; (8005d5c <__lshift+0xd4>)
 8005cb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005cbc:	f000 fbbc 	bl	8006438 <__assert_func>
 8005cc0:	3101      	adds	r1, #1
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	e7ee      	b.n	8005ca4 <__lshift+0x1c>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f100 0114 	add.w	r1, r0, #20
 8005ccc:	f100 0210 	add.w	r2, r0, #16
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	4553      	cmp	r3, sl
 8005cd4:	db33      	blt.n	8005d3e <__lshift+0xb6>
 8005cd6:	6920      	ldr	r0, [r4, #16]
 8005cd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cdc:	f104 0314 	add.w	r3, r4, #20
 8005ce0:	f019 091f 	ands.w	r9, r9, #31
 8005ce4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ce8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005cec:	d02b      	beq.n	8005d46 <__lshift+0xbe>
 8005cee:	f1c9 0e20 	rsb	lr, r9, #32
 8005cf2:	468a      	mov	sl, r1
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	fa00 f009 	lsl.w	r0, r0, r9
 8005cfc:	4310      	orrs	r0, r2
 8005cfe:	f84a 0b04 	str.w	r0, [sl], #4
 8005d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d06:	459c      	cmp	ip, r3
 8005d08:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d0c:	d8f3      	bhi.n	8005cf6 <__lshift+0x6e>
 8005d0e:	ebac 0304 	sub.w	r3, ip, r4
 8005d12:	3b15      	subs	r3, #21
 8005d14:	f023 0303 	bic.w	r3, r3, #3
 8005d18:	3304      	adds	r3, #4
 8005d1a:	f104 0015 	add.w	r0, r4, #21
 8005d1e:	4584      	cmp	ip, r0
 8005d20:	bf38      	it	cc
 8005d22:	2304      	movcc	r3, #4
 8005d24:	50ca      	str	r2, [r1, r3]
 8005d26:	b10a      	cbz	r2, 8005d2c <__lshift+0xa4>
 8005d28:	f108 0602 	add.w	r6, r8, #2
 8005d2c:	3e01      	subs	r6, #1
 8005d2e:	4638      	mov	r0, r7
 8005d30:	612e      	str	r6, [r5, #16]
 8005d32:	4621      	mov	r1, r4
 8005d34:	f7ff fdd8 	bl	80058e8 <_Bfree>
 8005d38:	4628      	mov	r0, r5
 8005d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d42:	3301      	adds	r3, #1
 8005d44:	e7c5      	b.n	8005cd2 <__lshift+0x4a>
 8005d46:	3904      	subs	r1, #4
 8005d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d50:	459c      	cmp	ip, r3
 8005d52:	d8f9      	bhi.n	8005d48 <__lshift+0xc0>
 8005d54:	e7ea      	b.n	8005d2c <__lshift+0xa4>
 8005d56:	bf00      	nop
 8005d58:	0801b464 	.word	0x0801b464
 8005d5c:	0801b47f 	.word	0x0801b47f

08005d60 <__mcmp>:
 8005d60:	b530      	push	{r4, r5, lr}
 8005d62:	6902      	ldr	r2, [r0, #16]
 8005d64:	690c      	ldr	r4, [r1, #16]
 8005d66:	1b12      	subs	r2, r2, r4
 8005d68:	d10e      	bne.n	8005d88 <__mcmp+0x28>
 8005d6a:	f100 0314 	add.w	r3, r0, #20
 8005d6e:	3114      	adds	r1, #20
 8005d70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005d74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005d78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005d7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005d80:	42a5      	cmp	r5, r4
 8005d82:	d003      	beq.n	8005d8c <__mcmp+0x2c>
 8005d84:	d305      	bcc.n	8005d92 <__mcmp+0x32>
 8005d86:	2201      	movs	r2, #1
 8005d88:	4610      	mov	r0, r2
 8005d8a:	bd30      	pop	{r4, r5, pc}
 8005d8c:	4283      	cmp	r3, r0
 8005d8e:	d3f3      	bcc.n	8005d78 <__mcmp+0x18>
 8005d90:	e7fa      	b.n	8005d88 <__mcmp+0x28>
 8005d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d96:	e7f7      	b.n	8005d88 <__mcmp+0x28>

08005d98 <__mdiff>:
 8005d98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	4606      	mov	r6, r0
 8005da0:	4611      	mov	r1, r2
 8005da2:	4620      	mov	r0, r4
 8005da4:	4690      	mov	r8, r2
 8005da6:	f7ff ffdb 	bl	8005d60 <__mcmp>
 8005daa:	1e05      	subs	r5, r0, #0
 8005dac:	d110      	bne.n	8005dd0 <__mdiff+0x38>
 8005dae:	4629      	mov	r1, r5
 8005db0:	4630      	mov	r0, r6
 8005db2:	f7ff fd59 	bl	8005868 <_Balloc>
 8005db6:	b930      	cbnz	r0, 8005dc6 <__mdiff+0x2e>
 8005db8:	4b3a      	ldr	r3, [pc, #232]	; (8005ea4 <__mdiff+0x10c>)
 8005dba:	4602      	mov	r2, r0
 8005dbc:	f240 2132 	movw	r1, #562	; 0x232
 8005dc0:	4839      	ldr	r0, [pc, #228]	; (8005ea8 <__mdiff+0x110>)
 8005dc2:	f000 fb39 	bl	8006438 <__assert_func>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd0:	bfa4      	itt	ge
 8005dd2:	4643      	movge	r3, r8
 8005dd4:	46a0      	movge	r8, r4
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ddc:	bfa6      	itte	ge
 8005dde:	461c      	movge	r4, r3
 8005de0:	2500      	movge	r5, #0
 8005de2:	2501      	movlt	r5, #1
 8005de4:	f7ff fd40 	bl	8005868 <_Balloc>
 8005de8:	b920      	cbnz	r0, 8005df4 <__mdiff+0x5c>
 8005dea:	4b2e      	ldr	r3, [pc, #184]	; (8005ea4 <__mdiff+0x10c>)
 8005dec:	4602      	mov	r2, r0
 8005dee:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005df2:	e7e5      	b.n	8005dc0 <__mdiff+0x28>
 8005df4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005df8:	6926      	ldr	r6, [r4, #16]
 8005dfa:	60c5      	str	r5, [r0, #12]
 8005dfc:	f104 0914 	add.w	r9, r4, #20
 8005e00:	f108 0514 	add.w	r5, r8, #20
 8005e04:	f100 0e14 	add.w	lr, r0, #20
 8005e08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005e0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e10:	f108 0210 	add.w	r2, r8, #16
 8005e14:	46f2      	mov	sl, lr
 8005e16:	2100      	movs	r1, #0
 8005e18:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005e20:	fa11 f88b 	uxtah	r8, r1, fp
 8005e24:	b299      	uxth	r1, r3
 8005e26:	0c1b      	lsrs	r3, r3, #16
 8005e28:	eba8 0801 	sub.w	r8, r8, r1
 8005e2c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e30:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e34:	fa1f f888 	uxth.w	r8, r8
 8005e38:	1419      	asrs	r1, r3, #16
 8005e3a:	454e      	cmp	r6, r9
 8005e3c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e40:	f84a 3b04 	str.w	r3, [sl], #4
 8005e44:	d8e8      	bhi.n	8005e18 <__mdiff+0x80>
 8005e46:	1b33      	subs	r3, r6, r4
 8005e48:	3b15      	subs	r3, #21
 8005e4a:	f023 0303 	bic.w	r3, r3, #3
 8005e4e:	3304      	adds	r3, #4
 8005e50:	3415      	adds	r4, #21
 8005e52:	42a6      	cmp	r6, r4
 8005e54:	bf38      	it	cc
 8005e56:	2304      	movcc	r3, #4
 8005e58:	441d      	add	r5, r3
 8005e5a:	4473      	add	r3, lr
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	462e      	mov	r6, r5
 8005e60:	4566      	cmp	r6, ip
 8005e62:	d30e      	bcc.n	8005e82 <__mdiff+0xea>
 8005e64:	f10c 0203 	add.w	r2, ip, #3
 8005e68:	1b52      	subs	r2, r2, r5
 8005e6a:	f022 0203 	bic.w	r2, r2, #3
 8005e6e:	3d03      	subs	r5, #3
 8005e70:	45ac      	cmp	ip, r5
 8005e72:	bf38      	it	cc
 8005e74:	2200      	movcc	r2, #0
 8005e76:	4413      	add	r3, r2
 8005e78:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005e7c:	b17a      	cbz	r2, 8005e9e <__mdiff+0x106>
 8005e7e:	6107      	str	r7, [r0, #16]
 8005e80:	e7a4      	b.n	8005dcc <__mdiff+0x34>
 8005e82:	f856 8b04 	ldr.w	r8, [r6], #4
 8005e86:	fa11 f288 	uxtah	r2, r1, r8
 8005e8a:	1414      	asrs	r4, r2, #16
 8005e8c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005e90:	b292      	uxth	r2, r2
 8005e92:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005e96:	f84e 2b04 	str.w	r2, [lr], #4
 8005e9a:	1421      	asrs	r1, r4, #16
 8005e9c:	e7e0      	b.n	8005e60 <__mdiff+0xc8>
 8005e9e:	3f01      	subs	r7, #1
 8005ea0:	e7ea      	b.n	8005e78 <__mdiff+0xe0>
 8005ea2:	bf00      	nop
 8005ea4:	0801b464 	.word	0x0801b464
 8005ea8:	0801b47f 	.word	0x0801b47f

08005eac <__d2b>:
 8005eac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005eb0:	460f      	mov	r7, r1
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	ec59 8b10 	vmov	r8, r9, d0
 8005eb8:	4616      	mov	r6, r2
 8005eba:	f7ff fcd5 	bl	8005868 <_Balloc>
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	b930      	cbnz	r0, 8005ed0 <__d2b+0x24>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	4b24      	ldr	r3, [pc, #144]	; (8005f58 <__d2b+0xac>)
 8005ec6:	4825      	ldr	r0, [pc, #148]	; (8005f5c <__d2b+0xb0>)
 8005ec8:	f240 310a 	movw	r1, #778	; 0x30a
 8005ecc:	f000 fab4 	bl	8006438 <__assert_func>
 8005ed0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ed4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ed8:	bb2d      	cbnz	r5, 8005f26 <__d2b+0x7a>
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	f1b8 0300 	subs.w	r3, r8, #0
 8005ee0:	d026      	beq.n	8005f30 <__d2b+0x84>
 8005ee2:	4668      	mov	r0, sp
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	f7ff fd87 	bl	80059f8 <__lo0bits>
 8005eea:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005eee:	b1e8      	cbz	r0, 8005f2c <__d2b+0x80>
 8005ef0:	f1c0 0320 	rsb	r3, r0, #32
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	40c2      	lsrs	r2, r0
 8005efc:	6163      	str	r3, [r4, #20]
 8005efe:	9201      	str	r2, [sp, #4]
 8005f00:	9b01      	ldr	r3, [sp, #4]
 8005f02:	61a3      	str	r3, [r4, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	bf14      	ite	ne
 8005f08:	2202      	movne	r2, #2
 8005f0a:	2201      	moveq	r2, #1
 8005f0c:	6122      	str	r2, [r4, #16]
 8005f0e:	b1bd      	cbz	r5, 8005f40 <__d2b+0x94>
 8005f10:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f14:	4405      	add	r5, r0
 8005f16:	603d      	str	r5, [r7, #0]
 8005f18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f1c:	6030      	str	r0, [r6, #0]
 8005f1e:	4620      	mov	r0, r4
 8005f20:	b003      	add	sp, #12
 8005f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f2a:	e7d6      	b.n	8005eda <__d2b+0x2e>
 8005f2c:	6161      	str	r1, [r4, #20]
 8005f2e:	e7e7      	b.n	8005f00 <__d2b+0x54>
 8005f30:	a801      	add	r0, sp, #4
 8005f32:	f7ff fd61 	bl	80059f8 <__lo0bits>
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	6163      	str	r3, [r4, #20]
 8005f3a:	3020      	adds	r0, #32
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	e7e5      	b.n	8005f0c <__d2b+0x60>
 8005f40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f48:	6038      	str	r0, [r7, #0]
 8005f4a:	6918      	ldr	r0, [r3, #16]
 8005f4c:	f7ff fd34 	bl	80059b8 <__hi0bits>
 8005f50:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f54:	e7e2      	b.n	8005f1c <__d2b+0x70>
 8005f56:	bf00      	nop
 8005f58:	0801b464 	.word	0x0801b464
 8005f5c:	0801b47f 	.word	0x0801b47f

08005f60 <_calloc_r>:
 8005f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f62:	fba1 2402 	umull	r2, r4, r1, r2
 8005f66:	b94c      	cbnz	r4, 8005f7c <_calloc_r+0x1c>
 8005f68:	4611      	mov	r1, r2
 8005f6a:	9201      	str	r2, [sp, #4]
 8005f6c:	f000 f87a 	bl	8006064 <_malloc_r>
 8005f70:	9a01      	ldr	r2, [sp, #4]
 8005f72:	4605      	mov	r5, r0
 8005f74:	b930      	cbnz	r0, 8005f84 <_calloc_r+0x24>
 8005f76:	4628      	mov	r0, r5
 8005f78:	b003      	add	sp, #12
 8005f7a:	bd30      	pop	{r4, r5, pc}
 8005f7c:	220c      	movs	r2, #12
 8005f7e:	6002      	str	r2, [r0, #0]
 8005f80:	2500      	movs	r5, #0
 8005f82:	e7f8      	b.n	8005f76 <_calloc_r+0x16>
 8005f84:	4621      	mov	r1, r4
 8005f86:	f7fe f9e7 	bl	8004358 <memset>
 8005f8a:	e7f4      	b.n	8005f76 <_calloc_r+0x16>

08005f8c <_free_r>:
 8005f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f8e:	2900      	cmp	r1, #0
 8005f90:	d044      	beq.n	800601c <_free_r+0x90>
 8005f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f96:	9001      	str	r0, [sp, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f1a1 0404 	sub.w	r4, r1, #4
 8005f9e:	bfb8      	it	lt
 8005fa0:	18e4      	addlt	r4, r4, r3
 8005fa2:	f000 fa93 	bl	80064cc <__malloc_lock>
 8005fa6:	4a1e      	ldr	r2, [pc, #120]	; (8006020 <_free_r+0x94>)
 8005fa8:	9801      	ldr	r0, [sp, #4]
 8005faa:	6813      	ldr	r3, [r2, #0]
 8005fac:	b933      	cbnz	r3, 8005fbc <_free_r+0x30>
 8005fae:	6063      	str	r3, [r4, #4]
 8005fb0:	6014      	str	r4, [r2, #0]
 8005fb2:	b003      	add	sp, #12
 8005fb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fb8:	f000 ba8e 	b.w	80064d8 <__malloc_unlock>
 8005fbc:	42a3      	cmp	r3, r4
 8005fbe:	d908      	bls.n	8005fd2 <_free_r+0x46>
 8005fc0:	6825      	ldr	r5, [r4, #0]
 8005fc2:	1961      	adds	r1, r4, r5
 8005fc4:	428b      	cmp	r3, r1
 8005fc6:	bf01      	itttt	eq
 8005fc8:	6819      	ldreq	r1, [r3, #0]
 8005fca:	685b      	ldreq	r3, [r3, #4]
 8005fcc:	1949      	addeq	r1, r1, r5
 8005fce:	6021      	streq	r1, [r4, #0]
 8005fd0:	e7ed      	b.n	8005fae <_free_r+0x22>
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	b10b      	cbz	r3, 8005fdc <_free_r+0x50>
 8005fd8:	42a3      	cmp	r3, r4
 8005fda:	d9fa      	bls.n	8005fd2 <_free_r+0x46>
 8005fdc:	6811      	ldr	r1, [r2, #0]
 8005fde:	1855      	adds	r5, r2, r1
 8005fe0:	42a5      	cmp	r5, r4
 8005fe2:	d10b      	bne.n	8005ffc <_free_r+0x70>
 8005fe4:	6824      	ldr	r4, [r4, #0]
 8005fe6:	4421      	add	r1, r4
 8005fe8:	1854      	adds	r4, r2, r1
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	6011      	str	r1, [r2, #0]
 8005fee:	d1e0      	bne.n	8005fb2 <_free_r+0x26>
 8005ff0:	681c      	ldr	r4, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	6053      	str	r3, [r2, #4]
 8005ff6:	440c      	add	r4, r1
 8005ff8:	6014      	str	r4, [r2, #0]
 8005ffa:	e7da      	b.n	8005fb2 <_free_r+0x26>
 8005ffc:	d902      	bls.n	8006004 <_free_r+0x78>
 8005ffe:	230c      	movs	r3, #12
 8006000:	6003      	str	r3, [r0, #0]
 8006002:	e7d6      	b.n	8005fb2 <_free_r+0x26>
 8006004:	6825      	ldr	r5, [r4, #0]
 8006006:	1961      	adds	r1, r4, r5
 8006008:	428b      	cmp	r3, r1
 800600a:	bf04      	itt	eq
 800600c:	6819      	ldreq	r1, [r3, #0]
 800600e:	685b      	ldreq	r3, [r3, #4]
 8006010:	6063      	str	r3, [r4, #4]
 8006012:	bf04      	itt	eq
 8006014:	1949      	addeq	r1, r1, r5
 8006016:	6021      	streq	r1, [r4, #0]
 8006018:	6054      	str	r4, [r2, #4]
 800601a:	e7ca      	b.n	8005fb2 <_free_r+0x26>
 800601c:	b003      	add	sp, #12
 800601e:	bd30      	pop	{r4, r5, pc}
 8006020:	200353c4 	.word	0x200353c4

08006024 <sbrk_aligned>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	4e0e      	ldr	r6, [pc, #56]	; (8006060 <sbrk_aligned+0x3c>)
 8006028:	460c      	mov	r4, r1
 800602a:	6831      	ldr	r1, [r6, #0]
 800602c:	4605      	mov	r5, r0
 800602e:	b911      	cbnz	r1, 8006036 <sbrk_aligned+0x12>
 8006030:	f000 f9e4 	bl	80063fc <_sbrk_r>
 8006034:	6030      	str	r0, [r6, #0]
 8006036:	4621      	mov	r1, r4
 8006038:	4628      	mov	r0, r5
 800603a:	f000 f9df 	bl	80063fc <_sbrk_r>
 800603e:	1c43      	adds	r3, r0, #1
 8006040:	d00a      	beq.n	8006058 <sbrk_aligned+0x34>
 8006042:	1cc4      	adds	r4, r0, #3
 8006044:	f024 0403 	bic.w	r4, r4, #3
 8006048:	42a0      	cmp	r0, r4
 800604a:	d007      	beq.n	800605c <sbrk_aligned+0x38>
 800604c:	1a21      	subs	r1, r4, r0
 800604e:	4628      	mov	r0, r5
 8006050:	f000 f9d4 	bl	80063fc <_sbrk_r>
 8006054:	3001      	adds	r0, #1
 8006056:	d101      	bne.n	800605c <sbrk_aligned+0x38>
 8006058:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800605c:	4620      	mov	r0, r4
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	200353c8 	.word	0x200353c8

08006064 <_malloc_r>:
 8006064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006068:	1ccd      	adds	r5, r1, #3
 800606a:	f025 0503 	bic.w	r5, r5, #3
 800606e:	3508      	adds	r5, #8
 8006070:	2d0c      	cmp	r5, #12
 8006072:	bf38      	it	cc
 8006074:	250c      	movcc	r5, #12
 8006076:	2d00      	cmp	r5, #0
 8006078:	4607      	mov	r7, r0
 800607a:	db01      	blt.n	8006080 <_malloc_r+0x1c>
 800607c:	42a9      	cmp	r1, r5
 800607e:	d905      	bls.n	800608c <_malloc_r+0x28>
 8006080:	230c      	movs	r3, #12
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	2600      	movs	r6, #0
 8006086:	4630      	mov	r0, r6
 8006088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800608c:	4e2e      	ldr	r6, [pc, #184]	; (8006148 <_malloc_r+0xe4>)
 800608e:	f000 fa1d 	bl	80064cc <__malloc_lock>
 8006092:	6833      	ldr	r3, [r6, #0]
 8006094:	461c      	mov	r4, r3
 8006096:	bb34      	cbnz	r4, 80060e6 <_malloc_r+0x82>
 8006098:	4629      	mov	r1, r5
 800609a:	4638      	mov	r0, r7
 800609c:	f7ff ffc2 	bl	8006024 <sbrk_aligned>
 80060a0:	1c43      	adds	r3, r0, #1
 80060a2:	4604      	mov	r4, r0
 80060a4:	d14d      	bne.n	8006142 <_malloc_r+0xde>
 80060a6:	6834      	ldr	r4, [r6, #0]
 80060a8:	4626      	mov	r6, r4
 80060aa:	2e00      	cmp	r6, #0
 80060ac:	d140      	bne.n	8006130 <_malloc_r+0xcc>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	4631      	mov	r1, r6
 80060b2:	4638      	mov	r0, r7
 80060b4:	eb04 0803 	add.w	r8, r4, r3
 80060b8:	f000 f9a0 	bl	80063fc <_sbrk_r>
 80060bc:	4580      	cmp	r8, r0
 80060be:	d13a      	bne.n	8006136 <_malloc_r+0xd2>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	3503      	adds	r5, #3
 80060c4:	1aed      	subs	r5, r5, r3
 80060c6:	f025 0503 	bic.w	r5, r5, #3
 80060ca:	3508      	adds	r5, #8
 80060cc:	2d0c      	cmp	r5, #12
 80060ce:	bf38      	it	cc
 80060d0:	250c      	movcc	r5, #12
 80060d2:	4629      	mov	r1, r5
 80060d4:	4638      	mov	r0, r7
 80060d6:	f7ff ffa5 	bl	8006024 <sbrk_aligned>
 80060da:	3001      	adds	r0, #1
 80060dc:	d02b      	beq.n	8006136 <_malloc_r+0xd2>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	442b      	add	r3, r5
 80060e2:	6023      	str	r3, [r4, #0]
 80060e4:	e00e      	b.n	8006104 <_malloc_r+0xa0>
 80060e6:	6822      	ldr	r2, [r4, #0]
 80060e8:	1b52      	subs	r2, r2, r5
 80060ea:	d41e      	bmi.n	800612a <_malloc_r+0xc6>
 80060ec:	2a0b      	cmp	r2, #11
 80060ee:	d916      	bls.n	800611e <_malloc_r+0xba>
 80060f0:	1961      	adds	r1, r4, r5
 80060f2:	42a3      	cmp	r3, r4
 80060f4:	6025      	str	r5, [r4, #0]
 80060f6:	bf18      	it	ne
 80060f8:	6059      	strne	r1, [r3, #4]
 80060fa:	6863      	ldr	r3, [r4, #4]
 80060fc:	bf08      	it	eq
 80060fe:	6031      	streq	r1, [r6, #0]
 8006100:	5162      	str	r2, [r4, r5]
 8006102:	604b      	str	r3, [r1, #4]
 8006104:	4638      	mov	r0, r7
 8006106:	f104 060b 	add.w	r6, r4, #11
 800610a:	f000 f9e5 	bl	80064d8 <__malloc_unlock>
 800610e:	f026 0607 	bic.w	r6, r6, #7
 8006112:	1d23      	adds	r3, r4, #4
 8006114:	1af2      	subs	r2, r6, r3
 8006116:	d0b6      	beq.n	8006086 <_malloc_r+0x22>
 8006118:	1b9b      	subs	r3, r3, r6
 800611a:	50a3      	str	r3, [r4, r2]
 800611c:	e7b3      	b.n	8006086 <_malloc_r+0x22>
 800611e:	6862      	ldr	r2, [r4, #4]
 8006120:	42a3      	cmp	r3, r4
 8006122:	bf0c      	ite	eq
 8006124:	6032      	streq	r2, [r6, #0]
 8006126:	605a      	strne	r2, [r3, #4]
 8006128:	e7ec      	b.n	8006104 <_malloc_r+0xa0>
 800612a:	4623      	mov	r3, r4
 800612c:	6864      	ldr	r4, [r4, #4]
 800612e:	e7b2      	b.n	8006096 <_malloc_r+0x32>
 8006130:	4634      	mov	r4, r6
 8006132:	6876      	ldr	r6, [r6, #4]
 8006134:	e7b9      	b.n	80060aa <_malloc_r+0x46>
 8006136:	230c      	movs	r3, #12
 8006138:	603b      	str	r3, [r7, #0]
 800613a:	4638      	mov	r0, r7
 800613c:	f000 f9cc 	bl	80064d8 <__malloc_unlock>
 8006140:	e7a1      	b.n	8006086 <_malloc_r+0x22>
 8006142:	6025      	str	r5, [r4, #0]
 8006144:	e7de      	b.n	8006104 <_malloc_r+0xa0>
 8006146:	bf00      	nop
 8006148:	200353c4 	.word	0x200353c4

0800614c <__ssputs_r>:
 800614c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006150:	688e      	ldr	r6, [r1, #8]
 8006152:	461f      	mov	r7, r3
 8006154:	42be      	cmp	r6, r7
 8006156:	680b      	ldr	r3, [r1, #0]
 8006158:	4682      	mov	sl, r0
 800615a:	460c      	mov	r4, r1
 800615c:	4690      	mov	r8, r2
 800615e:	d82c      	bhi.n	80061ba <__ssputs_r+0x6e>
 8006160:	898a      	ldrh	r2, [r1, #12]
 8006162:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006166:	d026      	beq.n	80061b6 <__ssputs_r+0x6a>
 8006168:	6965      	ldr	r5, [r4, #20]
 800616a:	6909      	ldr	r1, [r1, #16]
 800616c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006170:	eba3 0901 	sub.w	r9, r3, r1
 8006174:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006178:	1c7b      	adds	r3, r7, #1
 800617a:	444b      	add	r3, r9
 800617c:	106d      	asrs	r5, r5, #1
 800617e:	429d      	cmp	r5, r3
 8006180:	bf38      	it	cc
 8006182:	461d      	movcc	r5, r3
 8006184:	0553      	lsls	r3, r2, #21
 8006186:	d527      	bpl.n	80061d8 <__ssputs_r+0x8c>
 8006188:	4629      	mov	r1, r5
 800618a:	f7ff ff6b 	bl	8006064 <_malloc_r>
 800618e:	4606      	mov	r6, r0
 8006190:	b360      	cbz	r0, 80061ec <__ssputs_r+0xa0>
 8006192:	6921      	ldr	r1, [r4, #16]
 8006194:	464a      	mov	r2, r9
 8006196:	f7ff fb59 	bl	800584c <memcpy>
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a4:	81a3      	strh	r3, [r4, #12]
 80061a6:	6126      	str	r6, [r4, #16]
 80061a8:	6165      	str	r5, [r4, #20]
 80061aa:	444e      	add	r6, r9
 80061ac:	eba5 0509 	sub.w	r5, r5, r9
 80061b0:	6026      	str	r6, [r4, #0]
 80061b2:	60a5      	str	r5, [r4, #8]
 80061b4:	463e      	mov	r6, r7
 80061b6:	42be      	cmp	r6, r7
 80061b8:	d900      	bls.n	80061bc <__ssputs_r+0x70>
 80061ba:	463e      	mov	r6, r7
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	4632      	mov	r2, r6
 80061c0:	4641      	mov	r1, r8
 80061c2:	f000 f969 	bl	8006498 <memmove>
 80061c6:	68a3      	ldr	r3, [r4, #8]
 80061c8:	1b9b      	subs	r3, r3, r6
 80061ca:	60a3      	str	r3, [r4, #8]
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	4433      	add	r3, r6
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	2000      	movs	r0, #0
 80061d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d8:	462a      	mov	r2, r5
 80061da:	f000 f983 	bl	80064e4 <_realloc_r>
 80061de:	4606      	mov	r6, r0
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d1e0      	bne.n	80061a6 <__ssputs_r+0x5a>
 80061e4:	6921      	ldr	r1, [r4, #16]
 80061e6:	4650      	mov	r0, sl
 80061e8:	f7ff fed0 	bl	8005f8c <_free_r>
 80061ec:	230c      	movs	r3, #12
 80061ee:	f8ca 3000 	str.w	r3, [sl]
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061f8:	81a3      	strh	r3, [r4, #12]
 80061fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061fe:	e7e9      	b.n	80061d4 <__ssputs_r+0x88>

08006200 <_svfiprintf_r>:
 8006200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	4698      	mov	r8, r3
 8006206:	898b      	ldrh	r3, [r1, #12]
 8006208:	061b      	lsls	r3, r3, #24
 800620a:	b09d      	sub	sp, #116	; 0x74
 800620c:	4607      	mov	r7, r0
 800620e:	460d      	mov	r5, r1
 8006210:	4614      	mov	r4, r2
 8006212:	d50e      	bpl.n	8006232 <_svfiprintf_r+0x32>
 8006214:	690b      	ldr	r3, [r1, #16]
 8006216:	b963      	cbnz	r3, 8006232 <_svfiprintf_r+0x32>
 8006218:	2140      	movs	r1, #64	; 0x40
 800621a:	f7ff ff23 	bl	8006064 <_malloc_r>
 800621e:	6028      	str	r0, [r5, #0]
 8006220:	6128      	str	r0, [r5, #16]
 8006222:	b920      	cbnz	r0, 800622e <_svfiprintf_r+0x2e>
 8006224:	230c      	movs	r3, #12
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800622c:	e0d0      	b.n	80063d0 <_svfiprintf_r+0x1d0>
 800622e:	2340      	movs	r3, #64	; 0x40
 8006230:	616b      	str	r3, [r5, #20]
 8006232:	2300      	movs	r3, #0
 8006234:	9309      	str	r3, [sp, #36]	; 0x24
 8006236:	2320      	movs	r3, #32
 8006238:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800623c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006240:	2330      	movs	r3, #48	; 0x30
 8006242:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80063e8 <_svfiprintf_r+0x1e8>
 8006246:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800624a:	f04f 0901 	mov.w	r9, #1
 800624e:	4623      	mov	r3, r4
 8006250:	469a      	mov	sl, r3
 8006252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006256:	b10a      	cbz	r2, 800625c <_svfiprintf_r+0x5c>
 8006258:	2a25      	cmp	r2, #37	; 0x25
 800625a:	d1f9      	bne.n	8006250 <_svfiprintf_r+0x50>
 800625c:	ebba 0b04 	subs.w	fp, sl, r4
 8006260:	d00b      	beq.n	800627a <_svfiprintf_r+0x7a>
 8006262:	465b      	mov	r3, fp
 8006264:	4622      	mov	r2, r4
 8006266:	4629      	mov	r1, r5
 8006268:	4638      	mov	r0, r7
 800626a:	f7ff ff6f 	bl	800614c <__ssputs_r>
 800626e:	3001      	adds	r0, #1
 8006270:	f000 80a9 	beq.w	80063c6 <_svfiprintf_r+0x1c6>
 8006274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006276:	445a      	add	r2, fp
 8006278:	9209      	str	r2, [sp, #36]	; 0x24
 800627a:	f89a 3000 	ldrb.w	r3, [sl]
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 80a1 	beq.w	80063c6 <_svfiprintf_r+0x1c6>
 8006284:	2300      	movs	r3, #0
 8006286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800628a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800628e:	f10a 0a01 	add.w	sl, sl, #1
 8006292:	9304      	str	r3, [sp, #16]
 8006294:	9307      	str	r3, [sp, #28]
 8006296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800629a:	931a      	str	r3, [sp, #104]	; 0x68
 800629c:	4654      	mov	r4, sl
 800629e:	2205      	movs	r2, #5
 80062a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a4:	4850      	ldr	r0, [pc, #320]	; (80063e8 <_svfiprintf_r+0x1e8>)
 80062a6:	f7fa f813 	bl	80002d0 <memchr>
 80062aa:	9a04      	ldr	r2, [sp, #16]
 80062ac:	b9d8      	cbnz	r0, 80062e6 <_svfiprintf_r+0xe6>
 80062ae:	06d0      	lsls	r0, r2, #27
 80062b0:	bf44      	itt	mi
 80062b2:	2320      	movmi	r3, #32
 80062b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062b8:	0711      	lsls	r1, r2, #28
 80062ba:	bf44      	itt	mi
 80062bc:	232b      	movmi	r3, #43	; 0x2b
 80062be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062c2:	f89a 3000 	ldrb.w	r3, [sl]
 80062c6:	2b2a      	cmp	r3, #42	; 0x2a
 80062c8:	d015      	beq.n	80062f6 <_svfiprintf_r+0xf6>
 80062ca:	9a07      	ldr	r2, [sp, #28]
 80062cc:	4654      	mov	r4, sl
 80062ce:	2000      	movs	r0, #0
 80062d0:	f04f 0c0a 	mov.w	ip, #10
 80062d4:	4621      	mov	r1, r4
 80062d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062da:	3b30      	subs	r3, #48	; 0x30
 80062dc:	2b09      	cmp	r3, #9
 80062de:	d94d      	bls.n	800637c <_svfiprintf_r+0x17c>
 80062e0:	b1b0      	cbz	r0, 8006310 <_svfiprintf_r+0x110>
 80062e2:	9207      	str	r2, [sp, #28]
 80062e4:	e014      	b.n	8006310 <_svfiprintf_r+0x110>
 80062e6:	eba0 0308 	sub.w	r3, r0, r8
 80062ea:	fa09 f303 	lsl.w	r3, r9, r3
 80062ee:	4313      	orrs	r3, r2
 80062f0:	9304      	str	r3, [sp, #16]
 80062f2:	46a2      	mov	sl, r4
 80062f4:	e7d2      	b.n	800629c <_svfiprintf_r+0x9c>
 80062f6:	9b03      	ldr	r3, [sp, #12]
 80062f8:	1d19      	adds	r1, r3, #4
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	9103      	str	r1, [sp, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	bfbb      	ittet	lt
 8006302:	425b      	neglt	r3, r3
 8006304:	f042 0202 	orrlt.w	r2, r2, #2
 8006308:	9307      	strge	r3, [sp, #28]
 800630a:	9307      	strlt	r3, [sp, #28]
 800630c:	bfb8      	it	lt
 800630e:	9204      	strlt	r2, [sp, #16]
 8006310:	7823      	ldrb	r3, [r4, #0]
 8006312:	2b2e      	cmp	r3, #46	; 0x2e
 8006314:	d10c      	bne.n	8006330 <_svfiprintf_r+0x130>
 8006316:	7863      	ldrb	r3, [r4, #1]
 8006318:	2b2a      	cmp	r3, #42	; 0x2a
 800631a:	d134      	bne.n	8006386 <_svfiprintf_r+0x186>
 800631c:	9b03      	ldr	r3, [sp, #12]
 800631e:	1d1a      	adds	r2, r3, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	9203      	str	r2, [sp, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	bfb8      	it	lt
 8006328:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800632c:	3402      	adds	r4, #2
 800632e:	9305      	str	r3, [sp, #20]
 8006330:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80063f8 <_svfiprintf_r+0x1f8>
 8006334:	7821      	ldrb	r1, [r4, #0]
 8006336:	2203      	movs	r2, #3
 8006338:	4650      	mov	r0, sl
 800633a:	f7f9 ffc9 	bl	80002d0 <memchr>
 800633e:	b138      	cbz	r0, 8006350 <_svfiprintf_r+0x150>
 8006340:	9b04      	ldr	r3, [sp, #16]
 8006342:	eba0 000a 	sub.w	r0, r0, sl
 8006346:	2240      	movs	r2, #64	; 0x40
 8006348:	4082      	lsls	r2, r0
 800634a:	4313      	orrs	r3, r2
 800634c:	3401      	adds	r4, #1
 800634e:	9304      	str	r3, [sp, #16]
 8006350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006354:	4825      	ldr	r0, [pc, #148]	; (80063ec <_svfiprintf_r+0x1ec>)
 8006356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800635a:	2206      	movs	r2, #6
 800635c:	f7f9 ffb8 	bl	80002d0 <memchr>
 8006360:	2800      	cmp	r0, #0
 8006362:	d038      	beq.n	80063d6 <_svfiprintf_r+0x1d6>
 8006364:	4b22      	ldr	r3, [pc, #136]	; (80063f0 <_svfiprintf_r+0x1f0>)
 8006366:	bb1b      	cbnz	r3, 80063b0 <_svfiprintf_r+0x1b0>
 8006368:	9b03      	ldr	r3, [sp, #12]
 800636a:	3307      	adds	r3, #7
 800636c:	f023 0307 	bic.w	r3, r3, #7
 8006370:	3308      	adds	r3, #8
 8006372:	9303      	str	r3, [sp, #12]
 8006374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006376:	4433      	add	r3, r6
 8006378:	9309      	str	r3, [sp, #36]	; 0x24
 800637a:	e768      	b.n	800624e <_svfiprintf_r+0x4e>
 800637c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006380:	460c      	mov	r4, r1
 8006382:	2001      	movs	r0, #1
 8006384:	e7a6      	b.n	80062d4 <_svfiprintf_r+0xd4>
 8006386:	2300      	movs	r3, #0
 8006388:	3401      	adds	r4, #1
 800638a:	9305      	str	r3, [sp, #20]
 800638c:	4619      	mov	r1, r3
 800638e:	f04f 0c0a 	mov.w	ip, #10
 8006392:	4620      	mov	r0, r4
 8006394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006398:	3a30      	subs	r2, #48	; 0x30
 800639a:	2a09      	cmp	r2, #9
 800639c:	d903      	bls.n	80063a6 <_svfiprintf_r+0x1a6>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0c6      	beq.n	8006330 <_svfiprintf_r+0x130>
 80063a2:	9105      	str	r1, [sp, #20]
 80063a4:	e7c4      	b.n	8006330 <_svfiprintf_r+0x130>
 80063a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80063aa:	4604      	mov	r4, r0
 80063ac:	2301      	movs	r3, #1
 80063ae:	e7f0      	b.n	8006392 <_svfiprintf_r+0x192>
 80063b0:	ab03      	add	r3, sp, #12
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	462a      	mov	r2, r5
 80063b6:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <_svfiprintf_r+0x1f4>)
 80063b8:	a904      	add	r1, sp, #16
 80063ba:	4638      	mov	r0, r7
 80063bc:	f7fe f864 	bl	8004488 <_printf_float>
 80063c0:	1c42      	adds	r2, r0, #1
 80063c2:	4606      	mov	r6, r0
 80063c4:	d1d6      	bne.n	8006374 <_svfiprintf_r+0x174>
 80063c6:	89ab      	ldrh	r3, [r5, #12]
 80063c8:	065b      	lsls	r3, r3, #25
 80063ca:	f53f af2d 	bmi.w	8006228 <_svfiprintf_r+0x28>
 80063ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063d0:	b01d      	add	sp, #116	; 0x74
 80063d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d6:	ab03      	add	r3, sp, #12
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	462a      	mov	r2, r5
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <_svfiprintf_r+0x1f4>)
 80063de:	a904      	add	r1, sp, #16
 80063e0:	4638      	mov	r0, r7
 80063e2:	f7fe fad9 	bl	8004998 <_printf_i>
 80063e6:	e7eb      	b.n	80063c0 <_svfiprintf_r+0x1c0>
 80063e8:	0801b5c4 	.word	0x0801b5c4
 80063ec:	0801b5ce 	.word	0x0801b5ce
 80063f0:	08004489 	.word	0x08004489
 80063f4:	0800614d 	.word	0x0800614d
 80063f8:	0801b5ca 	.word	0x0801b5ca

080063fc <_sbrk_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d06      	ldr	r5, [pc, #24]	; (8006418 <_sbrk_r+0x1c>)
 8006400:	2300      	movs	r3, #0
 8006402:	4604      	mov	r4, r0
 8006404:	4608      	mov	r0, r1
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	f7fb fd7a 	bl	8001f00 <_sbrk>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_sbrk_r+0x1a>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_sbrk_r+0x1a>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	200353cc 	.word	0x200353cc

0800641c <__ascii_wctomb>:
 800641c:	b149      	cbz	r1, 8006432 <__ascii_wctomb+0x16>
 800641e:	2aff      	cmp	r2, #255	; 0xff
 8006420:	bf85      	ittet	hi
 8006422:	238a      	movhi	r3, #138	; 0x8a
 8006424:	6003      	strhi	r3, [r0, #0]
 8006426:	700a      	strbls	r2, [r1, #0]
 8006428:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800642c:	bf98      	it	ls
 800642e:	2001      	movls	r0, #1
 8006430:	4770      	bx	lr
 8006432:	4608      	mov	r0, r1
 8006434:	4770      	bx	lr
	...

08006438 <__assert_func>:
 8006438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800643a:	4614      	mov	r4, r2
 800643c:	461a      	mov	r2, r3
 800643e:	4b09      	ldr	r3, [pc, #36]	; (8006464 <__assert_func+0x2c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4605      	mov	r5, r0
 8006444:	68d8      	ldr	r0, [r3, #12]
 8006446:	b14c      	cbz	r4, 800645c <__assert_func+0x24>
 8006448:	4b07      	ldr	r3, [pc, #28]	; (8006468 <__assert_func+0x30>)
 800644a:	9100      	str	r1, [sp, #0]
 800644c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006450:	4906      	ldr	r1, [pc, #24]	; (800646c <__assert_func+0x34>)
 8006452:	462b      	mov	r3, r5
 8006454:	f000 f80e 	bl	8006474 <fiprintf>
 8006458:	f000 fa8a 	bl	8006970 <abort>
 800645c:	4b04      	ldr	r3, [pc, #16]	; (8006470 <__assert_func+0x38>)
 800645e:	461c      	mov	r4, r3
 8006460:	e7f3      	b.n	800644a <__assert_func+0x12>
 8006462:	bf00      	nop
 8006464:	20000420 	.word	0x20000420
 8006468:	0801b5d5 	.word	0x0801b5d5
 800646c:	0801b5e2 	.word	0x0801b5e2
 8006470:	0801b610 	.word	0x0801b610

08006474 <fiprintf>:
 8006474:	b40e      	push	{r1, r2, r3}
 8006476:	b503      	push	{r0, r1, lr}
 8006478:	4601      	mov	r1, r0
 800647a:	ab03      	add	r3, sp, #12
 800647c:	4805      	ldr	r0, [pc, #20]	; (8006494 <fiprintf+0x20>)
 800647e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006482:	6800      	ldr	r0, [r0, #0]
 8006484:	9301      	str	r3, [sp, #4]
 8006486:	f000 f885 	bl	8006594 <_vfiprintf_r>
 800648a:	b002      	add	sp, #8
 800648c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006490:	b003      	add	sp, #12
 8006492:	4770      	bx	lr
 8006494:	20000420 	.word	0x20000420

08006498 <memmove>:
 8006498:	4288      	cmp	r0, r1
 800649a:	b510      	push	{r4, lr}
 800649c:	eb01 0402 	add.w	r4, r1, r2
 80064a0:	d902      	bls.n	80064a8 <memmove+0x10>
 80064a2:	4284      	cmp	r4, r0
 80064a4:	4623      	mov	r3, r4
 80064a6:	d807      	bhi.n	80064b8 <memmove+0x20>
 80064a8:	1e43      	subs	r3, r0, #1
 80064aa:	42a1      	cmp	r1, r4
 80064ac:	d008      	beq.n	80064c0 <memmove+0x28>
 80064ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064b6:	e7f8      	b.n	80064aa <memmove+0x12>
 80064b8:	4402      	add	r2, r0
 80064ba:	4601      	mov	r1, r0
 80064bc:	428a      	cmp	r2, r1
 80064be:	d100      	bne.n	80064c2 <memmove+0x2a>
 80064c0:	bd10      	pop	{r4, pc}
 80064c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064ca:	e7f7      	b.n	80064bc <memmove+0x24>

080064cc <__malloc_lock>:
 80064cc:	4801      	ldr	r0, [pc, #4]	; (80064d4 <__malloc_lock+0x8>)
 80064ce:	f7ff b9a0 	b.w	8005812 <__retarget_lock_acquire_recursive>
 80064d2:	bf00      	nop
 80064d4:	200353c0 	.word	0x200353c0

080064d8 <__malloc_unlock>:
 80064d8:	4801      	ldr	r0, [pc, #4]	; (80064e0 <__malloc_unlock+0x8>)
 80064da:	f7ff b99b 	b.w	8005814 <__retarget_lock_release_recursive>
 80064de:	bf00      	nop
 80064e0:	200353c0 	.word	0x200353c0

080064e4 <_realloc_r>:
 80064e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e8:	4680      	mov	r8, r0
 80064ea:	4614      	mov	r4, r2
 80064ec:	460e      	mov	r6, r1
 80064ee:	b921      	cbnz	r1, 80064fa <_realloc_r+0x16>
 80064f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064f4:	4611      	mov	r1, r2
 80064f6:	f7ff bdb5 	b.w	8006064 <_malloc_r>
 80064fa:	b92a      	cbnz	r2, 8006508 <_realloc_r+0x24>
 80064fc:	f7ff fd46 	bl	8005f8c <_free_r>
 8006500:	4625      	mov	r5, r4
 8006502:	4628      	mov	r0, r5
 8006504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006508:	f000 fc58 	bl	8006dbc <_malloc_usable_size_r>
 800650c:	4284      	cmp	r4, r0
 800650e:	4607      	mov	r7, r0
 8006510:	d802      	bhi.n	8006518 <_realloc_r+0x34>
 8006512:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006516:	d812      	bhi.n	800653e <_realloc_r+0x5a>
 8006518:	4621      	mov	r1, r4
 800651a:	4640      	mov	r0, r8
 800651c:	f7ff fda2 	bl	8006064 <_malloc_r>
 8006520:	4605      	mov	r5, r0
 8006522:	2800      	cmp	r0, #0
 8006524:	d0ed      	beq.n	8006502 <_realloc_r+0x1e>
 8006526:	42bc      	cmp	r4, r7
 8006528:	4622      	mov	r2, r4
 800652a:	4631      	mov	r1, r6
 800652c:	bf28      	it	cs
 800652e:	463a      	movcs	r2, r7
 8006530:	f7ff f98c 	bl	800584c <memcpy>
 8006534:	4631      	mov	r1, r6
 8006536:	4640      	mov	r0, r8
 8006538:	f7ff fd28 	bl	8005f8c <_free_r>
 800653c:	e7e1      	b.n	8006502 <_realloc_r+0x1e>
 800653e:	4635      	mov	r5, r6
 8006540:	e7df      	b.n	8006502 <_realloc_r+0x1e>

08006542 <__sfputc_r>:
 8006542:	6893      	ldr	r3, [r2, #8]
 8006544:	3b01      	subs	r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	b410      	push	{r4}
 800654a:	6093      	str	r3, [r2, #8]
 800654c:	da08      	bge.n	8006560 <__sfputc_r+0x1e>
 800654e:	6994      	ldr	r4, [r2, #24]
 8006550:	42a3      	cmp	r3, r4
 8006552:	db01      	blt.n	8006558 <__sfputc_r+0x16>
 8006554:	290a      	cmp	r1, #10
 8006556:	d103      	bne.n	8006560 <__sfputc_r+0x1e>
 8006558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800655c:	f000 b948 	b.w	80067f0 <__swbuf_r>
 8006560:	6813      	ldr	r3, [r2, #0]
 8006562:	1c58      	adds	r0, r3, #1
 8006564:	6010      	str	r0, [r2, #0]
 8006566:	7019      	strb	r1, [r3, #0]
 8006568:	4608      	mov	r0, r1
 800656a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800656e:	4770      	bx	lr

08006570 <__sfputs_r>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	4606      	mov	r6, r0
 8006574:	460f      	mov	r7, r1
 8006576:	4614      	mov	r4, r2
 8006578:	18d5      	adds	r5, r2, r3
 800657a:	42ac      	cmp	r4, r5
 800657c:	d101      	bne.n	8006582 <__sfputs_r+0x12>
 800657e:	2000      	movs	r0, #0
 8006580:	e007      	b.n	8006592 <__sfputs_r+0x22>
 8006582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006586:	463a      	mov	r2, r7
 8006588:	4630      	mov	r0, r6
 800658a:	f7ff ffda 	bl	8006542 <__sfputc_r>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	d1f3      	bne.n	800657a <__sfputs_r+0xa>
 8006592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006594 <_vfiprintf_r>:
 8006594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006598:	460d      	mov	r5, r1
 800659a:	b09d      	sub	sp, #116	; 0x74
 800659c:	4614      	mov	r4, r2
 800659e:	4698      	mov	r8, r3
 80065a0:	4606      	mov	r6, r0
 80065a2:	b118      	cbz	r0, 80065ac <_vfiprintf_r+0x18>
 80065a4:	6983      	ldr	r3, [r0, #24]
 80065a6:	b90b      	cbnz	r3, 80065ac <_vfiprintf_r+0x18>
 80065a8:	f000 fb04 	bl	8006bb4 <__sinit>
 80065ac:	4b88      	ldr	r3, [pc, #544]	; (80067d0 <_vfiprintf_r+0x23c>)
 80065ae:	429d      	cmp	r5, r3
 80065b0:	d11b      	bne.n	80065ea <_vfiprintf_r+0x56>
 80065b2:	6875      	ldr	r5, [r6, #4]
 80065b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065b6:	07d9      	lsls	r1, r3, #31
 80065b8:	d405      	bmi.n	80065c6 <_vfiprintf_r+0x32>
 80065ba:	89ab      	ldrh	r3, [r5, #12]
 80065bc:	059a      	lsls	r2, r3, #22
 80065be:	d402      	bmi.n	80065c6 <_vfiprintf_r+0x32>
 80065c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065c2:	f7ff f926 	bl	8005812 <__retarget_lock_acquire_recursive>
 80065c6:	89ab      	ldrh	r3, [r5, #12]
 80065c8:	071b      	lsls	r3, r3, #28
 80065ca:	d501      	bpl.n	80065d0 <_vfiprintf_r+0x3c>
 80065cc:	692b      	ldr	r3, [r5, #16]
 80065ce:	b9eb      	cbnz	r3, 800660c <_vfiprintf_r+0x78>
 80065d0:	4629      	mov	r1, r5
 80065d2:	4630      	mov	r0, r6
 80065d4:	f000 f95e 	bl	8006894 <__swsetup_r>
 80065d8:	b1c0      	cbz	r0, 800660c <_vfiprintf_r+0x78>
 80065da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065dc:	07dc      	lsls	r4, r3, #31
 80065de:	d50e      	bpl.n	80065fe <_vfiprintf_r+0x6a>
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065e4:	b01d      	add	sp, #116	; 0x74
 80065e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ea:	4b7a      	ldr	r3, [pc, #488]	; (80067d4 <_vfiprintf_r+0x240>)
 80065ec:	429d      	cmp	r5, r3
 80065ee:	d101      	bne.n	80065f4 <_vfiprintf_r+0x60>
 80065f0:	68b5      	ldr	r5, [r6, #8]
 80065f2:	e7df      	b.n	80065b4 <_vfiprintf_r+0x20>
 80065f4:	4b78      	ldr	r3, [pc, #480]	; (80067d8 <_vfiprintf_r+0x244>)
 80065f6:	429d      	cmp	r5, r3
 80065f8:	bf08      	it	eq
 80065fa:	68f5      	ldreq	r5, [r6, #12]
 80065fc:	e7da      	b.n	80065b4 <_vfiprintf_r+0x20>
 80065fe:	89ab      	ldrh	r3, [r5, #12]
 8006600:	0598      	lsls	r0, r3, #22
 8006602:	d4ed      	bmi.n	80065e0 <_vfiprintf_r+0x4c>
 8006604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006606:	f7ff f905 	bl	8005814 <__retarget_lock_release_recursive>
 800660a:	e7e9      	b.n	80065e0 <_vfiprintf_r+0x4c>
 800660c:	2300      	movs	r3, #0
 800660e:	9309      	str	r3, [sp, #36]	; 0x24
 8006610:	2320      	movs	r3, #32
 8006612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006616:	f8cd 800c 	str.w	r8, [sp, #12]
 800661a:	2330      	movs	r3, #48	; 0x30
 800661c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80067dc <_vfiprintf_r+0x248>
 8006620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006624:	f04f 0901 	mov.w	r9, #1
 8006628:	4623      	mov	r3, r4
 800662a:	469a      	mov	sl, r3
 800662c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006630:	b10a      	cbz	r2, 8006636 <_vfiprintf_r+0xa2>
 8006632:	2a25      	cmp	r2, #37	; 0x25
 8006634:	d1f9      	bne.n	800662a <_vfiprintf_r+0x96>
 8006636:	ebba 0b04 	subs.w	fp, sl, r4
 800663a:	d00b      	beq.n	8006654 <_vfiprintf_r+0xc0>
 800663c:	465b      	mov	r3, fp
 800663e:	4622      	mov	r2, r4
 8006640:	4629      	mov	r1, r5
 8006642:	4630      	mov	r0, r6
 8006644:	f7ff ff94 	bl	8006570 <__sfputs_r>
 8006648:	3001      	adds	r0, #1
 800664a:	f000 80a9 	beq.w	80067a0 <_vfiprintf_r+0x20c>
 800664e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006650:	445a      	add	r2, fp
 8006652:	9209      	str	r2, [sp, #36]	; 0x24
 8006654:	f89a 3000 	ldrb.w	r3, [sl]
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 80a1 	beq.w	80067a0 <_vfiprintf_r+0x20c>
 800665e:	2300      	movs	r3, #0
 8006660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006668:	f10a 0a01 	add.w	sl, sl, #1
 800666c:	9304      	str	r3, [sp, #16]
 800666e:	9307      	str	r3, [sp, #28]
 8006670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006674:	931a      	str	r3, [sp, #104]	; 0x68
 8006676:	4654      	mov	r4, sl
 8006678:	2205      	movs	r2, #5
 800667a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800667e:	4857      	ldr	r0, [pc, #348]	; (80067dc <_vfiprintf_r+0x248>)
 8006680:	f7f9 fe26 	bl	80002d0 <memchr>
 8006684:	9a04      	ldr	r2, [sp, #16]
 8006686:	b9d8      	cbnz	r0, 80066c0 <_vfiprintf_r+0x12c>
 8006688:	06d1      	lsls	r1, r2, #27
 800668a:	bf44      	itt	mi
 800668c:	2320      	movmi	r3, #32
 800668e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006692:	0713      	lsls	r3, r2, #28
 8006694:	bf44      	itt	mi
 8006696:	232b      	movmi	r3, #43	; 0x2b
 8006698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800669c:	f89a 3000 	ldrb.w	r3, [sl]
 80066a0:	2b2a      	cmp	r3, #42	; 0x2a
 80066a2:	d015      	beq.n	80066d0 <_vfiprintf_r+0x13c>
 80066a4:	9a07      	ldr	r2, [sp, #28]
 80066a6:	4654      	mov	r4, sl
 80066a8:	2000      	movs	r0, #0
 80066aa:	f04f 0c0a 	mov.w	ip, #10
 80066ae:	4621      	mov	r1, r4
 80066b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066b4:	3b30      	subs	r3, #48	; 0x30
 80066b6:	2b09      	cmp	r3, #9
 80066b8:	d94d      	bls.n	8006756 <_vfiprintf_r+0x1c2>
 80066ba:	b1b0      	cbz	r0, 80066ea <_vfiprintf_r+0x156>
 80066bc:	9207      	str	r2, [sp, #28]
 80066be:	e014      	b.n	80066ea <_vfiprintf_r+0x156>
 80066c0:	eba0 0308 	sub.w	r3, r0, r8
 80066c4:	fa09 f303 	lsl.w	r3, r9, r3
 80066c8:	4313      	orrs	r3, r2
 80066ca:	9304      	str	r3, [sp, #16]
 80066cc:	46a2      	mov	sl, r4
 80066ce:	e7d2      	b.n	8006676 <_vfiprintf_r+0xe2>
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	1d19      	adds	r1, r3, #4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	9103      	str	r1, [sp, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bfbb      	ittet	lt
 80066dc:	425b      	neglt	r3, r3
 80066de:	f042 0202 	orrlt.w	r2, r2, #2
 80066e2:	9307      	strge	r3, [sp, #28]
 80066e4:	9307      	strlt	r3, [sp, #28]
 80066e6:	bfb8      	it	lt
 80066e8:	9204      	strlt	r2, [sp, #16]
 80066ea:	7823      	ldrb	r3, [r4, #0]
 80066ec:	2b2e      	cmp	r3, #46	; 0x2e
 80066ee:	d10c      	bne.n	800670a <_vfiprintf_r+0x176>
 80066f0:	7863      	ldrb	r3, [r4, #1]
 80066f2:	2b2a      	cmp	r3, #42	; 0x2a
 80066f4:	d134      	bne.n	8006760 <_vfiprintf_r+0x1cc>
 80066f6:	9b03      	ldr	r3, [sp, #12]
 80066f8:	1d1a      	adds	r2, r3, #4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	9203      	str	r2, [sp, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bfb8      	it	lt
 8006702:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006706:	3402      	adds	r4, #2
 8006708:	9305      	str	r3, [sp, #20]
 800670a:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80067ec <_vfiprintf_r+0x258>
 800670e:	7821      	ldrb	r1, [r4, #0]
 8006710:	2203      	movs	r2, #3
 8006712:	4650      	mov	r0, sl
 8006714:	f7f9 fddc 	bl	80002d0 <memchr>
 8006718:	b138      	cbz	r0, 800672a <_vfiprintf_r+0x196>
 800671a:	9b04      	ldr	r3, [sp, #16]
 800671c:	eba0 000a 	sub.w	r0, r0, sl
 8006720:	2240      	movs	r2, #64	; 0x40
 8006722:	4082      	lsls	r2, r0
 8006724:	4313      	orrs	r3, r2
 8006726:	3401      	adds	r4, #1
 8006728:	9304      	str	r3, [sp, #16]
 800672a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800672e:	482c      	ldr	r0, [pc, #176]	; (80067e0 <_vfiprintf_r+0x24c>)
 8006730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006734:	2206      	movs	r2, #6
 8006736:	f7f9 fdcb 	bl	80002d0 <memchr>
 800673a:	2800      	cmp	r0, #0
 800673c:	d03f      	beq.n	80067be <_vfiprintf_r+0x22a>
 800673e:	4b29      	ldr	r3, [pc, #164]	; (80067e4 <_vfiprintf_r+0x250>)
 8006740:	bb1b      	cbnz	r3, 800678a <_vfiprintf_r+0x1f6>
 8006742:	9b03      	ldr	r3, [sp, #12]
 8006744:	3307      	adds	r3, #7
 8006746:	f023 0307 	bic.w	r3, r3, #7
 800674a:	3308      	adds	r3, #8
 800674c:	9303      	str	r3, [sp, #12]
 800674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006750:	443b      	add	r3, r7
 8006752:	9309      	str	r3, [sp, #36]	; 0x24
 8006754:	e768      	b.n	8006628 <_vfiprintf_r+0x94>
 8006756:	fb0c 3202 	mla	r2, ip, r2, r3
 800675a:	460c      	mov	r4, r1
 800675c:	2001      	movs	r0, #1
 800675e:	e7a6      	b.n	80066ae <_vfiprintf_r+0x11a>
 8006760:	2300      	movs	r3, #0
 8006762:	3401      	adds	r4, #1
 8006764:	9305      	str	r3, [sp, #20]
 8006766:	4619      	mov	r1, r3
 8006768:	f04f 0c0a 	mov.w	ip, #10
 800676c:	4620      	mov	r0, r4
 800676e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006772:	3a30      	subs	r2, #48	; 0x30
 8006774:	2a09      	cmp	r2, #9
 8006776:	d903      	bls.n	8006780 <_vfiprintf_r+0x1ec>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0c6      	beq.n	800670a <_vfiprintf_r+0x176>
 800677c:	9105      	str	r1, [sp, #20]
 800677e:	e7c4      	b.n	800670a <_vfiprintf_r+0x176>
 8006780:	fb0c 2101 	mla	r1, ip, r1, r2
 8006784:	4604      	mov	r4, r0
 8006786:	2301      	movs	r3, #1
 8006788:	e7f0      	b.n	800676c <_vfiprintf_r+0x1d8>
 800678a:	ab03      	add	r3, sp, #12
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	462a      	mov	r2, r5
 8006790:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <_vfiprintf_r+0x254>)
 8006792:	a904      	add	r1, sp, #16
 8006794:	4630      	mov	r0, r6
 8006796:	f7fd fe77 	bl	8004488 <_printf_float>
 800679a:	4607      	mov	r7, r0
 800679c:	1c78      	adds	r0, r7, #1
 800679e:	d1d6      	bne.n	800674e <_vfiprintf_r+0x1ba>
 80067a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067a2:	07d9      	lsls	r1, r3, #31
 80067a4:	d405      	bmi.n	80067b2 <_vfiprintf_r+0x21e>
 80067a6:	89ab      	ldrh	r3, [r5, #12]
 80067a8:	059a      	lsls	r2, r3, #22
 80067aa:	d402      	bmi.n	80067b2 <_vfiprintf_r+0x21e>
 80067ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ae:	f7ff f831 	bl	8005814 <__retarget_lock_release_recursive>
 80067b2:	89ab      	ldrh	r3, [r5, #12]
 80067b4:	065b      	lsls	r3, r3, #25
 80067b6:	f53f af13 	bmi.w	80065e0 <_vfiprintf_r+0x4c>
 80067ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067bc:	e712      	b.n	80065e4 <_vfiprintf_r+0x50>
 80067be:	ab03      	add	r3, sp, #12
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	462a      	mov	r2, r5
 80067c4:	4b08      	ldr	r3, [pc, #32]	; (80067e8 <_vfiprintf_r+0x254>)
 80067c6:	a904      	add	r1, sp, #16
 80067c8:	4630      	mov	r0, r6
 80067ca:	f7fe f8e5 	bl	8004998 <_printf_i>
 80067ce:	e7e4      	b.n	800679a <_vfiprintf_r+0x206>
 80067d0:	0801b734 	.word	0x0801b734
 80067d4:	0801b754 	.word	0x0801b754
 80067d8:	0801b714 	.word	0x0801b714
 80067dc:	0801b5c4 	.word	0x0801b5c4
 80067e0:	0801b5ce 	.word	0x0801b5ce
 80067e4:	08004489 	.word	0x08004489
 80067e8:	08006571 	.word	0x08006571
 80067ec:	0801b5ca 	.word	0x0801b5ca

080067f0 <__swbuf_r>:
 80067f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f2:	460e      	mov	r6, r1
 80067f4:	4614      	mov	r4, r2
 80067f6:	4605      	mov	r5, r0
 80067f8:	b118      	cbz	r0, 8006802 <__swbuf_r+0x12>
 80067fa:	6983      	ldr	r3, [r0, #24]
 80067fc:	b90b      	cbnz	r3, 8006802 <__swbuf_r+0x12>
 80067fe:	f000 f9d9 	bl	8006bb4 <__sinit>
 8006802:	4b21      	ldr	r3, [pc, #132]	; (8006888 <__swbuf_r+0x98>)
 8006804:	429c      	cmp	r4, r3
 8006806:	d12b      	bne.n	8006860 <__swbuf_r+0x70>
 8006808:	686c      	ldr	r4, [r5, #4]
 800680a:	69a3      	ldr	r3, [r4, #24]
 800680c:	60a3      	str	r3, [r4, #8]
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	071a      	lsls	r2, r3, #28
 8006812:	d52f      	bpl.n	8006874 <__swbuf_r+0x84>
 8006814:	6923      	ldr	r3, [r4, #16]
 8006816:	b36b      	cbz	r3, 8006874 <__swbuf_r+0x84>
 8006818:	6923      	ldr	r3, [r4, #16]
 800681a:	6820      	ldr	r0, [r4, #0]
 800681c:	1ac0      	subs	r0, r0, r3
 800681e:	6963      	ldr	r3, [r4, #20]
 8006820:	b2f6      	uxtb	r6, r6
 8006822:	4283      	cmp	r3, r0
 8006824:	4637      	mov	r7, r6
 8006826:	dc04      	bgt.n	8006832 <__swbuf_r+0x42>
 8006828:	4621      	mov	r1, r4
 800682a:	4628      	mov	r0, r5
 800682c:	f000 f92e 	bl	8006a8c <_fflush_r>
 8006830:	bb30      	cbnz	r0, 8006880 <__swbuf_r+0x90>
 8006832:	68a3      	ldr	r3, [r4, #8]
 8006834:	3b01      	subs	r3, #1
 8006836:	60a3      	str	r3, [r4, #8]
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	6022      	str	r2, [r4, #0]
 800683e:	701e      	strb	r6, [r3, #0]
 8006840:	6963      	ldr	r3, [r4, #20]
 8006842:	3001      	adds	r0, #1
 8006844:	4283      	cmp	r3, r0
 8006846:	d004      	beq.n	8006852 <__swbuf_r+0x62>
 8006848:	89a3      	ldrh	r3, [r4, #12]
 800684a:	07db      	lsls	r3, r3, #31
 800684c:	d506      	bpl.n	800685c <__swbuf_r+0x6c>
 800684e:	2e0a      	cmp	r6, #10
 8006850:	d104      	bne.n	800685c <__swbuf_r+0x6c>
 8006852:	4621      	mov	r1, r4
 8006854:	4628      	mov	r0, r5
 8006856:	f000 f919 	bl	8006a8c <_fflush_r>
 800685a:	b988      	cbnz	r0, 8006880 <__swbuf_r+0x90>
 800685c:	4638      	mov	r0, r7
 800685e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006860:	4b0a      	ldr	r3, [pc, #40]	; (800688c <__swbuf_r+0x9c>)
 8006862:	429c      	cmp	r4, r3
 8006864:	d101      	bne.n	800686a <__swbuf_r+0x7a>
 8006866:	68ac      	ldr	r4, [r5, #8]
 8006868:	e7cf      	b.n	800680a <__swbuf_r+0x1a>
 800686a:	4b09      	ldr	r3, [pc, #36]	; (8006890 <__swbuf_r+0xa0>)
 800686c:	429c      	cmp	r4, r3
 800686e:	bf08      	it	eq
 8006870:	68ec      	ldreq	r4, [r5, #12]
 8006872:	e7ca      	b.n	800680a <__swbuf_r+0x1a>
 8006874:	4621      	mov	r1, r4
 8006876:	4628      	mov	r0, r5
 8006878:	f000 f80c 	bl	8006894 <__swsetup_r>
 800687c:	2800      	cmp	r0, #0
 800687e:	d0cb      	beq.n	8006818 <__swbuf_r+0x28>
 8006880:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006884:	e7ea      	b.n	800685c <__swbuf_r+0x6c>
 8006886:	bf00      	nop
 8006888:	0801b734 	.word	0x0801b734
 800688c:	0801b754 	.word	0x0801b754
 8006890:	0801b714 	.word	0x0801b714

08006894 <__swsetup_r>:
 8006894:	4b32      	ldr	r3, [pc, #200]	; (8006960 <__swsetup_r+0xcc>)
 8006896:	b570      	push	{r4, r5, r6, lr}
 8006898:	681d      	ldr	r5, [r3, #0]
 800689a:	4606      	mov	r6, r0
 800689c:	460c      	mov	r4, r1
 800689e:	b125      	cbz	r5, 80068aa <__swsetup_r+0x16>
 80068a0:	69ab      	ldr	r3, [r5, #24]
 80068a2:	b913      	cbnz	r3, 80068aa <__swsetup_r+0x16>
 80068a4:	4628      	mov	r0, r5
 80068a6:	f000 f985 	bl	8006bb4 <__sinit>
 80068aa:	4b2e      	ldr	r3, [pc, #184]	; (8006964 <__swsetup_r+0xd0>)
 80068ac:	429c      	cmp	r4, r3
 80068ae:	d10f      	bne.n	80068d0 <__swsetup_r+0x3c>
 80068b0:	686c      	ldr	r4, [r5, #4]
 80068b2:	89a3      	ldrh	r3, [r4, #12]
 80068b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068b8:	0719      	lsls	r1, r3, #28
 80068ba:	d42c      	bmi.n	8006916 <__swsetup_r+0x82>
 80068bc:	06dd      	lsls	r5, r3, #27
 80068be:	d411      	bmi.n	80068e4 <__swsetup_r+0x50>
 80068c0:	2309      	movs	r3, #9
 80068c2:	6033      	str	r3, [r6, #0]
 80068c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068c8:	81a3      	strh	r3, [r4, #12]
 80068ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068ce:	e03e      	b.n	800694e <__swsetup_r+0xba>
 80068d0:	4b25      	ldr	r3, [pc, #148]	; (8006968 <__swsetup_r+0xd4>)
 80068d2:	429c      	cmp	r4, r3
 80068d4:	d101      	bne.n	80068da <__swsetup_r+0x46>
 80068d6:	68ac      	ldr	r4, [r5, #8]
 80068d8:	e7eb      	b.n	80068b2 <__swsetup_r+0x1e>
 80068da:	4b24      	ldr	r3, [pc, #144]	; (800696c <__swsetup_r+0xd8>)
 80068dc:	429c      	cmp	r4, r3
 80068de:	bf08      	it	eq
 80068e0:	68ec      	ldreq	r4, [r5, #12]
 80068e2:	e7e6      	b.n	80068b2 <__swsetup_r+0x1e>
 80068e4:	0758      	lsls	r0, r3, #29
 80068e6:	d512      	bpl.n	800690e <__swsetup_r+0x7a>
 80068e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068ea:	b141      	cbz	r1, 80068fe <__swsetup_r+0x6a>
 80068ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068f0:	4299      	cmp	r1, r3
 80068f2:	d002      	beq.n	80068fa <__swsetup_r+0x66>
 80068f4:	4630      	mov	r0, r6
 80068f6:	f7ff fb49 	bl	8005f8c <_free_r>
 80068fa:	2300      	movs	r3, #0
 80068fc:	6363      	str	r3, [r4, #52]	; 0x34
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006904:	81a3      	strh	r3, [r4, #12]
 8006906:	2300      	movs	r3, #0
 8006908:	6063      	str	r3, [r4, #4]
 800690a:	6923      	ldr	r3, [r4, #16]
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	f043 0308 	orr.w	r3, r3, #8
 8006914:	81a3      	strh	r3, [r4, #12]
 8006916:	6923      	ldr	r3, [r4, #16]
 8006918:	b94b      	cbnz	r3, 800692e <__swsetup_r+0x9a>
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006924:	d003      	beq.n	800692e <__swsetup_r+0x9a>
 8006926:	4621      	mov	r1, r4
 8006928:	4630      	mov	r0, r6
 800692a:	f000 fa07 	bl	8006d3c <__smakebuf_r>
 800692e:	89a0      	ldrh	r0, [r4, #12]
 8006930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006934:	f010 0301 	ands.w	r3, r0, #1
 8006938:	d00a      	beq.n	8006950 <__swsetup_r+0xbc>
 800693a:	2300      	movs	r3, #0
 800693c:	60a3      	str	r3, [r4, #8]
 800693e:	6963      	ldr	r3, [r4, #20]
 8006940:	425b      	negs	r3, r3
 8006942:	61a3      	str	r3, [r4, #24]
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	b943      	cbnz	r3, 800695a <__swsetup_r+0xc6>
 8006948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800694c:	d1ba      	bne.n	80068c4 <__swsetup_r+0x30>
 800694e:	bd70      	pop	{r4, r5, r6, pc}
 8006950:	0781      	lsls	r1, r0, #30
 8006952:	bf58      	it	pl
 8006954:	6963      	ldrpl	r3, [r4, #20]
 8006956:	60a3      	str	r3, [r4, #8]
 8006958:	e7f4      	b.n	8006944 <__swsetup_r+0xb0>
 800695a:	2000      	movs	r0, #0
 800695c:	e7f7      	b.n	800694e <__swsetup_r+0xba>
 800695e:	bf00      	nop
 8006960:	20000420 	.word	0x20000420
 8006964:	0801b734 	.word	0x0801b734
 8006968:	0801b754 	.word	0x0801b754
 800696c:	0801b714 	.word	0x0801b714

08006970 <abort>:
 8006970:	b508      	push	{r3, lr}
 8006972:	2006      	movs	r0, #6
 8006974:	f000 fa52 	bl	8006e1c <raise>
 8006978:	2001      	movs	r0, #1
 800697a:	f7fb fa48 	bl	8001e0e <_exit>
	...

08006980 <__sflush_r>:
 8006980:	898a      	ldrh	r2, [r1, #12]
 8006982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006986:	4605      	mov	r5, r0
 8006988:	0710      	lsls	r0, r2, #28
 800698a:	460c      	mov	r4, r1
 800698c:	d458      	bmi.n	8006a40 <__sflush_r+0xc0>
 800698e:	684b      	ldr	r3, [r1, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	dc05      	bgt.n	80069a0 <__sflush_r+0x20>
 8006994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	dc02      	bgt.n	80069a0 <__sflush_r+0x20>
 800699a:	2000      	movs	r0, #0
 800699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069a2:	2e00      	cmp	r6, #0
 80069a4:	d0f9      	beq.n	800699a <__sflush_r+0x1a>
 80069a6:	2300      	movs	r3, #0
 80069a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069ac:	682f      	ldr	r7, [r5, #0]
 80069ae:	6a21      	ldr	r1, [r4, #32]
 80069b0:	602b      	str	r3, [r5, #0]
 80069b2:	d032      	beq.n	8006a1a <__sflush_r+0x9a>
 80069b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	075a      	lsls	r2, r3, #29
 80069ba:	d505      	bpl.n	80069c8 <__sflush_r+0x48>
 80069bc:	6863      	ldr	r3, [r4, #4]
 80069be:	1ac0      	subs	r0, r0, r3
 80069c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069c2:	b10b      	cbz	r3, 80069c8 <__sflush_r+0x48>
 80069c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069c6:	1ac0      	subs	r0, r0, r3
 80069c8:	2300      	movs	r3, #0
 80069ca:	4602      	mov	r2, r0
 80069cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ce:	6a21      	ldr	r1, [r4, #32]
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b0      	blx	r6
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	d106      	bne.n	80069e8 <__sflush_r+0x68>
 80069da:	6829      	ldr	r1, [r5, #0]
 80069dc:	291d      	cmp	r1, #29
 80069de:	d82b      	bhi.n	8006a38 <__sflush_r+0xb8>
 80069e0:	4a29      	ldr	r2, [pc, #164]	; (8006a88 <__sflush_r+0x108>)
 80069e2:	410a      	asrs	r2, r1
 80069e4:	07d6      	lsls	r6, r2, #31
 80069e6:	d427      	bmi.n	8006a38 <__sflush_r+0xb8>
 80069e8:	2200      	movs	r2, #0
 80069ea:	6062      	str	r2, [r4, #4]
 80069ec:	04d9      	lsls	r1, r3, #19
 80069ee:	6922      	ldr	r2, [r4, #16]
 80069f0:	6022      	str	r2, [r4, #0]
 80069f2:	d504      	bpl.n	80069fe <__sflush_r+0x7e>
 80069f4:	1c42      	adds	r2, r0, #1
 80069f6:	d101      	bne.n	80069fc <__sflush_r+0x7c>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	b903      	cbnz	r3, 80069fe <__sflush_r+0x7e>
 80069fc:	6560      	str	r0, [r4, #84]	; 0x54
 80069fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a00:	602f      	str	r7, [r5, #0]
 8006a02:	2900      	cmp	r1, #0
 8006a04:	d0c9      	beq.n	800699a <__sflush_r+0x1a>
 8006a06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a0a:	4299      	cmp	r1, r3
 8006a0c:	d002      	beq.n	8006a14 <__sflush_r+0x94>
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f7ff fabc 	bl	8005f8c <_free_r>
 8006a14:	2000      	movs	r0, #0
 8006a16:	6360      	str	r0, [r4, #52]	; 0x34
 8006a18:	e7c0      	b.n	800699c <__sflush_r+0x1c>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b0      	blx	r6
 8006a20:	1c41      	adds	r1, r0, #1
 8006a22:	d1c8      	bne.n	80069b6 <__sflush_r+0x36>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0c5      	beq.n	80069b6 <__sflush_r+0x36>
 8006a2a:	2b1d      	cmp	r3, #29
 8006a2c:	d001      	beq.n	8006a32 <__sflush_r+0xb2>
 8006a2e:	2b16      	cmp	r3, #22
 8006a30:	d101      	bne.n	8006a36 <__sflush_r+0xb6>
 8006a32:	602f      	str	r7, [r5, #0]
 8006a34:	e7b1      	b.n	800699a <__sflush_r+0x1a>
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	e7ad      	b.n	800699c <__sflush_r+0x1c>
 8006a40:	690f      	ldr	r7, [r1, #16]
 8006a42:	2f00      	cmp	r7, #0
 8006a44:	d0a9      	beq.n	800699a <__sflush_r+0x1a>
 8006a46:	0793      	lsls	r3, r2, #30
 8006a48:	680e      	ldr	r6, [r1, #0]
 8006a4a:	bf08      	it	eq
 8006a4c:	694b      	ldreq	r3, [r1, #20]
 8006a4e:	600f      	str	r7, [r1, #0]
 8006a50:	bf18      	it	ne
 8006a52:	2300      	movne	r3, #0
 8006a54:	eba6 0807 	sub.w	r8, r6, r7
 8006a58:	608b      	str	r3, [r1, #8]
 8006a5a:	f1b8 0f00 	cmp.w	r8, #0
 8006a5e:	dd9c      	ble.n	800699a <__sflush_r+0x1a>
 8006a60:	6a21      	ldr	r1, [r4, #32]
 8006a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a64:	4643      	mov	r3, r8
 8006a66:	463a      	mov	r2, r7
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b0      	blx	r6
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	dc06      	bgt.n	8006a7e <__sflush_r+0xfe>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a76:	81a3      	strh	r3, [r4, #12]
 8006a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a7c:	e78e      	b.n	800699c <__sflush_r+0x1c>
 8006a7e:	4407      	add	r7, r0
 8006a80:	eba8 0800 	sub.w	r8, r8, r0
 8006a84:	e7e9      	b.n	8006a5a <__sflush_r+0xda>
 8006a86:	bf00      	nop
 8006a88:	dfbffffe 	.word	0xdfbffffe

08006a8c <_fflush_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	690b      	ldr	r3, [r1, #16]
 8006a90:	4605      	mov	r5, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	b913      	cbnz	r3, 8006a9c <_fflush_r+0x10>
 8006a96:	2500      	movs	r5, #0
 8006a98:	4628      	mov	r0, r5
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	b118      	cbz	r0, 8006aa6 <_fflush_r+0x1a>
 8006a9e:	6983      	ldr	r3, [r0, #24]
 8006aa0:	b90b      	cbnz	r3, 8006aa6 <_fflush_r+0x1a>
 8006aa2:	f000 f887 	bl	8006bb4 <__sinit>
 8006aa6:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <_fflush_r+0x6c>)
 8006aa8:	429c      	cmp	r4, r3
 8006aaa:	d11b      	bne.n	8006ae4 <_fflush_r+0x58>
 8006aac:	686c      	ldr	r4, [r5, #4]
 8006aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0ef      	beq.n	8006a96 <_fflush_r+0xa>
 8006ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ab8:	07d0      	lsls	r0, r2, #31
 8006aba:	d404      	bmi.n	8006ac6 <_fflush_r+0x3a>
 8006abc:	0599      	lsls	r1, r3, #22
 8006abe:	d402      	bmi.n	8006ac6 <_fflush_r+0x3a>
 8006ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ac2:	f7fe fea6 	bl	8005812 <__retarget_lock_acquire_recursive>
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	4621      	mov	r1, r4
 8006aca:	f7ff ff59 	bl	8006980 <__sflush_r>
 8006ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ad0:	07da      	lsls	r2, r3, #31
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	d4e0      	bmi.n	8006a98 <_fflush_r+0xc>
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	059b      	lsls	r3, r3, #22
 8006ada:	d4dd      	bmi.n	8006a98 <_fflush_r+0xc>
 8006adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ade:	f7fe fe99 	bl	8005814 <__retarget_lock_release_recursive>
 8006ae2:	e7d9      	b.n	8006a98 <_fflush_r+0xc>
 8006ae4:	4b05      	ldr	r3, [pc, #20]	; (8006afc <_fflush_r+0x70>)
 8006ae6:	429c      	cmp	r4, r3
 8006ae8:	d101      	bne.n	8006aee <_fflush_r+0x62>
 8006aea:	68ac      	ldr	r4, [r5, #8]
 8006aec:	e7df      	b.n	8006aae <_fflush_r+0x22>
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <_fflush_r+0x74>)
 8006af0:	429c      	cmp	r4, r3
 8006af2:	bf08      	it	eq
 8006af4:	68ec      	ldreq	r4, [r5, #12]
 8006af6:	e7da      	b.n	8006aae <_fflush_r+0x22>
 8006af8:	0801b734 	.word	0x0801b734
 8006afc:	0801b754 	.word	0x0801b754
 8006b00:	0801b714 	.word	0x0801b714

08006b04 <std>:
 8006b04:	2300      	movs	r3, #0
 8006b06:	b510      	push	{r4, lr}
 8006b08:	4604      	mov	r4, r0
 8006b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b12:	6083      	str	r3, [r0, #8]
 8006b14:	8181      	strh	r1, [r0, #12]
 8006b16:	6643      	str	r3, [r0, #100]	; 0x64
 8006b18:	81c2      	strh	r2, [r0, #14]
 8006b1a:	6183      	str	r3, [r0, #24]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	2208      	movs	r2, #8
 8006b20:	305c      	adds	r0, #92	; 0x5c
 8006b22:	f7fd fc19 	bl	8004358 <memset>
 8006b26:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <std+0x38>)
 8006b28:	6263      	str	r3, [r4, #36]	; 0x24
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <std+0x3c>)
 8006b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <std+0x40>)
 8006b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <std+0x44>)
 8006b34:	6224      	str	r4, [r4, #32]
 8006b36:	6323      	str	r3, [r4, #48]	; 0x30
 8006b38:	bd10      	pop	{r4, pc}
 8006b3a:	bf00      	nop
 8006b3c:	08006e55 	.word	0x08006e55
 8006b40:	08006e77 	.word	0x08006e77
 8006b44:	08006eaf 	.word	0x08006eaf
 8006b48:	08006ed3 	.word	0x08006ed3

08006b4c <_cleanup_r>:
 8006b4c:	4901      	ldr	r1, [pc, #4]	; (8006b54 <_cleanup_r+0x8>)
 8006b4e:	f000 b8af 	b.w	8006cb0 <_fwalk_reent>
 8006b52:	bf00      	nop
 8006b54:	08006a8d 	.word	0x08006a8d

08006b58 <__sfmoreglue>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	2368      	movs	r3, #104	; 0x68
 8006b5c:	1e4d      	subs	r5, r1, #1
 8006b5e:	435d      	muls	r5, r3
 8006b60:	460e      	mov	r6, r1
 8006b62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b66:	f7ff fa7d 	bl	8006064 <_malloc_r>
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	b140      	cbz	r0, 8006b80 <__sfmoreglue+0x28>
 8006b6e:	2100      	movs	r1, #0
 8006b70:	e9c0 1600 	strd	r1, r6, [r0]
 8006b74:	300c      	adds	r0, #12
 8006b76:	60a0      	str	r0, [r4, #8]
 8006b78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b7c:	f7fd fbec 	bl	8004358 <memset>
 8006b80:	4620      	mov	r0, r4
 8006b82:	bd70      	pop	{r4, r5, r6, pc}

08006b84 <__sfp_lock_acquire>:
 8006b84:	4801      	ldr	r0, [pc, #4]	; (8006b8c <__sfp_lock_acquire+0x8>)
 8006b86:	f7fe be44 	b.w	8005812 <__retarget_lock_acquire_recursive>
 8006b8a:	bf00      	nop
 8006b8c:	200353c1 	.word	0x200353c1

08006b90 <__sfp_lock_release>:
 8006b90:	4801      	ldr	r0, [pc, #4]	; (8006b98 <__sfp_lock_release+0x8>)
 8006b92:	f7fe be3f 	b.w	8005814 <__retarget_lock_release_recursive>
 8006b96:	bf00      	nop
 8006b98:	200353c1 	.word	0x200353c1

08006b9c <__sinit_lock_acquire>:
 8006b9c:	4801      	ldr	r0, [pc, #4]	; (8006ba4 <__sinit_lock_acquire+0x8>)
 8006b9e:	f7fe be38 	b.w	8005812 <__retarget_lock_acquire_recursive>
 8006ba2:	bf00      	nop
 8006ba4:	200353c2 	.word	0x200353c2

08006ba8 <__sinit_lock_release>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <__sinit_lock_release+0x8>)
 8006baa:	f7fe be33 	b.w	8005814 <__retarget_lock_release_recursive>
 8006bae:	bf00      	nop
 8006bb0:	200353c2 	.word	0x200353c2

08006bb4 <__sinit>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	f7ff fff0 	bl	8006b9c <__sinit_lock_acquire>
 8006bbc:	69a3      	ldr	r3, [r4, #24]
 8006bbe:	b11b      	cbz	r3, 8006bc8 <__sinit+0x14>
 8006bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc4:	f7ff bff0 	b.w	8006ba8 <__sinit_lock_release>
 8006bc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bcc:	6523      	str	r3, [r4, #80]	; 0x50
 8006bce:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <__sinit+0x68>)
 8006bd0:	4a13      	ldr	r2, [pc, #76]	; (8006c20 <__sinit+0x6c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bd6:	42a3      	cmp	r3, r4
 8006bd8:	bf04      	itt	eq
 8006bda:	2301      	moveq	r3, #1
 8006bdc:	61a3      	streq	r3, [r4, #24]
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 f820 	bl	8006c24 <__sfp>
 8006be4:	6060      	str	r0, [r4, #4]
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 f81c 	bl	8006c24 <__sfp>
 8006bec:	60a0      	str	r0, [r4, #8]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 f818 	bl	8006c24 <__sfp>
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	60e0      	str	r0, [r4, #12]
 8006bf8:	2104      	movs	r1, #4
 8006bfa:	6860      	ldr	r0, [r4, #4]
 8006bfc:	f7ff ff82 	bl	8006b04 <std>
 8006c00:	68a0      	ldr	r0, [r4, #8]
 8006c02:	2201      	movs	r2, #1
 8006c04:	2109      	movs	r1, #9
 8006c06:	f7ff ff7d 	bl	8006b04 <std>
 8006c0a:	68e0      	ldr	r0, [r4, #12]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	2112      	movs	r1, #18
 8006c10:	f7ff ff78 	bl	8006b04 <std>
 8006c14:	2301      	movs	r3, #1
 8006c16:	61a3      	str	r3, [r4, #24]
 8006c18:	e7d2      	b.n	8006bc0 <__sinit+0xc>
 8006c1a:	bf00      	nop
 8006c1c:	0801b3c0 	.word	0x0801b3c0
 8006c20:	08006b4d 	.word	0x08006b4d

08006c24 <__sfp>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	4607      	mov	r7, r0
 8006c28:	f7ff ffac 	bl	8006b84 <__sfp_lock_acquire>
 8006c2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ca8 <__sfp+0x84>)
 8006c2e:	681e      	ldr	r6, [r3, #0]
 8006c30:	69b3      	ldr	r3, [r6, #24]
 8006c32:	b913      	cbnz	r3, 8006c3a <__sfp+0x16>
 8006c34:	4630      	mov	r0, r6
 8006c36:	f7ff ffbd 	bl	8006bb4 <__sinit>
 8006c3a:	3648      	adds	r6, #72	; 0x48
 8006c3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	d503      	bpl.n	8006c4c <__sfp+0x28>
 8006c44:	6833      	ldr	r3, [r6, #0]
 8006c46:	b30b      	cbz	r3, 8006c8c <__sfp+0x68>
 8006c48:	6836      	ldr	r6, [r6, #0]
 8006c4a:	e7f7      	b.n	8006c3c <__sfp+0x18>
 8006c4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c50:	b9d5      	cbnz	r5, 8006c88 <__sfp+0x64>
 8006c52:	4b16      	ldr	r3, [pc, #88]	; (8006cac <__sfp+0x88>)
 8006c54:	60e3      	str	r3, [r4, #12]
 8006c56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c5a:	6665      	str	r5, [r4, #100]	; 0x64
 8006c5c:	f7fe fdd8 	bl	8005810 <__retarget_lock_init_recursive>
 8006c60:	f7ff ff96 	bl	8006b90 <__sfp_lock_release>
 8006c64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c6c:	6025      	str	r5, [r4, #0]
 8006c6e:	61a5      	str	r5, [r4, #24]
 8006c70:	2208      	movs	r2, #8
 8006c72:	4629      	mov	r1, r5
 8006c74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c78:	f7fd fb6e 	bl	8004358 <memset>
 8006c7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c84:	4620      	mov	r0, r4
 8006c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c88:	3468      	adds	r4, #104	; 0x68
 8006c8a:	e7d9      	b.n	8006c40 <__sfp+0x1c>
 8006c8c:	2104      	movs	r1, #4
 8006c8e:	4638      	mov	r0, r7
 8006c90:	f7ff ff62 	bl	8006b58 <__sfmoreglue>
 8006c94:	4604      	mov	r4, r0
 8006c96:	6030      	str	r0, [r6, #0]
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d1d5      	bne.n	8006c48 <__sfp+0x24>
 8006c9c:	f7ff ff78 	bl	8006b90 <__sfp_lock_release>
 8006ca0:	230c      	movs	r3, #12
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	e7ee      	b.n	8006c84 <__sfp+0x60>
 8006ca6:	bf00      	nop
 8006ca8:	0801b3c0 	.word	0x0801b3c0
 8006cac:	ffff0001 	.word	0xffff0001

08006cb0 <_fwalk_reent>:
 8006cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	4688      	mov	r8, r1
 8006cb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cbc:	2700      	movs	r7, #0
 8006cbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cc2:	f1b9 0901 	subs.w	r9, r9, #1
 8006cc6:	d505      	bpl.n	8006cd4 <_fwalk_reent+0x24>
 8006cc8:	6824      	ldr	r4, [r4, #0]
 8006cca:	2c00      	cmp	r4, #0
 8006ccc:	d1f7      	bne.n	8006cbe <_fwalk_reent+0xe>
 8006cce:	4638      	mov	r0, r7
 8006cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cd4:	89ab      	ldrh	r3, [r5, #12]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d907      	bls.n	8006cea <_fwalk_reent+0x3a>
 8006cda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	d003      	beq.n	8006cea <_fwalk_reent+0x3a>
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	47c0      	blx	r8
 8006ce8:	4307      	orrs	r7, r0
 8006cea:	3568      	adds	r5, #104	; 0x68
 8006cec:	e7e9      	b.n	8006cc2 <_fwalk_reent+0x12>

08006cee <__swhatbuf_r>:
 8006cee:	b570      	push	{r4, r5, r6, lr}
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf6:	2900      	cmp	r1, #0
 8006cf8:	b096      	sub	sp, #88	; 0x58
 8006cfa:	4615      	mov	r5, r2
 8006cfc:	461e      	mov	r6, r3
 8006cfe:	da0d      	bge.n	8006d1c <__swhatbuf_r+0x2e>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d06:	f04f 0100 	mov.w	r1, #0
 8006d0a:	bf0c      	ite	eq
 8006d0c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006d10:	2340      	movne	r3, #64	; 0x40
 8006d12:	2000      	movs	r0, #0
 8006d14:	6031      	str	r1, [r6, #0]
 8006d16:	602b      	str	r3, [r5, #0]
 8006d18:	b016      	add	sp, #88	; 0x58
 8006d1a:	bd70      	pop	{r4, r5, r6, pc}
 8006d1c:	466a      	mov	r2, sp
 8006d1e:	f000 f8ff 	bl	8006f20 <_fstat_r>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	dbec      	blt.n	8006d00 <__swhatbuf_r+0x12>
 8006d26:	9901      	ldr	r1, [sp, #4]
 8006d28:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d2c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d30:	4259      	negs	r1, r3
 8006d32:	4159      	adcs	r1, r3
 8006d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d38:	e7eb      	b.n	8006d12 <__swhatbuf_r+0x24>
	...

08006d3c <__smakebuf_r>:
 8006d3c:	898b      	ldrh	r3, [r1, #12]
 8006d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d40:	079d      	lsls	r5, r3, #30
 8006d42:	4606      	mov	r6, r0
 8006d44:	460c      	mov	r4, r1
 8006d46:	d507      	bpl.n	8006d58 <__smakebuf_r+0x1c>
 8006d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	6123      	str	r3, [r4, #16]
 8006d50:	2301      	movs	r3, #1
 8006d52:	6163      	str	r3, [r4, #20]
 8006d54:	b002      	add	sp, #8
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	ab01      	add	r3, sp, #4
 8006d5a:	466a      	mov	r2, sp
 8006d5c:	f7ff ffc7 	bl	8006cee <__swhatbuf_r>
 8006d60:	9900      	ldr	r1, [sp, #0]
 8006d62:	4605      	mov	r5, r0
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7ff f97d 	bl	8006064 <_malloc_r>
 8006d6a:	b948      	cbnz	r0, 8006d80 <__smakebuf_r+0x44>
 8006d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d70:	059a      	lsls	r2, r3, #22
 8006d72:	d4ef      	bmi.n	8006d54 <__smakebuf_r+0x18>
 8006d74:	f023 0303 	bic.w	r3, r3, #3
 8006d78:	f043 0302 	orr.w	r3, r3, #2
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	e7e3      	b.n	8006d48 <__smakebuf_r+0xc>
 8006d80:	4b0d      	ldr	r3, [pc, #52]	; (8006db8 <__smakebuf_r+0x7c>)
 8006d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d84:	89a3      	ldrh	r3, [r4, #12]
 8006d86:	6020      	str	r0, [r4, #0]
 8006d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8c:	81a3      	strh	r3, [r4, #12]
 8006d8e:	9b00      	ldr	r3, [sp, #0]
 8006d90:	6163      	str	r3, [r4, #20]
 8006d92:	9b01      	ldr	r3, [sp, #4]
 8006d94:	6120      	str	r0, [r4, #16]
 8006d96:	b15b      	cbz	r3, 8006db0 <__smakebuf_r+0x74>
 8006d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f000 f8d1 	bl	8006f44 <_isatty_r>
 8006da2:	b128      	cbz	r0, 8006db0 <__smakebuf_r+0x74>
 8006da4:	89a3      	ldrh	r3, [r4, #12]
 8006da6:	f023 0303 	bic.w	r3, r3, #3
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	81a3      	strh	r3, [r4, #12]
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	431d      	orrs	r5, r3
 8006db4:	81a5      	strh	r5, [r4, #12]
 8006db6:	e7cd      	b.n	8006d54 <__smakebuf_r+0x18>
 8006db8:	08006b4d 	.word	0x08006b4d

08006dbc <_malloc_usable_size_r>:
 8006dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dc0:	1f18      	subs	r0, r3, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bfbc      	itt	lt
 8006dc6:	580b      	ldrlt	r3, [r1, r0]
 8006dc8:	18c0      	addlt	r0, r0, r3
 8006dca:	4770      	bx	lr

08006dcc <_raise_r>:
 8006dcc:	291f      	cmp	r1, #31
 8006dce:	b538      	push	{r3, r4, r5, lr}
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	460d      	mov	r5, r1
 8006dd4:	d904      	bls.n	8006de0 <_raise_r+0x14>
 8006dd6:	2316      	movs	r3, #22
 8006dd8:	6003      	str	r3, [r0, #0]
 8006dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006de2:	b112      	cbz	r2, 8006dea <_raise_r+0x1e>
 8006de4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006de8:	b94b      	cbnz	r3, 8006dfe <_raise_r+0x32>
 8006dea:	4620      	mov	r0, r4
 8006dec:	f000 f830 	bl	8006e50 <_getpid_r>
 8006df0:	462a      	mov	r2, r5
 8006df2:	4601      	mov	r1, r0
 8006df4:	4620      	mov	r0, r4
 8006df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dfa:	f000 b817 	b.w	8006e2c <_kill_r>
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d00a      	beq.n	8006e18 <_raise_r+0x4c>
 8006e02:	1c59      	adds	r1, r3, #1
 8006e04:	d103      	bne.n	8006e0e <_raise_r+0x42>
 8006e06:	2316      	movs	r3, #22
 8006e08:	6003      	str	r3, [r0, #0]
 8006e0a:	2001      	movs	r0, #1
 8006e0c:	e7e7      	b.n	8006dde <_raise_r+0x12>
 8006e0e:	2400      	movs	r4, #0
 8006e10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e14:	4628      	mov	r0, r5
 8006e16:	4798      	blx	r3
 8006e18:	2000      	movs	r0, #0
 8006e1a:	e7e0      	b.n	8006dde <_raise_r+0x12>

08006e1c <raise>:
 8006e1c:	4b02      	ldr	r3, [pc, #8]	; (8006e28 <raise+0xc>)
 8006e1e:	4601      	mov	r1, r0
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	f7ff bfd3 	b.w	8006dcc <_raise_r>
 8006e26:	bf00      	nop
 8006e28:	20000420 	.word	0x20000420

08006e2c <_kill_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4d07      	ldr	r5, [pc, #28]	; (8006e4c <_kill_r+0x20>)
 8006e30:	2300      	movs	r3, #0
 8006e32:	4604      	mov	r4, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	4611      	mov	r1, r2
 8006e38:	602b      	str	r3, [r5, #0]
 8006e3a:	f7fa ffd8 	bl	8001dee <_kill>
 8006e3e:	1c43      	adds	r3, r0, #1
 8006e40:	d102      	bne.n	8006e48 <_kill_r+0x1c>
 8006e42:	682b      	ldr	r3, [r5, #0]
 8006e44:	b103      	cbz	r3, 8006e48 <_kill_r+0x1c>
 8006e46:	6023      	str	r3, [r4, #0]
 8006e48:	bd38      	pop	{r3, r4, r5, pc}
 8006e4a:	bf00      	nop
 8006e4c:	200353cc 	.word	0x200353cc

08006e50 <_getpid_r>:
 8006e50:	f7fa bfc5 	b.w	8001dde <_getpid>

08006e54 <__sread>:
 8006e54:	b510      	push	{r4, lr}
 8006e56:	460c      	mov	r4, r1
 8006e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e5c:	f000 f894 	bl	8006f88 <_read_r>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	bfab      	itete	ge
 8006e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e66:	89a3      	ldrhlt	r3, [r4, #12]
 8006e68:	181b      	addge	r3, r3, r0
 8006e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e6e:	bfac      	ite	ge
 8006e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e72:	81a3      	strhlt	r3, [r4, #12]
 8006e74:	bd10      	pop	{r4, pc}

08006e76 <__swrite>:
 8006e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e7a:	461f      	mov	r7, r3
 8006e7c:	898b      	ldrh	r3, [r1, #12]
 8006e7e:	05db      	lsls	r3, r3, #23
 8006e80:	4605      	mov	r5, r0
 8006e82:	460c      	mov	r4, r1
 8006e84:	4616      	mov	r6, r2
 8006e86:	d505      	bpl.n	8006e94 <__swrite+0x1e>
 8006e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f000 f868 	bl	8006f64 <_lseek_r>
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e9e:	81a3      	strh	r3, [r4, #12]
 8006ea0:	4632      	mov	r2, r6
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eaa:	f000 b817 	b.w	8006edc <_write_r>

08006eae <__sseek>:
 8006eae:	b510      	push	{r4, lr}
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb6:	f000 f855 	bl	8006f64 <_lseek_r>
 8006eba:	1c43      	adds	r3, r0, #1
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	bf15      	itete	ne
 8006ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006eca:	81a3      	strheq	r3, [r4, #12]
 8006ecc:	bf18      	it	ne
 8006ece:	81a3      	strhne	r3, [r4, #12]
 8006ed0:	bd10      	pop	{r4, pc}

08006ed2 <__sclose>:
 8006ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed6:	f000 b813 	b.w	8006f00 <_close_r>
	...

08006edc <_write_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4d07      	ldr	r5, [pc, #28]	; (8006efc <_write_r+0x20>)
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	4608      	mov	r0, r1
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	602a      	str	r2, [r5, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	f7fa ffb7 	bl	8001e5e <_write>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d102      	bne.n	8006efa <_write_r+0x1e>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b103      	cbz	r3, 8006efa <_write_r+0x1e>
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	200353cc 	.word	0x200353cc

08006f00 <_close_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4d06      	ldr	r5, [pc, #24]	; (8006f1c <_close_r+0x1c>)
 8006f04:	2300      	movs	r3, #0
 8006f06:	4604      	mov	r4, r0
 8006f08:	4608      	mov	r0, r1
 8006f0a:	602b      	str	r3, [r5, #0]
 8006f0c:	f7fa ffc3 	bl	8001e96 <_close>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	d102      	bne.n	8006f1a <_close_r+0x1a>
 8006f14:	682b      	ldr	r3, [r5, #0]
 8006f16:	b103      	cbz	r3, 8006f1a <_close_r+0x1a>
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
 8006f1c:	200353cc 	.word	0x200353cc

08006f20 <_fstat_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4d07      	ldr	r5, [pc, #28]	; (8006f40 <_fstat_r+0x20>)
 8006f24:	2300      	movs	r3, #0
 8006f26:	4604      	mov	r4, r0
 8006f28:	4608      	mov	r0, r1
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	602b      	str	r3, [r5, #0]
 8006f2e:	f7fa ffbe 	bl	8001eae <_fstat>
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	d102      	bne.n	8006f3c <_fstat_r+0x1c>
 8006f36:	682b      	ldr	r3, [r5, #0]
 8006f38:	b103      	cbz	r3, 8006f3c <_fstat_r+0x1c>
 8006f3a:	6023      	str	r3, [r4, #0]
 8006f3c:	bd38      	pop	{r3, r4, r5, pc}
 8006f3e:	bf00      	nop
 8006f40:	200353cc 	.word	0x200353cc

08006f44 <_isatty_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4d06      	ldr	r5, [pc, #24]	; (8006f60 <_isatty_r+0x1c>)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	4608      	mov	r0, r1
 8006f4e:	602b      	str	r3, [r5, #0]
 8006f50:	f7fa ffbd 	bl	8001ece <_isatty>
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	d102      	bne.n	8006f5e <_isatty_r+0x1a>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	b103      	cbz	r3, 8006f5e <_isatty_r+0x1a>
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
 8006f60:	200353cc 	.word	0x200353cc

08006f64 <_lseek_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4d07      	ldr	r5, [pc, #28]	; (8006f84 <_lseek_r+0x20>)
 8006f68:	4604      	mov	r4, r0
 8006f6a:	4608      	mov	r0, r1
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	2200      	movs	r2, #0
 8006f70:	602a      	str	r2, [r5, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	f7fa ffb6 	bl	8001ee4 <_lseek>
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	d102      	bne.n	8006f82 <_lseek_r+0x1e>
 8006f7c:	682b      	ldr	r3, [r5, #0]
 8006f7e:	b103      	cbz	r3, 8006f82 <_lseek_r+0x1e>
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	bd38      	pop	{r3, r4, r5, pc}
 8006f84:	200353cc 	.word	0x200353cc

08006f88 <_read_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	4d07      	ldr	r5, [pc, #28]	; (8006fa8 <_read_r+0x20>)
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	4608      	mov	r0, r1
 8006f90:	4611      	mov	r1, r2
 8006f92:	2200      	movs	r2, #0
 8006f94:	602a      	str	r2, [r5, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	f7fa ff44 	bl	8001e24 <_read>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d102      	bne.n	8006fa6 <_read_r+0x1e>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	b103      	cbz	r3, 8006fa6 <_read_r+0x1e>
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	bd38      	pop	{r3, r4, r5, pc}
 8006fa8:	200353cc 	.word	0x200353cc

08006fac <atan2f>:
 8006fac:	f000 b846 	b.w	800703c <__ieee754_atan2f>

08006fb0 <fmodf>:
 8006fb0:	b508      	push	{r3, lr}
 8006fb2:	ed2d 8b02 	vpush	{d8}
 8006fb6:	eef0 8a40 	vmov.f32	s17, s0
 8006fba:	eeb0 8a60 	vmov.f32	s16, s1
 8006fbe:	f000 f8e3 	bl	8007188 <__ieee754_fmodf>
 8006fc2:	eef4 8a48 	vcmp.f32	s17, s16
 8006fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fca:	d606      	bvs.n	8006fda <fmodf+0x2a>
 8006fcc:	eddf 8a09 	vldr	s17, [pc, #36]	; 8006ff4 <fmodf+0x44>
 8006fd0:	eeb4 8a68 	vcmp.f32	s16, s17
 8006fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd8:	d002      	beq.n	8006fe0 <fmodf+0x30>
 8006fda:	ecbd 8b02 	vpop	{d8}
 8006fde:	bd08      	pop	{r3, pc}
 8006fe0:	f7fd f990 	bl	8004304 <__errno>
 8006fe4:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006fe8:	ecbd 8b02 	vpop	{d8}
 8006fec:	2321      	movs	r3, #33	; 0x21
 8006fee:	6003      	str	r3, [r0, #0]
 8006ff0:	bd08      	pop	{r3, pc}
 8006ff2:	bf00      	nop
 8006ff4:	00000000 	.word	0x00000000

08006ff8 <sqrtf>:
 8006ff8:	b508      	push	{r3, lr}
 8006ffa:	ed2d 8b02 	vpush	{d8}
 8006ffe:	eeb0 8a40 	vmov.f32	s16, s0
 8007002:	f000 f951 	bl	80072a8 <__ieee754_sqrtf>
 8007006:	eeb4 8a48 	vcmp.f32	s16, s16
 800700a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700e:	d606      	bvs.n	800701e <sqrtf+0x26>
 8007010:	eddf 8a09 	vldr	s17, [pc, #36]	; 8007038 <sqrtf+0x40>
 8007014:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701c:	d402      	bmi.n	8007024 <sqrtf+0x2c>
 800701e:	ecbd 8b02 	vpop	{d8}
 8007022:	bd08      	pop	{r3, pc}
 8007024:	f7fd f96e 	bl	8004304 <__errno>
 8007028:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800702c:	ecbd 8b02 	vpop	{d8}
 8007030:	2321      	movs	r3, #33	; 0x21
 8007032:	6003      	str	r3, [r0, #0]
 8007034:	bd08      	pop	{r3, pc}
 8007036:	bf00      	nop
 8007038:	00000000 	.word	0x00000000

0800703c <__ieee754_atan2f>:
 800703c:	b510      	push	{r4, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	edcd 0a01 	vstr	s1, [sp, #4]
 8007044:	9b01      	ldr	r3, [sp, #4]
 8007046:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800704a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800704e:	eef0 7a40 	vmov.f32	s15, s0
 8007052:	dc30      	bgt.n	80070b6 <__ieee754_atan2f+0x7a>
 8007054:	ee10 0a10 	vmov	r0, s0
 8007058:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 800705c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007060:	dc29      	bgt.n	80070b6 <__ieee754_atan2f+0x7a>
 8007062:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007066:	d040      	beq.n	80070ea <__ieee754_atan2f+0xae>
 8007068:	179c      	asrs	r4, r3, #30
 800706a:	f004 0402 	and.w	r4, r4, #2
 800706e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007072:	b331      	cbz	r1, 80070c2 <__ieee754_atan2f+0x86>
 8007074:	b372      	cbz	r2, 80070d4 <__ieee754_atan2f+0x98>
 8007076:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800707a:	d03e      	beq.n	80070fa <__ieee754_atan2f+0xbe>
 800707c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007080:	d028      	beq.n	80070d4 <__ieee754_atan2f+0x98>
 8007082:	1a89      	subs	r1, r1, r2
 8007084:	f1b1 5ff4 	cmp.w	r1, #511705088	; 0x1e800000
 8007088:	ea4f 52e1 	mov.w	r2, r1, asr #23
 800708c:	da32      	bge.n	80070f4 <__ieee754_atan2f+0xb8>
 800708e:	2b00      	cmp	r3, #0
 8007090:	da40      	bge.n	8007114 <__ieee754_atan2f+0xd8>
 8007092:	323c      	adds	r2, #60	; 0x3c
 8007094:	da3e      	bge.n	8007114 <__ieee754_atan2f+0xd8>
 8007096:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8007164 <__ieee754_atan2f+0x128>
 800709a:	2c01      	cmp	r4, #1
 800709c:	d04c      	beq.n	8007138 <__ieee754_atan2f+0xfc>
 800709e:	2c02      	cmp	r4, #2
 80070a0:	d041      	beq.n	8007126 <__ieee754_atan2f+0xea>
 80070a2:	b164      	cbz	r4, 80070be <__ieee754_atan2f+0x82>
 80070a4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007168 <__ieee754_atan2f+0x12c>
 80070a8:	eddf 7a30 	vldr	s15, [pc, #192]	; 800716c <__ieee754_atan2f+0x130>
 80070ac:	ee30 0a07 	vadd.f32	s0, s0, s14
 80070b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80070b4:	e003      	b.n	80070be <__ieee754_atan2f+0x82>
 80070b6:	ed9d 7a01 	vldr	s14, [sp, #4]
 80070ba:	ee37 0a27 	vadd.f32	s0, s14, s15
 80070be:	b002      	add	sp, #8
 80070c0:	bd10      	pop	{r4, pc}
 80070c2:	2c02      	cmp	r4, #2
 80070c4:	d00e      	beq.n	80070e4 <__ieee754_atan2f+0xa8>
 80070c6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007170 <__ieee754_atan2f+0x134>
 80070ca:	2c03      	cmp	r4, #3
 80070cc:	fe07 0a00 	vseleq.f32	s0, s14, s0
 80070d0:	b002      	add	sp, #8
 80070d2:	bd10      	pop	{r4, pc}
 80070d4:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8007174 <__ieee754_atan2f+0x138>
 80070d8:	eddf 7a27 	vldr	s15, [pc, #156]	; 8007178 <__ieee754_atan2f+0x13c>
 80070dc:	2800      	cmp	r0, #0
 80070de:	fe20 0a27 	vselge.f32	s0, s0, s15
 80070e2:	e7ec      	b.n	80070be <__ieee754_atan2f+0x82>
 80070e4:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800716c <__ieee754_atan2f+0x130>
 80070e8:	e7e9      	b.n	80070be <__ieee754_atan2f+0x82>
 80070ea:	b002      	add	sp, #8
 80070ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070f0:	f000 b8de 	b.w	80072b0 <atanf>
 80070f4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8007174 <__ieee754_atan2f+0x138>
 80070f8:	e7cf      	b.n	800709a <__ieee754_atan2f+0x5e>
 80070fa:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80070fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007102:	d020      	beq.n	8007146 <__ieee754_atan2f+0x10a>
 8007104:	2c02      	cmp	r4, #2
 8007106:	d826      	bhi.n	8007156 <__ieee754_atan2f+0x11a>
 8007108:	4b1c      	ldr	r3, [pc, #112]	; (800717c <__ieee754_atan2f+0x140>)
 800710a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800710e:	ed93 0a00 	vldr	s0, [r3]
 8007112:	e7d4      	b.n	80070be <__ieee754_atan2f+0x82>
 8007114:	ed9d 7a01 	vldr	s14, [sp, #4]
 8007118:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800711c:	f000 f99a 	bl	8007454 <fabsf>
 8007120:	f000 f8c6 	bl	80072b0 <atanf>
 8007124:	e7b9      	b.n	800709a <__ieee754_atan2f+0x5e>
 8007126:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007168 <__ieee754_atan2f+0x12c>
 800712a:	eddf 7a10 	vldr	s15, [pc, #64]	; 800716c <__ieee754_atan2f+0x130>
 800712e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8007132:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007136:	e7c2      	b.n	80070be <__ieee754_atan2f+0x82>
 8007138:	ee10 3a10 	vmov	r3, s0
 800713c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007140:	ee00 3a10 	vmov	s0, r3
 8007144:	e7bb      	b.n	80070be <__ieee754_atan2f+0x82>
 8007146:	2c02      	cmp	r4, #2
 8007148:	d808      	bhi.n	800715c <__ieee754_atan2f+0x120>
 800714a:	4b0d      	ldr	r3, [pc, #52]	; (8007180 <__ieee754_atan2f+0x144>)
 800714c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007150:	ed93 0a00 	vldr	s0, [r3]
 8007154:	e7b3      	b.n	80070be <__ieee754_atan2f+0x82>
 8007156:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8007164 <__ieee754_atan2f+0x128>
 800715a:	e7b0      	b.n	80070be <__ieee754_atan2f+0x82>
 800715c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8007184 <__ieee754_atan2f+0x148>
 8007160:	e7ad      	b.n	80070be <__ieee754_atan2f+0x82>
 8007162:	bf00      	nop
 8007164:	00000000 	.word	0x00000000
 8007168:	33bbbd2e 	.word	0x33bbbd2e
 800716c:	40490fdb 	.word	0x40490fdb
 8007170:	c0490fdb 	.word	0xc0490fdb
 8007174:	3fc90fdb 	.word	0x3fc90fdb
 8007178:	bfc90fdb 	.word	0xbfc90fdb
 800717c:	0801b780 	.word	0x0801b780
 8007180:	0801b774 	.word	0x0801b774
 8007184:	3f490fdb 	.word	0x3f490fdb

08007188 <__ieee754_fmodf>:
 8007188:	b530      	push	{r4, r5, lr}
 800718a:	b083      	sub	sp, #12
 800718c:	edcd 0a01 	vstr	s1, [sp, #4]
 8007190:	9d01      	ldr	r5, [sp, #4]
 8007192:	f035 4000 	bics.w	r0, r5, #2147483648	; 0x80000000
 8007196:	d041      	beq.n	800721c <__ieee754_fmodf+0x94>
 8007198:	ee10 ea10 	vmov	lr, s0
 800719c:	f02e 4100 	bic.w	r1, lr, #2147483648	; 0x80000000
 80071a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80071a4:	da3a      	bge.n	800721c <__ieee754_fmodf+0x94>
 80071a6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80071aa:	dc37      	bgt.n	800721c <__ieee754_fmodf+0x94>
 80071ac:	4281      	cmp	r1, r0
 80071ae:	db3b      	blt.n	8007228 <__ieee754_fmodf+0xa0>
 80071b0:	f00e 4400 	and.w	r4, lr, #2147483648	; 0x80000000
 80071b4:	d03a      	beq.n	800722c <__ieee754_fmodf+0xa4>
 80071b6:	f01e 4fff 	tst.w	lr, #2139095040	; 0x7f800000
 80071ba:	d156      	bne.n	800726a <__ieee754_fmodf+0xe2>
 80071bc:	020b      	lsls	r3, r1, #8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80071c4:	dd04      	ble.n	80071d0 <__ieee754_fmodf+0x48>
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80071ce:	dcfa      	bgt.n	80071c6 <__ieee754_fmodf+0x3e>
 80071d0:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80071d4:	d158      	bne.n	8007288 <__ieee754_fmodf+0x100>
 80071d6:	0203      	lsls	r3, r0, #8
 80071d8:	f06f 0c7d 	mvn.w	ip, #125	; 0x7d
 80071dc:	d403      	bmi.n	80071e6 <__ieee754_fmodf+0x5e>
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80071e4:	d5fb      	bpl.n	80071de <__ieee754_fmodf+0x56>
 80071e6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80071ea:	db47      	blt.n	800727c <__ieee754_fmodf+0xf4>
 80071ec:	f3ce 0e16 	ubfx	lr, lr, #0, #23
 80071f0:	f44e 0300 	orr.w	r3, lr, #8388608	; 0x800000
 80071f4:	f11c 0f7e 	cmn.w	ip, #126	; 0x7e
 80071f8:	db3a      	blt.n	8007270 <__ieee754_fmodf+0xe8>
 80071fa:	f3c5 0116 	ubfx	r1, r5, #0, #23
 80071fe:	f441 0000 	orr.w	r0, r1, #8388608	; 0x800000
 8007202:	ebb2 020c 	subs.w	r2, r2, ip
 8007206:	d104      	bne.n	8007212 <__ieee754_fmodf+0x8a>
 8007208:	e017      	b.n	800723a <__ieee754_fmodf+0xb2>
 800720a:	d00f      	beq.n	800722c <__ieee754_fmodf+0xa4>
 800720c:	004b      	lsls	r3, r1, #1
 800720e:	3a01      	subs	r2, #1
 8007210:	d013      	beq.n	800723a <__ieee754_fmodf+0xb2>
 8007212:	1a19      	subs	r1, r3, r0
 8007214:	2900      	cmp	r1, #0
 8007216:	daf8      	bge.n	800720a <__ieee754_fmodf+0x82>
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	e7f8      	b.n	800720e <__ieee754_fmodf+0x86>
 800721c:	eddd 7a01 	vldr	s15, [sp, #4]
 8007220:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007224:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007228:	b003      	add	sp, #12
 800722a:	bd30      	pop	{r4, r5, pc}
 800722c:	4b1d      	ldr	r3, [pc, #116]	; (80072a4 <__ieee754_fmodf+0x11c>)
 800722e:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 8007232:	ed93 0a00 	vldr	s0, [r3]
 8007236:	b003      	add	sp, #12
 8007238:	bd30      	pop	{r4, r5, pc}
 800723a:	1a18      	subs	r0, r3, r0
 800723c:	bf58      	it	pl
 800723e:	4603      	movpl	r3, r0
 8007240:	b91b      	cbnz	r3, 800724a <__ieee754_fmodf+0xc2>
 8007242:	e7f3      	b.n	800722c <__ieee754_fmodf+0xa4>
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800724a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800724e:	dbf9      	blt.n	8007244 <__ieee754_fmodf+0xbc>
 8007250:	f11c 0f7e 	cmn.w	ip, #126	; 0x7e
 8007254:	db1d      	blt.n	8007292 <__ieee754_fmodf+0x10a>
 8007256:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800725a:	f10c 0c7f 	add.w	ip, ip, #127	; 0x7f
 800725e:	4323      	orrs	r3, r4
 8007260:	ea43 53cc 	orr.w	r3, r3, ip, lsl #23
 8007264:	ee00 3a10 	vmov	s0, r3
 8007268:	e7de      	b.n	8007228 <__ieee754_fmodf+0xa0>
 800726a:	15ca      	asrs	r2, r1, #23
 800726c:	3a7f      	subs	r2, #127	; 0x7f
 800726e:	e7af      	b.n	80071d0 <__ieee754_fmodf+0x48>
 8007270:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8007274:	eba1 010c 	sub.w	r1, r1, ip
 8007278:	4088      	lsls	r0, r1
 800727a:	e7c2      	b.n	8007202 <__ieee754_fmodf+0x7a>
 800727c:	f06f 037d 	mvn.w	r3, #125	; 0x7d
 8007280:	1a9b      	subs	r3, r3, r2
 8007282:	fa01 f303 	lsl.w	r3, r1, r3
 8007286:	e7b5      	b.n	80071f4 <__ieee754_fmodf+0x6c>
 8007288:	ea4f 5ce0 	mov.w	ip, r0, asr #23
 800728c:	f1ac 0c7f 	sub.w	ip, ip, #127	; 0x7f
 8007290:	e7a9      	b.n	80071e6 <__ieee754_fmodf+0x5e>
 8007292:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8007296:	eba2 020c 	sub.w	r2, r2, ip
 800729a:	4113      	asrs	r3, r2
 800729c:	4323      	orrs	r3, r4
 800729e:	ee00 3a10 	vmov	s0, r3
 80072a2:	e7c1      	b.n	8007228 <__ieee754_fmodf+0xa0>
 80072a4:	0801b78c 	.word	0x0801b78c

080072a8 <__ieee754_sqrtf>:
 80072a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop

080072b0 <atanf>:
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	ee10 5a10 	vmov	r5, s0
 80072b6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80072ba:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80072be:	eef0 7a40 	vmov.f32	s15, s0
 80072c2:	db0a      	blt.n	80072da <atanf+0x2a>
 80072c4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80072c8:	dc58      	bgt.n	800737c <atanf+0xcc>
 80072ca:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8007408 <atanf+0x158>
 80072ce:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800740c <atanf+0x15c>
 80072d2:	2d00      	cmp	r5, #0
 80072d4:	fe37 0a87 	vselgt.f32	s0, s15, s14
 80072d8:	bd38      	pop	{r3, r4, r5, pc}
 80072da:	4b4d      	ldr	r3, [pc, #308]	; (8007410 <atanf+0x160>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	dc5c      	bgt.n	800739a <atanf+0xea>
 80072e0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80072e4:	db4d      	blt.n	8007382 <atanf+0xd2>
 80072e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072ea:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80072ee:	ed9f 5a49 	vldr	s10, [pc, #292]	; 8007414 <atanf+0x164>
 80072f2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007418 <atanf+0x168>
 80072f6:	eddf 5a49 	vldr	s11, [pc, #292]	; 800741c <atanf+0x16c>
 80072fa:	eddf 4a49 	vldr	s9, [pc, #292]	; 8007420 <atanf+0x170>
 80072fe:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	eea6 7a85 	vfma.f32	s14, s13, s10
 8007308:	eee6 4aa5 	vfma.f32	s9, s13, s11
 800730c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8007424 <atanf+0x174>
 8007310:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007428 <atanf+0x178>
 8007314:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007318:	eee4 5aa6 	vfma.f32	s11, s9, s13
 800731c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800742c <atanf+0x17c>
 8007320:	eddf 4a43 	vldr	s9, [pc, #268]	; 8007430 <atanf+0x180>
 8007324:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007328:	eee5 4aa6 	vfma.f32	s9, s11, s13
 800732c:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8007434 <atanf+0x184>
 8007330:	eddf 5a41 	vldr	s11, [pc, #260]	; 8007438 <atanf+0x188>
 8007334:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007338:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800743c <atanf+0x18c>
 800733c:	eea4 7aa6 	vfma.f32	s14, s9, s13
 8007340:	eee5 5a26 	vfma.f32	s11, s10, s13
 8007344:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007348:	eea5 7a86 	vfma.f32	s14, s11, s12
 800734c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007350:	d038      	beq.n	80073c4 <atanf+0x114>
 8007352:	493b      	ldr	r1, [pc, #236]	; (8007440 <atanf+0x190>)
 8007354:	4a3b      	ldr	r2, [pc, #236]	; (8007444 <atanf+0x194>)
 8007356:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800735a:	edd1 6a00 	vldr	s13, [r1]
 800735e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007362:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007366:	edd3 6a00 	vldr	s13, [r3]
 800736a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800736e:	2d00      	cmp	r5, #0
 8007370:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007374:	dab0      	bge.n	80072d8 <atanf+0x28>
 8007376:	eeb1 0a40 	vneg.f32	s0, s0
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007380:	bd38      	pop	{r3, r4, r5, pc}
 8007382:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007448 <atanf+0x198>
 8007386:	ee30 7a07 	vadd.f32	s14, s0, s14
 800738a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800738e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007396:	dda6      	ble.n	80072e6 <atanf+0x36>
 8007398:	bd38      	pop	{r3, r4, r5, pc}
 800739a:	f000 f85b 	bl	8007454 <fabsf>
 800739e:	4b2b      	ldr	r3, [pc, #172]	; (800744c <atanf+0x19c>)
 80073a0:	429c      	cmp	r4, r3
 80073a2:	dc12      	bgt.n	80073ca <atanf+0x11a>
 80073a4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80073a8:	429c      	cmp	r4, r3
 80073aa:	dc23      	bgt.n	80073f4 <atanf+0x144>
 80073ac:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80073b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80073b4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80073b8:	2300      	movs	r3, #0
 80073ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80073be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80073c2:	e792      	b.n	80072ea <atanf+0x3a>
 80073c4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80073c8:	bd38      	pop	{r3, r4, r5, pc}
 80073ca:	4b21      	ldr	r3, [pc, #132]	; (8007450 <atanf+0x1a0>)
 80073cc:	429c      	cmp	r4, r3
 80073ce:	dc0b      	bgt.n	80073e8 <atanf+0x138>
 80073d0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80073d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073d8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80073dc:	2302      	movs	r3, #2
 80073de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80073e2:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80073e6:	e780      	b.n	80072ea <atanf+0x3a>
 80073e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80073ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80073f0:	2303      	movs	r3, #3
 80073f2:	e77a      	b.n	80072ea <atanf+0x3a>
 80073f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80073f8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80073fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007400:	2301      	movs	r3, #1
 8007402:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007406:	e770      	b.n	80072ea <atanf+0x3a>
 8007408:	3fc90fdb 	.word	0x3fc90fdb
 800740c:	bfc90fdb 	.word	0xbfc90fdb
 8007410:	3edfffff 	.word	0x3edfffff
 8007414:	3c8569d7 	.word	0x3c8569d7
 8007418:	3d4bda59 	.word	0x3d4bda59
 800741c:	bd15a221 	.word	0xbd15a221
 8007420:	bd6ef16b 	.word	0xbd6ef16b
 8007424:	3d886b35 	.word	0x3d886b35
 8007428:	bd9d8795 	.word	0xbd9d8795
 800742c:	3dba2e6e 	.word	0x3dba2e6e
 8007430:	bde38e38 	.word	0xbde38e38
 8007434:	3e124925 	.word	0x3e124925
 8007438:	3eaaaaab 	.word	0x3eaaaaab
 800743c:	be4ccccd 	.word	0xbe4ccccd
 8007440:	0801b7a4 	.word	0x0801b7a4
 8007444:	0801b794 	.word	0x0801b794
 8007448:	7149f2ca 	.word	0x7149f2ca
 800744c:	3f97ffff 	.word	0x3f97ffff
 8007450:	401bffff 	.word	0x401bffff

08007454 <fabsf>:
 8007454:	ee10 3a10 	vmov	r3, s0
 8007458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800745c:	ee00 3a10 	vmov	s0, r3
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop

08007464 <__udivmoddi4>:
 8007464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	4686      	mov	lr, r0
 800746a:	468c      	mov	ip, r1
 800746c:	4608      	mov	r0, r1
 800746e:	9e08      	ldr	r6, [sp, #32]
 8007470:	4615      	mov	r5, r2
 8007472:	4674      	mov	r4, lr
 8007474:	4619      	mov	r1, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	f040 80c2 	bne.w	8007600 <__udivmoddi4+0x19c>
 800747c:	4285      	cmp	r5, r0
 800747e:	fab2 f282 	clz	r2, r2
 8007482:	d945      	bls.n	8007510 <__udivmoddi4+0xac>
 8007484:	b14a      	cbz	r2, 800749a <__udivmoddi4+0x36>
 8007486:	f1c2 0320 	rsb	r3, r2, #32
 800748a:	fa00 fc02 	lsl.w	ip, r0, r2
 800748e:	fa2e f303 	lsr.w	r3, lr, r3
 8007492:	4095      	lsls	r5, r2
 8007494:	ea43 0c0c 	orr.w	ip, r3, ip
 8007498:	4094      	lsls	r4, r2
 800749a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800749e:	b2a8      	uxth	r0, r5
 80074a0:	fbbc f8fe 	udiv	r8, ip, lr
 80074a4:	0c23      	lsrs	r3, r4, #16
 80074a6:	fb0e cc18 	mls	ip, lr, r8, ip
 80074aa:	fb08 f900 	mul.w	r9, r8, r0
 80074ae:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80074b2:	4599      	cmp	r9, r3
 80074b4:	d928      	bls.n	8007508 <__udivmoddi4+0xa4>
 80074b6:	18eb      	adds	r3, r5, r3
 80074b8:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 80074bc:	d204      	bcs.n	80074c8 <__udivmoddi4+0x64>
 80074be:	4599      	cmp	r9, r3
 80074c0:	d902      	bls.n	80074c8 <__udivmoddi4+0x64>
 80074c2:	f1a8 0702 	sub.w	r7, r8, #2
 80074c6:	442b      	add	r3, r5
 80074c8:	eba3 0309 	sub.w	r3, r3, r9
 80074cc:	b2a4      	uxth	r4, r4
 80074ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80074d2:	fb0e 331c 	mls	r3, lr, ip, r3
 80074d6:	fb0c f000 	mul.w	r0, ip, r0
 80074da:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80074de:	42a0      	cmp	r0, r4
 80074e0:	d914      	bls.n	800750c <__udivmoddi4+0xa8>
 80074e2:	192c      	adds	r4, r5, r4
 80074e4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80074e8:	d204      	bcs.n	80074f4 <__udivmoddi4+0x90>
 80074ea:	42a0      	cmp	r0, r4
 80074ec:	d902      	bls.n	80074f4 <__udivmoddi4+0x90>
 80074ee:	f1ac 0302 	sub.w	r3, ip, #2
 80074f2:	442c      	add	r4, r5
 80074f4:	1a24      	subs	r4, r4, r0
 80074f6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 80074fa:	b11e      	cbz	r6, 8007504 <__udivmoddi4+0xa0>
 80074fc:	40d4      	lsrs	r4, r2
 80074fe:	2300      	movs	r3, #0
 8007500:	6034      	str	r4, [r6, #0]
 8007502:	6073      	str	r3, [r6, #4]
 8007504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007508:	4647      	mov	r7, r8
 800750a:	e7dd      	b.n	80074c8 <__udivmoddi4+0x64>
 800750c:	4663      	mov	r3, ip
 800750e:	e7f1      	b.n	80074f4 <__udivmoddi4+0x90>
 8007510:	bb92      	cbnz	r2, 8007578 <__udivmoddi4+0x114>
 8007512:	1b43      	subs	r3, r0, r5
 8007514:	2101      	movs	r1, #1
 8007516:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800751a:	b2af      	uxth	r7, r5
 800751c:	fbb3 fcfe 	udiv	ip, r3, lr
 8007520:	0c20      	lsrs	r0, r4, #16
 8007522:	fb0e 331c 	mls	r3, lr, ip, r3
 8007526:	fb0c f807 	mul.w	r8, ip, r7
 800752a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800752e:	4598      	cmp	r8, r3
 8007530:	d962      	bls.n	80075f8 <__udivmoddi4+0x194>
 8007532:	18eb      	adds	r3, r5, r3
 8007534:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8007538:	d204      	bcs.n	8007544 <__udivmoddi4+0xe0>
 800753a:	4598      	cmp	r8, r3
 800753c:	d902      	bls.n	8007544 <__udivmoddi4+0xe0>
 800753e:	f1ac 0002 	sub.w	r0, ip, #2
 8007542:	442b      	add	r3, r5
 8007544:	eba3 0308 	sub.w	r3, r3, r8
 8007548:	b2a4      	uxth	r4, r4
 800754a:	fbb3 fcfe 	udiv	ip, r3, lr
 800754e:	fb0e 331c 	mls	r3, lr, ip, r3
 8007552:	fb0c f707 	mul.w	r7, ip, r7
 8007556:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800755a:	42a7      	cmp	r7, r4
 800755c:	d94e      	bls.n	80075fc <__udivmoddi4+0x198>
 800755e:	192c      	adds	r4, r5, r4
 8007560:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8007564:	d204      	bcs.n	8007570 <__udivmoddi4+0x10c>
 8007566:	42a7      	cmp	r7, r4
 8007568:	d902      	bls.n	8007570 <__udivmoddi4+0x10c>
 800756a:	f1ac 0302 	sub.w	r3, ip, #2
 800756e:	442c      	add	r4, r5
 8007570:	1be4      	subs	r4, r4, r7
 8007572:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007576:	e7c0      	b.n	80074fa <__udivmoddi4+0x96>
 8007578:	f1c2 0320 	rsb	r3, r2, #32
 800757c:	fa20 f103 	lsr.w	r1, r0, r3
 8007580:	4095      	lsls	r5, r2
 8007582:	4090      	lsls	r0, r2
 8007584:	fa2e f303 	lsr.w	r3, lr, r3
 8007588:	4303      	orrs	r3, r0
 800758a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800758e:	b2af      	uxth	r7, r5
 8007590:	fbb1 fcfe 	udiv	ip, r1, lr
 8007594:	fb0e 101c 	mls	r0, lr, ip, r1
 8007598:	0c19      	lsrs	r1, r3, #16
 800759a:	fb0c f807 	mul.w	r8, ip, r7
 800759e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80075a2:	4588      	cmp	r8, r1
 80075a4:	fa04 f402 	lsl.w	r4, r4, r2
 80075a8:	d922      	bls.n	80075f0 <__udivmoddi4+0x18c>
 80075aa:	1869      	adds	r1, r5, r1
 80075ac:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80075b0:	d204      	bcs.n	80075bc <__udivmoddi4+0x158>
 80075b2:	4588      	cmp	r8, r1
 80075b4:	d902      	bls.n	80075bc <__udivmoddi4+0x158>
 80075b6:	f1ac 0002 	sub.w	r0, ip, #2
 80075ba:	4429      	add	r1, r5
 80075bc:	eba1 0108 	sub.w	r1, r1, r8
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	fbb1 fcfe 	udiv	ip, r1, lr
 80075c6:	fb0e 111c 	mls	r1, lr, ip, r1
 80075ca:	fb0c f707 	mul.w	r7, ip, r7
 80075ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80075d2:	429f      	cmp	r7, r3
 80075d4:	d90e      	bls.n	80075f4 <__udivmoddi4+0x190>
 80075d6:	18eb      	adds	r3, r5, r3
 80075d8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80075dc:	d204      	bcs.n	80075e8 <__udivmoddi4+0x184>
 80075de:	429f      	cmp	r7, r3
 80075e0:	d902      	bls.n	80075e8 <__udivmoddi4+0x184>
 80075e2:	f1ac 0102 	sub.w	r1, ip, #2
 80075e6:	442b      	add	r3, r5
 80075e8:	1bdb      	subs	r3, r3, r7
 80075ea:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80075ee:	e792      	b.n	8007516 <__udivmoddi4+0xb2>
 80075f0:	4660      	mov	r0, ip
 80075f2:	e7e3      	b.n	80075bc <__udivmoddi4+0x158>
 80075f4:	4661      	mov	r1, ip
 80075f6:	e7f7      	b.n	80075e8 <__udivmoddi4+0x184>
 80075f8:	4660      	mov	r0, ip
 80075fa:	e7a3      	b.n	8007544 <__udivmoddi4+0xe0>
 80075fc:	4663      	mov	r3, ip
 80075fe:	e7b7      	b.n	8007570 <__udivmoddi4+0x10c>
 8007600:	4283      	cmp	r3, r0
 8007602:	d906      	bls.n	8007612 <__udivmoddi4+0x1ae>
 8007604:	b916      	cbnz	r6, 800760c <__udivmoddi4+0x1a8>
 8007606:	2100      	movs	r1, #0
 8007608:	4608      	mov	r0, r1
 800760a:	e77b      	b.n	8007504 <__udivmoddi4+0xa0>
 800760c:	e9c6 e000 	strd	lr, r0, [r6]
 8007610:	e7f9      	b.n	8007606 <__udivmoddi4+0x1a2>
 8007612:	fab3 f783 	clz	r7, r3
 8007616:	b98f      	cbnz	r7, 800763c <__udivmoddi4+0x1d8>
 8007618:	4283      	cmp	r3, r0
 800761a:	d301      	bcc.n	8007620 <__udivmoddi4+0x1bc>
 800761c:	4572      	cmp	r2, lr
 800761e:	d808      	bhi.n	8007632 <__udivmoddi4+0x1ce>
 8007620:	ebbe 0402 	subs.w	r4, lr, r2
 8007624:	eb60 0303 	sbc.w	r3, r0, r3
 8007628:	2001      	movs	r0, #1
 800762a:	469c      	mov	ip, r3
 800762c:	b91e      	cbnz	r6, 8007636 <__udivmoddi4+0x1d2>
 800762e:	2100      	movs	r1, #0
 8007630:	e768      	b.n	8007504 <__udivmoddi4+0xa0>
 8007632:	4638      	mov	r0, r7
 8007634:	e7fa      	b.n	800762c <__udivmoddi4+0x1c8>
 8007636:	e9c6 4c00 	strd	r4, ip, [r6]
 800763a:	e7f8      	b.n	800762e <__udivmoddi4+0x1ca>
 800763c:	f1c7 0c20 	rsb	ip, r7, #32
 8007640:	40bb      	lsls	r3, r7
 8007642:	fa22 f40c 	lsr.w	r4, r2, ip
 8007646:	431c      	orrs	r4, r3
 8007648:	fa2e f10c 	lsr.w	r1, lr, ip
 800764c:	fa20 f30c 	lsr.w	r3, r0, ip
 8007650:	40b8      	lsls	r0, r7
 8007652:	4301      	orrs	r1, r0
 8007654:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8007658:	fa0e f507 	lsl.w	r5, lr, r7
 800765c:	fbb3 f8f9 	udiv	r8, r3, r9
 8007660:	fa1f fe84 	uxth.w	lr, r4
 8007664:	fb09 3018 	mls	r0, r9, r8, r3
 8007668:	0c0b      	lsrs	r3, r1, #16
 800766a:	fb08 fa0e 	mul.w	sl, r8, lr
 800766e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007672:	459a      	cmp	sl, r3
 8007674:	fa02 f207 	lsl.w	r2, r2, r7
 8007678:	d940      	bls.n	80076fc <__udivmoddi4+0x298>
 800767a:	18e3      	adds	r3, r4, r3
 800767c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8007680:	d204      	bcs.n	800768c <__udivmoddi4+0x228>
 8007682:	459a      	cmp	sl, r3
 8007684:	d902      	bls.n	800768c <__udivmoddi4+0x228>
 8007686:	f1a8 0002 	sub.w	r0, r8, #2
 800768a:	4423      	add	r3, r4
 800768c:	eba3 030a 	sub.w	r3, r3, sl
 8007690:	b289      	uxth	r1, r1
 8007692:	fbb3 f8f9 	udiv	r8, r3, r9
 8007696:	fb09 3318 	mls	r3, r9, r8, r3
 800769a:	fb08 fe0e 	mul.w	lr, r8, lr
 800769e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80076a2:	458e      	cmp	lr, r1
 80076a4:	d92c      	bls.n	8007700 <__udivmoddi4+0x29c>
 80076a6:	1861      	adds	r1, r4, r1
 80076a8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80076ac:	d204      	bcs.n	80076b8 <__udivmoddi4+0x254>
 80076ae:	458e      	cmp	lr, r1
 80076b0:	d902      	bls.n	80076b8 <__udivmoddi4+0x254>
 80076b2:	f1a8 0302 	sub.w	r3, r8, #2
 80076b6:	4421      	add	r1, r4
 80076b8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80076bc:	fba0 9802 	umull	r9, r8, r0, r2
 80076c0:	eba1 010e 	sub.w	r1, r1, lr
 80076c4:	4541      	cmp	r1, r8
 80076c6:	46ce      	mov	lr, r9
 80076c8:	4643      	mov	r3, r8
 80076ca:	d302      	bcc.n	80076d2 <__udivmoddi4+0x26e>
 80076cc:	d106      	bne.n	80076dc <__udivmoddi4+0x278>
 80076ce:	454d      	cmp	r5, r9
 80076d0:	d204      	bcs.n	80076dc <__udivmoddi4+0x278>
 80076d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80076d6:	eb68 0304 	sbc.w	r3, r8, r4
 80076da:	3801      	subs	r0, #1
 80076dc:	2e00      	cmp	r6, #0
 80076de:	d0a6      	beq.n	800762e <__udivmoddi4+0x1ca>
 80076e0:	ebb5 020e 	subs.w	r2, r5, lr
 80076e4:	eb61 0103 	sbc.w	r1, r1, r3
 80076e8:	fa01 fc0c 	lsl.w	ip, r1, ip
 80076ec:	fa22 f307 	lsr.w	r3, r2, r7
 80076f0:	ea4c 0303 	orr.w	r3, ip, r3
 80076f4:	40f9      	lsrs	r1, r7
 80076f6:	e9c6 3100 	strd	r3, r1, [r6]
 80076fa:	e798      	b.n	800762e <__udivmoddi4+0x1ca>
 80076fc:	4640      	mov	r0, r8
 80076fe:	e7c5      	b.n	800768c <__udivmoddi4+0x228>
 8007700:	4643      	mov	r3, r8
 8007702:	e7d9      	b.n	80076b8 <__udivmoddi4+0x254>

08007704 <_init>:
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007706:	bf00      	nop
 8007708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770a:	bc08      	pop	{r3}
 800770c:	469e      	mov	lr, r3
 800770e:	4770      	bx	lr

08007710 <_fini>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	bf00      	nop
 8007714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007716:	bc08      	pop	{r3}
 8007718:	469e      	mov	lr, r3
 800771a:	4770      	bx	lr
